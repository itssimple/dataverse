{"version":3,"file":"index-1207655b.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","export default function MainPage() {\n  return (\n    <>\n      Main page - <a href={import.meta.env.VITE_BUNGIE_API_AUTHURL}>Log in</a>\n    </>\n  );\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\n\nexport function App() {\n  return (\n    <>\n      <header className=\"header tooltip\">Dataverse</header>\n      <div class=\"app\">\n        <Router>\n          <Fragment path=\"/\">\n            <MainPage />\n          </Fragment>\n          <div path=\"/authenticated\">Authenticated</div>\n        </Router>\n      </div>\n      <footer className=\"fui body fiction\">Â© 2023 NoLifeKing85#2914</footer>\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  getItem: (key: string, defaultValue?: null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { render } from \"preact\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n  }\n}\n\nwindow.db = new Destiny2Database();\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.db.initializeDatabase();\n\nrender(<App />, document.getElementById(\"app\") as HTMLElement);\n"],"names":["log","category","params","console","MainPage","href","children","App","className","class","path","o","Destiny2Database","removeStorageItem","__publicField","initializeDatabase","setItem","getItem","setStorageItem","getStorageItem","getStorageItems","dbRequest","db","event","autoIncrement","keyPath","keyValueStore","playerActivityStore","activityDetailsStore","self","resolve","_setItem","storeName","key","value","request","reject","result","filter","_getItem","defaultValue","_removeItem","storageName","_getFilteredItems","window","render"],"mappings":"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"}