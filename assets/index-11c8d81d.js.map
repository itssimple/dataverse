{"version":3,"file":"index-11c8d81d.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/pages/logging-in.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function MainPage(props: D2AppState) {\n  if (props.isAuthenticated) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }\n      >\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/logging-in\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function Dashboard(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  if (!props.isAuthenticated.value) {\n    location.href = \"/\";\n    return <></>;\n  }\n\n  if (!props.isDataLoaded.value) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return <>Blep</>;\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      Â© 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Signal } from \"@preact/signals\";\nimport { log } from \"../scripts/log\";\nimport { D2AppState } from \"../classes/appState\";\n\nexport default function LoggingIn(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  const eventEmitter = window.eventEmitter;\n\n  eventEmitter.addEventListener(\"loading-text\", (data: any) => {\n    if (!!data) {\n      setLoadingText(data);\n    }\n  });\n\n  function setLoadingText(text: string) {\n    let loadingText = document.getElementById(\"loading-text\");\n    if (loadingText) {\n      loadingText.innerText = text;\n    }\n  }\n\n  // Check if the user has a valid token and/or is authenticated, if not, redirect to the main page so they can login\n  apiClient.checkIfAuthenticated().then(async (result) => {\n    if (!result) {\n      location.href = \"/\";\n      return;\n    }\n\n    log(\"LOGIN\", \"Authenticated, checking manifests\");\n\n    setLoadingText(\"Checking manifest ...\");\n    let manifestVersion = await apiClient.checkManifestVersion();\n\n    if (manifestVersion === null || manifestVersion === undefined) {\n      setLoadingText(\n        \"Something is wrong with Destiny 2 (or this app), please reload the page.\"\n      );\n      return;\n    }\n\n    log(\"LOGIN\", manifestVersion);\n\n    setLoadingText(\"Loading profile data\");\n\n    await apiClient.getLinkedProfiles();\n\n    setLoadingText(\"Checking for missing definitions\");\n\n    let missingDefinitions = await apiClient.checkStoredDefinitions(false);\n\n    if (missingDefinitions.length > 0) {\n      setLoadingText(\n        `Downloading ${missingDefinitions.length} missing definition(s)`\n      );\n      await apiClient.checkStoredDefinitions(true);\n    }\n\n    setLoadingText(\"Loading data...\");\n    await apiClient.loadDataFromStorage();\n    setLoadingText(\"Loading data... done\");\n\n    setLoadingText(\"Loading character data...\");\n    await apiClient.getLastPlayedCharacter();\n\n    props.isDataLoaded.value = true;\n\n    setTimeout(() => {\n      setLoadingText(\"Opening application...\");\n      eventEmitter.emit(\"manifests-loaded\");\n\n      setTimeout(() => {\n        location.href = \"/#/dashboard\";\n      }, 1000);\n    }, 1000);\n  });\n\n  return (\n    <>\n      <span class=\"fui body\" id=\"loading-text\">\n        Logging in and loading data ...\n      </span>\n    </>\n  );\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\nimport LoggingIn from \"./pages/logging-in\";\nimport { useContext } from \"preact/hooks\";\n\nexport function App() {\n  const state = useContext(window.appState);\n  return (\n    <>\n      <header className=\"header subscreen\">Dataverse</header>\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage {...state} />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/logging-in\">\n            <LoggingIn {...state} />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard {...state} />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: any | null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","import { DestinyNamedObject } from \"./apiClasses/destinyNamedObject\";\nimport { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  checkManifestVersion: () => Promise<{\n    updatedManifest: boolean;\n    version: string | null;\n  } | null>;\n  checkStoredDefinitions: (\n    downloadMissingDefinitions?: boolean\n  ) => Promise<string[]>;\n  loadDestinyContentData: (definitions: string[]) => Promise<void>;\n  loadDataFromStorage: () => Promise<void>;\n  getManifest: () => Promise<{\n    Response: any;\n  } | null>;\n  loadCommonSettings: () => Promise<any>;\n  getUserToken: () => Promise<string | null>;\n  getLinkedProfiles: () => Promise<unknown>;\n  getUserProfile: (\n    membershipId: string,\n    membershipType: number\n  ) => Promise<unknown>;\n  getLastPlayedCharacter: (forceRefresh?: boolean) => Promise<any | null>;\n\n  apiToken: string;\n  applicationName: string;\n  cachedManifest: any;\n  destinyDataDefinition: { [key: string]: any };\n  lastVersion: string | null;\n  profile: any | null;\n  linkedProfiles: any | null;\n  getNamedDataObject: (\n    forceRefresh?: boolean\n  ) => Promise<DestinyNamedObject | null>;\n  getPresentationNodeFromHash: (hash: string) => any[];\n  mapHashesToDefinitionsInObject: (object: any) => any;\n\n  constructor(apiToken: string, appName: string) {\n    _log(\"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    const maxActivitiesPerFetch = 250;\n\n    /**\n     * @description The datatypes we are interested in.\n     */\n    const destinyDataTypes = [\n      \"DestinyActivityTypeDefinition\",\n      \"DestinyActivityDefinition\",\n      \"DestinyArtifactDefinition\",\n      \"DestinyChecklistDefinition\",\n      \"DestinyClassDefinition\",\n      \"DestinyDestinationDefinition\",\n      \"DestinyDamageTypeDefinition\",\n      \"DestinyFactionDefinition\",\n      \"DestinyGenderDefinition\",\n      \"DestinyItemCategoryDefinition\",\n      \"DestinyItemTierTypeDefinition\",\n      \"DestinyInventoryBucketDefinition\",\n      \"DestinyInventoryItemDefinition\",\n      \"DestinyMedalTierDefinition\",\n      \"DestinyMetricDefinition\",\n      \"DestinyMilestoneDefinition\",\n      \"DestinyObjectiveDefinition\",\n      \"DestinyPlaceDefinition\",\n      \"DestinyPresentationNodeDefinition\",\n      \"DestinyProgressionDefinition\",\n      \"DestinyRaceDefinition\",\n      \"DestinyRecordDefinition\",\n      \"DestinySeasonDefinition\",\n      \"DestinySeasonPassDefinition\",\n      \"DestinyStatDefinition\",\n      \"DestinyTraitDefinition\",\n    ];\n\n    const profileComponents = {\n      None: 0,\n      Profiles: 100,\n      VendorReceipts: 101,\n      ProfileInventories: 102,\n      ProfileCurrencies: 103,\n      ProfileProgression: 104,\n      PlatformSilver: 105,\n      Characters: 200,\n      CharacterInventories: 201,\n      CharacterProgressions: 202,\n      CharacterRenderData: 203,\n      CharacterActivities: 204,\n      CharacterEquipment: 205,\n      ItemInstances: 300,\n      ItemObjectives: 301,\n      ItemPerks: 302,\n      ItemRenderData: 303,\n      ItemStats: 304,\n      ItemSockets: 305,\n      ItemTalentGrids: 306,\n      ItemCommonData: 307,\n      ItemPlugStates: 308,\n      ItemPlugObjectives: 309,\n      ItemReusablePlugs: 310,\n      Vendors: 400,\n      VendorCategories: 401,\n      VendorSales: 402,\n      Kiosks: 500,\n      CurrencyLookups: 600,\n      PresentationNodes: 700,\n      Collectibles: 800,\n      Records: 900,\n      Transitory: 1000,\n      Metrics: 1100,\n      StringVariables: 1200,\n    };\n\n    const DestinyItemState = {\n      None: 0,\n      Locked: 1,\n      Tracked: 2,\n      Masterwork: 4,\n    };\n\n    this.lastVersion = null;\n\n    this.applicationName = appName;\n\n    this.apiToken = apiToken;\n\n    this.destinyDataDefinition = {};\n\n    function _log(...params: any[]) {\n      log(\"D2API\", params);\n    }\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      let headers: RequestInit[\"headers\"] = {};\n\n      if (body !== null || authorization !== null) {\n        headers[\"Content-Type\"] = \"application/json\";\n        headers[\"x-api-key\"] = self.apiToken;\n        if (authorization !== null) {\n          headers.authorization = `Bearer ${authorization}`;\n        }\n      }\n\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        _log(\"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        _log(\"Error handling token\", JSON.stringify(tokenResponse));\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.loadDataFromStorage = async () => {\n      _log(\"Loading data from storage\");\n\n      let _cachedManifest = await db.getItem(\"manifest\");\n      if (_cachedManifest !== null) {\n        self.cachedManifest = JSON.parse(_cachedManifest);\n      }\n\n      let _cachedManifestVersion = await db.getItem(\"manifestVersion\");\n      if (_cachedManifestVersion !== null) {\n        self.lastVersion = _cachedManifestVersion;\n      }\n\n      self.checkStoredDefinitions();\n\n      for (let dataType of destinyDataTypes) {\n        let _cachedData = await db.getItem(`destinyContent-${dataType}`);\n        if (_cachedData !== null) {\n          self.destinyDataDefinition[dataType] = JSON.parse(_cachedData);\n        }\n      }\n\n      let _profile = await db.getItem(\"destiny-profile\");\n      if (_profile !== null) {\n        self.profile = JSON.parse(_profile);\n      }\n\n      let _linkedProfiles = await db.getItem(\"destiny-linkedProfiles\");\n      if (_linkedProfiles !== null) {\n        self.linkedProfiles = JSON.parse(_linkedProfiles);\n      }\n\n      _log(\"Data loaded from storage\");\n      eventEmitter.emit(\"destiny-data-loaded\");\n    };\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        _log(\"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      _log(\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    this.checkManifestVersion = async () => {\n      _log(\"Checking manifest version\");\n      return new Promise(async function (resolve, reject) {\n        let manifest = await self.getManifest();\n\n        if (manifest == null) {\n          _log(\"Failed to fetch API\");\n          return null;\n        }\n\n        let lastVersion = (await db.getItem(\"manifestVersion\")) ?? \"null\";\n\n        if (manifest.Response.version !== lastVersion) {\n          /* Currently cached data is older than 60 minutes, so we clear it. */\n          await db.removeItem(\"lastManifestUpdate\");\n          await db.removeItem(\"manifest\");\n          await db.removeItem(\"manifestVersion\");\n\n          for (let dataType of destinyDataTypes) {\n            await db.removeItem(`destinyContent-${dataType}`);\n          }\n\n          self.cachedManifest = manifest.Response;\n\n          await db.setItem(\"manifestVersion\", manifest.Response.version);\n          await db.setItem(\"manifest\", JSON.stringify(self.cachedManifest));\n          await db.setItem(\"lastManifestUpdate\", Date.now());\n\n          resolve({ updatedManifest: true, version: self.lastVersion });\n          _log(\"Manifest updated\");\n          return;\n        }\n\n        self.cachedManifest = manifest.Response;\n\n        resolve({ updatedManifest: false, version: self.lastVersion });\n        _log(\"Manifest version is up to date\");\n      });\n    };\n\n    this.checkStoredDefinitions = async function (\n      downloadMissingDefinitions = true\n    ) {\n      let missingDefinitions: string[] = [];\n\n      for (let dataType of destinyDataTypes) {\n        let data = await db.getItem(`destinyContent-${dataType}`);\n        if (data === null) {\n          missingDefinitions.push(dataType);\n        }\n      }\n\n      if (missingDefinitions.length > 0 && downloadMissingDefinitions) {\n        for (let dataType of missingDefinitions) {\n          await db.removeItem(`destinyContent-${dataType}`);\n        }\n\n        await self.loadDestinyContentData(missingDefinitions);\n      }\n\n      return missingDefinitions;\n    };\n\n    this.loadDestinyContentData = async function (definitions: string[] = []) {\n      for (let dataType of definitions) {\n        await loadDestinyContentDataType(dataType);\n      }\n    };\n\n    async function loadDestinyContentDataType(dataType: string) {\n      let manifest = self.cachedManifest;\n\n      const dataTypeWords = dataType\n        .replace(\"Destiny\", \"\")\n        .split(/(?=[A-Z])/)\n        .join(\" \");\n\n      eventEmitter.emit(\"loading-text\", `Loading ${dataTypeWords}`);\n\n      const contentTypeDownload = await callUrl(\n        \"GET\",\n        `${destinyBaseUrl}${manifest.jsonWorldComponentContentPaths.en[dataType]}`\n      );\n\n      const contentLength = contentTypeDownload.headers.get(\"content-length\");\n\n      const total = parseInt(contentLength || \"0\", 10);\n      let loaded = 0;\n\n      const res = new Response(\n        new ReadableStream({\n          async start(controller) {\n            const reader = contentTypeDownload.body!.getReader();\n\n            let progressIndication = 0;\n            for (;;) {\n              var r = await reader!.read();\n              if (r!.done) {\n                break;\n              }\n              loaded += r!.value.byteLength;\n\n              progressIndication++;\n              if (progressIndication % 30 === 0) {\n                eventEmitter.emit(\n                  \"loading-text\",\n                  `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                    \"sv-SE\"\n                  ).format(\n                    Math.round(\n                      (loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON\n                    ) / 100\n                  )} MB)`\n                );\n              }\n              controller.enqueue(r!.value);\n            }\n\n            eventEmitter.emit(\n              \"loading-text\",\n              `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                \"sv-SE\"\n              ).format(\n                Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) /\n                  100\n              )} MB)`\n            );\n            controller.close();\n          },\n        })\n      );\n\n      if (contentTypeDownload.status !== 200) {\n        log(\"Manifest download error\", await res.json());\n        return;\n      }\n\n      const contentTypeJson = await res.json();\n\n      self.destinyDataDefinition[dataType] = contentTypeJson;\n      db.setItem(`destinyContent-${dataType}`, JSON.stringify(contentTypeJson));\n    }\n\n    this.getManifest = async function (): Promise<{\n      Response: any;\n    } | null> {\n      let lastManifestUpdate = await db.getItem(\"lastManifestUpdate\");\n      _log(\"Checking if manifest is cached\");\n\n      if (\n        lastManifestUpdate !== null &&\n        Date.now() - lastManifestUpdate < 60000 * 60\n      ) {\n        let _manifest = await db.getItem(\"manifest\");\n        if (_manifest !== null) {\n          _log(\"Manifest is cached\");\n          return { Response: JSON.parse(_manifest) };\n        }\n      }\n\n      let manifestRequest = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Destiny2/Manifest/`\n      );\n\n      if (manifestRequest.status === 200) {\n        let manifest = await manifestRequest.json();\n        if (manifest.ErrorStatus == \"Success\") {\n          db.setItem(\"lastManifestUpdate\", Date.now());\n          db.setItem(\"manifest\", JSON.stringify(manifest.Response));\n          _log(\"Manifest updated from API\");\n\n          return { Response: manifest.Response };\n        } else {\n          _log(\"Manifesterror\");\n          _log(manifest.Response);\n\n          return null;\n        }\n      } else {\n        let responseText = manifestRequest.json();\n        _log(\"Error when fetching Manifest\");\n        _log(responseText);\n\n        return null;\n      }\n    };\n\n    this.loadCommonSettings = async function () {\n      await refreshTokenIfExpired();\n\n      const settings = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Settings`,\n        null,\n        await this.getUserToken()\n      );\n      if (settings.status === 200) {\n        return await settings.json();\n      }\n\n      _log(\n        \"Error fetching common settings\",\n        settings.status,\n        settings.statusText\n      );\n      return null;\n    };\n\n    this.getUserToken = async function () {\n      return await db.getItem(\"destinyToken\");\n    };\n\n    this.getLinkedProfiles = async function () {\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        var bnetMemberId = await db.getItem(\"destinyBungieMembershipId\");\n\n        let linkedProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/-1/Profile/${bnetMemberId}/LinkedProfiles/`,\n          null,\n          await this.getUserToken()\n        );\n\n        if (linkedProfile.status === 200) {\n          let profiles = await linkedProfile.json();\n\n          db.setItem(\n            \"destiny-linkedProfiles\",\n            JSON.stringify(profiles.Response)\n          );\n\n          self.linkedProfiles = profiles.Response;\n\n          resolve(profiles.Response);\n        } else {\n          self.refreshToken();\n          reject(linkedProfile);\n        }\n      });\n    };\n\n    this.getUserProfile = async function (\n      membershipId: string,\n      membershipType: number\n    ) {\n      let interestingComponents = [\n        profileComponents.Profiles,\n        profileComponents.ProfileInventories,\n        profileComponents.ProfileCurrencies,\n        profileComponents.ProfileProgression,\n        profileComponents.Characters,\n        profileComponents.CharacterInventories,\n        profileComponents.CharacterProgressions,\n        profileComponents.CharacterActivities,\n        profileComponents.CharacterEquipment,\n        profileComponents.ItemInstances,\n        profileComponents.ItemObjectives,\n        profileComponents.ItemSockets,\n        profileComponents.ItemTalentGrids,\n        profileComponents.ItemCommonData,\n        profileComponents.ItemPlugStates,\n        profileComponents.ItemPlugObjectives,\n        profileComponents.ItemReusablePlugs,\n        profileComponents.Metrics,\n        profileComponents.Records,\n        profileComponents.Collectibles,\n        profileComponents.StringVariables,\n      ];\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        let userProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/${membershipType}/Profile/${membershipId}/?components=${interestingComponents.join(\n            \",\"\n          )}`,\n          null,\n          await this.getUserToken()\n        );\n        if (userProfile.status === 200) {\n          let profile = await userProfile.json();\n\n          db.setItem(\"destiny-profile\", JSON.stringify(profile.Response));\n          self.profile = profile.Response;\n\n          resolve(profile.Response);\n        } else {\n          self.refreshToken();\n          reject(userProfile);\n        }\n      });\n    };\n\n    this.getLastPlayedCharacter = async function (forceRefresh = false) {\n      await refreshTokenIfExpired();\n\n      let _profile = self.profile;\n\n      if (forceRefresh) {\n        _profile = null;\n      }\n\n      if (self.linkedProfiles === null) {\n        return null;\n      }\n\n      await self.getLinkedProfiles();\n\n      if (\n        self.linkedProfiles !== null &&\n        self.linkedProfiles.profiles !== null &&\n        self.linkedProfiles.profiles.length > 0\n      ) {\n        var primaryMembership = self.linkedProfiles.profiles.sort(\n          (a: any, b: any) => (a.dateLastPlayed > b.dateLastPlayed ? -1 : 1)\n        )[0];\n\n        _profile = await self.getUserProfile(\n          primaryMembership.membershipId,\n          primaryMembership.membershipType\n        );\n      }\n\n      let characters = [];\n\n      for (let char of _profile.profile.data.characterIds) {\n        characters.push(_profile.characters.data[char]);\n      }\n\n      let _last = characters.sort((a, b) =>\n        a.dateLastPlayed > b.dateLastPlayed ? -1 : 1\n      )[0];\n\n      let lastPlayedCharacter = {\n        characterInfo: _last,\n        characterProgression: !!!_profile.characterProgressions.disabled\n          ? _profile.characterProgressions.data[_last.characterId]\n          : {},\n        characterActivities: !!!_profile.characterActivities.disabled\n          ? _profile.characterActivities.data[_last.characterId]\n          : {},\n        characterUninstancedItemComponents:\n          _profile.characterUninstancedItemComponents[_last.characterId]\n            .objectives.data,\n        characterInventory:\n          _profile.characterInventories.data[_last.characterId].items,\n        characterEquipment:\n          _profile.characterEquipment.data[_last.characterId].items,\n        characterPlugSets: !!!_profile.characterPlugSets.disabled\n          ? _profile.characterPlugSets.data[_last.characterId].plugs\n          : {},\n        characterCollectibles:\n          _profile.characterCollectibles.data[_last.characterId].collectibles,\n        characterRecords: _profile.characterRecords.data[_last.characterId],\n        characterStringVariables:\n          _profile.characterStringVariables.data[_last.characterId],\n        profileProgression: _profile.profileProgression.data,\n        metrics: _profile.metrics.data.metrics,\n        itemComponents: _profile.itemComponents,\n        records: _profile.profileRecords.data,\n        profileInventory: _profile.profileInventory.data.items,\n        profileCurrency: _profile.profileCurrencies.data.items,\n        profilePlugSets: !!!_profile.profilePlugSets.disabled\n          ? _profile.profilePlugSets.data.plugs\n          : {},\n        profileCollectibles: _profile.profileCollectibles.data,\n        profile: _profile.profile.data,\n        profileStringVariables: _profile.profileStringVariables.data,\n      };\n\n      return lastPlayedCharacter;\n    };\n\n    this.getNamedDataObject = async function (\n      forceRefresh = false\n    ): Promise<DestinyNamedObject | null> {\n      let _lastPlayer = await self.getLastPlayedCharacter(forceRefresh);\n\n      if (_lastPlayer == null) {\n        return null;\n      }\n\n      let namedDataObject = {\n        ..._lastPlayer,\n      };\n\n      for (let statKey of Object.keys(namedDataObject.characterInfo.stats)) {\n        namedDataObject.characterInfo.stats[statKey] = {\n          statValue: namedDataObject.characterInfo.stats[statKey],\n          statHash: statKey,\n        };\n      }\n\n      for (let metricKey of Object.keys(namedDataObject.metrics)) {\n        namedDataObject.metrics[metricKey] = {\n          ...namedDataObject.metrics[metricKey],\n          metricHash: metricKey,\n        };\n      }\n\n      for (let recordKey of Object.keys(namedDataObject.records.records)) {\n        namedDataObject.records.records[recordKey] = {\n          ...namedDataObject.records.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      for (let recordKey of Object.keys(\n        namedDataObject.characterRecords.records\n      )) {\n        namedDataObject.characterRecords.records[recordKey] = {\n          ...namedDataObject.characterRecords.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      namedDataObject = self.mapHashesToDefinitionsInObject(namedDataObject);\n\n      const cacheBreaker = await db.getItem(\"destiny2-use-cachebreaker\", false);\n      if (cacheBreaker) {\n        const lockableItems = _lastPlayer.characterInventory.filter(\n          (i: any) => i.lockable && i.inventoryitemItemType == 3\n        );\n\n        if (lockableItems.length > 0) {\n          // await self.lockItem(\n          //   _lastPlayer.characterInfo.membershipType,\n          //   _lastPlayer.characterInfo.characterId,\n          //   lockableItems[0].itemInstanceId,\n          //   lockableItems[0].state & DestinyItemState.Locked\n          // );\n        }\n      }\n\n      eventEmitter.emit(\"destiny2-api-update\", namedDataObject);\n\n      return namedDataObject;\n    };\n\n    this.getPresentationNodeFromHash = function (hash: string) {\n      const presentationNameArray = [];\n\n      const presentationNode =\n        self.destinyDataDefinition.DestinyPresentationNodeDefinition[hash];\n      if (presentationNode) {\n        presentationNameArray.unshift({\n          name: presentationNode.displayProperties.name,\n          description: presentationNode.displayProperties.description,\n          icon: presentationNode.displayProperties.icon,\n          hash: hash,\n        });\n\n        if (presentationNode.parentNodeHashes) {\n          for (let _hash of presentationNode.parentNodeHashes) {\n            const subItems = self.getPresentationNodeFromHash(_hash);\n            for (let item of subItems) {\n              presentationNameArray.push(item);\n            }\n          }\n        }\n      }\n\n      return presentationNameArray;\n    };\n\n    this.mapHashesToDefinitionsInObject = function (object: any) {\n      let _objectCopy = { ...object };\n\n      let keys = Object.keys(_objectCopy);\n      for (let key of keys) {\n        let _type = typeof _objectCopy[key];\n        let _field = _objectCopy[key];\n\n        if (Array.isArray(_field)) {\n          for (let x = 0; x < _field.length; x++) {\n            let arrItem = _field[x];\n            if (typeof arrItem === \"object\") {\n              _field[x] = self.mapHashesToDefinitionsInObject(arrItem);\n            } else {\n              _field[x] = arrItem;\n            }\n          }\n          _objectCopy[key] = _field;\n        } else if (_type === \"object\" && _field !== null) {\n          _objectCopy[key] = self.mapHashesToDefinitionsInObject(\n            _objectCopy[key]\n          );\n        } else {\n          if (key.indexOf(\"Hash\") > -1 && !Array.isArray(_field)) {\n            let _hashType = key\n              .split(\"Hash\")[0]\n              .replace(\"current\", \"\")\n              .toLowerCase();\n\n            switch (_hashType) {\n              case \"item\":\n              case \"plugitem\":\n                _hashType = \"inventoryitem\";\n                break;\n            }\n\n            let dataType = destinyDataTypes.find(\n              (i) =>\n                i.toLowerCase() == `Destiny${_hashType}Definition`.toLowerCase()\n            );\n            let definitionData = self.destinyDataDefinition[dataType!];\n            if (\n              definitionData &&\n              definitionData[_field] &&\n              definitionData[_field].displayProperties\n            ) {\n              const dField = definitionData[_field];\n              if (\n                dField.displayProperties.name &&\n                dField.displayProperties.name.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.displayProperties.name;\n              } else if (\n                dField.setData &&\n                dField.setData.questLineName &&\n                dField.setData.questLineName.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.setData.questLineName;\n              }\n\n              if (\n                dField.displayProperties.description &&\n                dField.displayProperties.description.length > 0\n              ) {\n                _objectCopy[`${_hashType}Description`] =\n                  dField.displayProperties.description;\n              }\n\n              if (\n                dField.displayProperties.icon &&\n                dField.displayProperties.icon.length > 0\n              ) {\n                _objectCopy[`${_hashType}Icon`] = dField.displayProperties.icon;\n              }\n\n              if (\n                dField.progressDescription &&\n                dField.progressDescription.length > 0\n              ) {\n                _objectCopy[`${_hashType}ProgressDescription`] =\n                  dField.progressDescription;\n              }\n\n              if (typeof dField.inProgressValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}InProgressValueStyle`] =\n                  dField.inProgressValueStyle;\n              }\n\n              if (typeof dField.completedValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}CompletedValueStyle`] =\n                  dField.completedValueStyle;\n              }\n\n              if (typeof dField.itemType !== \"undefined\") {\n                _objectCopy[`${_hashType}ItemType`] = dField.itemType;\n              }\n\n              if (typeof dField.parentNodeHashes !== \"undefined\") {\n                _objectCopy[`parentNodeHashes`] = dField.parentNodeHashes.map(\n                  (item: any) => {\n                    return self.getPresentationNodeFromHash(item);\n                  }\n                );\n              }\n            }\n          }\n\n          _objectCopy[key] = _field;\n        }\n      }\n\n      return _objectCopy;\n    };\n\n    let self = this;\n\n    _log(\"Initialized\");\n    return this;\n  }\n}\n","import { render, createContext, Context } from \"preact\";\nimport { signal } from \"@preact/signals\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\nimport { D2AppState } from \"./classes/appState\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n    appState: Context<D2AppState>;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nfunction createAppState(): D2AppState {\n  const isDataLoaded = signal(false);\n  const isAuthenticated = signal(false);\n\n  return {\n    isDataLoaded,\n    isAuthenticated,\n  };\n}\n\nconst state = createAppState();\n\nwindow.appState = createContext(state);\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  state.isAuthenticated.value = await window.apiClient.checkIfAuthenticated();\n\n  render(<App />, document.getElementById(\"app\") as HTMLElement);\n});\n"],"names":["log","category","params","JSON","stringify","MainPage","props","isAuthenticated","location","href","_jsx","_Fragment","_jsxs","children","import","Date","getTime","Authenticated","apiClient","window","url","getCurrentUrl","code","URL","origin","searchParams","get","getToken","then","catch","err","Dashboard","value","isDataLoaded","Footer","className","getUTCFullYear","LoggingIn","eventEmitter","addEventListener","data","setLoadingText","text","loadingText","document","getElementById","innerText","checkIfAuthenticated","result","manifestVersion","checkManifestVersion","getLinkedProfiles","missingDefinitions","checkStoredDefinitions","length","loadDataFromStorage","getLastPlayedCharacter","setTimeout","emit","class","id","App","state","useContext","appState","Router","history","createHashHistory","Fragment","path","Destiny2Database","constructor","DBInstance","initializeDatabase","setItem","setItems","getItem","removeItem","setStorageItem","setStorageItems","getStorageItem","getStorageItems","removeStorageItem","Promise","resolve","reject","dbRequest","indexedDB","open","onupgradeneeded","event","db","oldVersion","newVersion","createObjectStore","autoIncrement","keyPath","createIndex","onsuccess","e","target","onerror","_setItem","storeName","key","request","self","transaction","objectStore","put","_getFilteredItems","filter","getAll","_getItem","defaultValue","_removeItem","delete","items","item","storageName","EventEmitter","eventListeners","eventName","eventHandler","push","handler","parse","ev","forEach","l","console","error","Destiny2ApiClient","apiToken","appName","refreshToken","loadDestinyContentData","getManifest","loadCommonSettings","getUserToken","getUserProfile","applicationName","cachedManifest","destinyDataDefinition","lastVersion","profile","linkedProfiles","getNamedDataObject","getPresentationNodeFromHash","mapHashesToDefinitionsInObject","_log","authGatewayUrl","destinyBaseUrl","destinyApiUrl","destinyDataTypes","profileComponents","None","Profiles","VendorReceipts","ProfileInventories","ProfileCurrencies","ProfileProgression","PlatformSilver","Characters","CharacterInventories","CharacterProgressions","CharacterRenderData","CharacterActivities","CharacterEquipment","ItemInstances","ItemObjectives","ItemPerks","ItemRenderData","ItemStats","ItemSockets","ItemTalentGrids","ItemCommonData","ItemPlugStates","ItemPlugObjectives","ItemReusablePlugs","Vendors","VendorCategories","VendorSales","Kiosks","CurrencyLookups","PresentationNodes","Collectibles","Records","Transitory","Metrics","StringVariables","callUrl","method","body","authorization","headers","fetch","refreshTokenIfExpired","now","handleTokenResponse","tokenResponse","access_token","refresh_token","tokenExpires","expires_in","refreshTokenExpires","refresh_expires_in","membership_id","_cachedManifest","_cachedManifestVersion","dataType","_cachedData","_profile","_linkedProfiles","tokenRequest","status","json","statusText","manifest","Response","version","updatedManifest","downloadMissingDefinitions","definitions","loadDestinyContentDataType","dataTypeWords","replace","split","join","contentTypeDownload","jsonWorldComponentContentPaths","en","loaded","res","ReadableStream","start","controller","reader","getReader","progressIndication","r","read","done","byteLength","Intl","NumberFormat","format","Math","round","Number","EPSILON","enqueue","close","contentTypeJson","lastManifestUpdate","_manifest","manifestRequest","ErrorStatus","responseText","settings","bnetMemberId","linkedProfile","profiles","membershipId","membershipType","interestingComponents","userProfile","forceRefresh","primaryMembership","sort","a","b","dateLastPlayed","characters","char","characterIds","_last","lastPlayedCharacter","characterInfo","characterProgression","characterProgressions","disabled","characterId","characterActivities","characterUninstancedItemComponents","objectives","characterInventory","characterInventories","characterEquipment","characterPlugSets","plugs","characterCollectibles","collectibles","characterRecords","characterStringVariables","profileProgression","metrics","itemComponents","records","profileRecords","profileInventory","profileCurrency","profileCurrencies","profilePlugSets","profileCollectibles","profileStringVariables","_lastPlayer","namedDataObject","statKey","Object","keys","stats","statValue","statHash","metricKey","metricHash","recordKey","recordHash","parentNodeHashes","DestinyRecordDefinition","i","lockable","inventoryitemItemType","hash","presentationNameArray","presentationNode","DestinyPresentationNodeDefinition","unshift","name","displayProperties","description","icon","_hash","subItems","object","_objectCopy","_type","_field","Array","isArray","x","arrItem","indexOf","_hashType","toLowerCase","find","definitionData","dField","setData","questLineName","progressDescription","inProgressValueStyle","completedValueStyle","itemType","map","createAppState","signal","createContext"],"mappings":"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"}