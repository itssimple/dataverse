{"version":3,"file":"index-2fe4ef20.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/pages/logging-in.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClasses/itemState.ts","../../src/scripts/destiny2Goals.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function MainPage(props: D2AppState) {\n  if (props.isAuthenticated) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }\n      >\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/logging-in\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function Dashboard(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  if (!props.isAuthenticated.value || !props.isDataLoaded.value) {\n    location.href = \"/\";\n    return <></>;\n  }\n\n  const userProfile = apiClient.profile.profile;\n\n  return <>Blep</>;\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      Â© 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Signal } from \"@preact/signals\";\nimport { log } from \"../scripts/log\";\nimport { D2AppState } from \"../classes/appState\";\n\nexport default function LoggingIn(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  const eventEmitter = window.eventEmitter;\n\n  eventEmitter.addEventListener(\"loading-text\", (data: any) => {\n    if (!!data) {\n      setLoadingText(data);\n    }\n  });\n\n  function setLoadingText(text: string) {\n    let loadingText = document.getElementById(\"loading-text\");\n    if (loadingText) {\n      loadingText.innerText = text;\n    }\n  }\n\n  // Check if the user has a valid token and/or is authenticated, if not, redirect to the main page so they can login\n  apiClient.checkIfAuthenticated().then(async (result) => {\n    if (!result) {\n      location.href = \"/\";\n      return;\n    }\n\n    log(\"LOGIN\", \"Authenticated, checking manifests\");\n\n    setLoadingText(\"Checking manifest ...\");\n    let manifestVersion = await apiClient.checkManifestVersion();\n\n    if (manifestVersion === null || manifestVersion === undefined) {\n      setLoadingText(\n        \"Something is wrong with Destiny 2 (or this app), please reload the page.\"\n      );\n      return;\n    }\n\n    log(\"LOGIN\", manifestVersion);\n\n    setLoadingText(\"Loading profile data\");\n\n    await apiClient.getLastPlayedCharacter();\n\n    setLoadingText(\"Checking for missing definitions\");\n\n    let missingDefinitions = await apiClient.checkStoredDefinitions(false);\n\n    if (missingDefinitions.length > 0) {\n      setLoadingText(\n        `Downloading ${missingDefinitions.length} missing definition(s)`\n      );\n      await apiClient.checkStoredDefinitions(true);\n    }\n\n    setLoadingText(\"Loading data...\");\n    await apiClient.loadDataFromStorage();\n\n    props.isDataLoaded.value = true;\n\n    setTimeout(() => {\n      setLoadingText(\"Opening application...\");\n      eventEmitter.emit(\"manifests-loaded\");\n\n      setTimeout(() => {\n        location.href = \"/#/dashboard\";\n      }, 1000);\n    }, 1000);\n  });\n\n  return (\n    <>\n      <span class=\"fui body\" id=\"loading-text\">\n        Logging in and loading data ...\n      </span>\n    </>\n  );\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\nimport LoggingIn from \"./pages/logging-in\";\nimport { useContext } from \"preact/hooks\";\n\nexport function App() {\n  const state = useContext(window.appState);\n  return (\n    <>\n      <header className=\"header subscreen\">Dataverse</header>\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage {...state} />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/logging-in\">\n            <LoggingIn {...state} />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard {...state} />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: any | null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","export enum ItemState {\n  None = 0,\n  Locked = 1,\n  Tracked = 2,\n  Masterwork = 4,\n  Crafted = 8,\n  HighlightedObjective = 16,\n}\n","import { BountyDataItem } from \"./apiClasses/bountyDataItem\";\nimport { CharacterRecordDataItem } from \"./apiClasses/characterRecordDataItem\";\nimport { ItemState } from \"./apiClasses/itemState\";\nimport { MilestoneDataItem } from \"./apiClasses/milestoneDataItem\";\nimport { QuestDataItem } from \"./apiClasses/questDataItem\";\nimport { SeasonRankData } from \"./apiClasses/seasonRankData\";\nimport { Destiny2ApiClient } from \"./apiClient\";\n\nexport class Destiny2Goals {\n  getSeasonRankData: (\n    namedObject: any,\n    seasonDefinition: any,\n    seasonPassDefinition: any\n  ) => SeasonRankData;\n  replaceStringVariables: (\n    string: string,\n    profileVariables: string[]\n  ) => string;\n  getMilestoneData: (namedObject: any) => MilestoneDataItem[];\n  getBounties: (namedObject: any) => BountyDataItem[];\n  getQuests: (namedObject: any) => QuestDataItem[];\n  getCharacterRecords: (namedObject: any) => CharacterRecordDataItem[];\n  destinyApiClient: any;\n\n  constructor(destiny2ApiClient: Destiny2ApiClient) {\n    /**\n     * @description Used for the base URL of content, like images and such.\n     */\n    const destinyBaseUrl = \"https://www.bungie.net\";\n\n    this.destinyApiClient = destiny2ApiClient;\n\n    this.getSeasonRankData = function (\n      namedObject,\n      seasonDefinition,\n      seasonPassDefinition\n    ): SeasonRankData {\n      let seasonPassData =\n        namedObject.characterProgression.progressions[\n          seasonDefinition.seasonPassProgressionHash\n        ];\n      let seasonPassProgressionData =\n        namedObject.characterProgression.progressions[\n          seasonPassDefinition.prestigeProgressionHash\n        ];\n\n      let seasonArtifactData =\n        this.destinyApiClient.destinyDataDefinition\n          .DestinyInventoryItemDefinition[seasonDefinition.artifactItemHash];\n\n      let seasonRank = seasonPassData.level;\n      let nextLevelAt = seasonPassData.nextLevelAt;\n      let progressToNextLevel = seasonPassData.progressToNextLevel;\n\n      if (seasonPassData.level == seasonPassData.levelCap) {\n        seasonRank += seasonPassProgressionData.level;\n        nextLevelAt += seasonPassProgressionData.nextLevelAt;\n        progressToNextLevel += seasonPassProgressionData.progressToNextLevel;\n      }\n\n      let seasonRankDataItem: SeasonRankData = {\n        name: `Season Rank ${seasonRank}`,\n        description: seasonDefinition.displayProperties.name,\n        icon: `${seasonArtifactData.displayProperties.icon}`,\n        startDate: seasonDefinition.startDate,\n        endDate: seasonDefinition.endDate,\n        nextLevelAt: nextLevelAt,\n        progressToNextLevel: progressToNextLevel,\n        type: \"seasonrank\",\n        order: -1,\n        inProgressValueStyle: 0,\n        completedValueStyle: 0,\n      };\n      return seasonRankDataItem;\n    };\n\n    this.replaceStringVariables = function (string, profileVariables): string {\n      if (!string || string.indexOf(\"{var:\") === -1) return string;\n      var matchRegex = /{var:(\\d+)}/g;\n\n      var allMatches = string.match(matchRegex);\n\n      let newString = string;\n\n      if (allMatches) {\n        for (var i = 0; i < allMatches.length; i++) {\n          var match = allMatches[i];\n          var _match = match.match(/\\d+/);\n          if (_match) {\n            var matchIndex: any = _match[0];\n            var matchString = profileVariables[matchIndex];\n\n            if (matchString) {\n              newString = newString.replace(match, matchString);\n            }\n          }\n        }\n      }\n\n      return newString;\n    };\n\n    this.getMilestoneData = function (namedObject): MilestoneDataItem[] {\n      let milestoneData: MilestoneDataItem[] = [];\n\n      let milestoneKeys = Object.keys(\n        namedObject.characterProgression.milestones\n      );\n\n      for (let milestoneKey of milestoneKeys) {\n        let milestone =\n          namedObject.characterProgression.milestones[milestoneKey];\n\n        let milestoneDataItem: MilestoneDataItem = {\n          name: this.replaceStringVariables(\n            milestone.milestoneName,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          description: this.replaceStringVariables(\n            milestone.milestoneDescription,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          order: milestone.order,\n          icon: milestone.milestoneIcon,\n          type: \"milestone\",\n          inProgressValueStyle: 0,\n          completedValueStyle: 0,\n        };\n\n        if (milestone.startDate) {\n          milestoneDataItem.startDate = milestone.startDate;\n        }\n\n        if (milestone.endDate) {\n          milestoneDataItem.endDate = milestone.endDate;\n        }\n\n        if (milestone.availableQuests && milestone.availableQuests.length > 0) {\n          for (let quest of milestone.availableQuests) {\n            if (quest.tracked) {\n              milestoneDataItem.tracked = true;\n            }\n            if (quest.status.started && !quest.status.completed) {\n              if (\n                quest.status.stepObjectives &&\n                quest.status.stepObjectives.length > 0\n              ) {\n                for (let step of quest.status.stepObjectives) {\n                  if (!step.complete) {\n                    if (typeof step.progress !== \"undefined\") {\n                      milestoneDataItem.progressToNextLevel = step.progress;\n                    }\n\n                    if (typeof step.completionValue !== \"undefined\") {\n                      milestoneDataItem.nextLevelAt = step.completionValue;\n                    }\n\n                    if (\n                      typeof step.objectiveInProgressValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.inProgressValueStyle =\n                        step.objectiveInProgressValueStyle;\n                    }\n\n                    if (\n                      typeof step.objectiveCompletedValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.completedValueStyle =\n                        step.objectiveCompletedValueStyle;\n                    }\n\n                    if (\n                      (milestoneDataItem.icon ?? \"\").length == 0 &&\n                      typeof step.activityIcon !== \"undefined\"\n                    ) {\n                      milestoneDataItem.icon = step.activityIcon;\n                    }\n\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (milestone.activities && milestone.activities.length > 0) {\n          for (let activity of milestone.activities) {\n            if (activity.challenges && activity.challenges.length > 0) {\n              for (let challenge of activity.challenges) {\n                if (!challenge.objective.complete) {\n                  if (typeof challenge.objective.progress !== \"undefined\") {\n                    milestoneDataItem.progressToNextLevel =\n                      challenge.objective.progress;\n                  }\n\n                  if (\n                    typeof challenge.objectiveInProgressValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.inProgressValueStyle =\n                      challenge.objectiveInProgressValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objectiveCompletedValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.completedValueStyle =\n                      challenge.objectiveCompletedValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objective.completionValue !== \"undefined\"\n                  ) {\n                    milestoneDataItem.nextLevelAt =\n                      challenge.objective.completionValue;\n                  }\n\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        }\n\n        milestoneData.push(milestoneDataItem);\n      }\n\n      return milestoneData;\n    };\n\n    const bountyItemType = 26;\n\n    this.getBounties = function (namedObject): BountyDataItem[] {\n      let bountyData: BountyDataItem[] = [];\n\n      var bountyItems = namedObject.characterInventory.filter(\n        (item: any) => item.inventoryitemItemType === bountyItemType\n      );\n\n      for (let bounty of bountyItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[bounty.itemInstanceId]\n            .objectives;\n\n        let incompleteTasks = itemObjectives.filter(\n          (obj: any) => !obj.complete\n        );\n\n        // If we don't have any tasks left to do, we'll ignore this bounty\n        if (incompleteTasks.length === 0) continue;\n\n        for (let objective of incompleteTasks) {\n          let bountyDataItem: BountyDataItem = {\n            name: this.replaceStringVariables(\n              bounty.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              bounty.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 500,\n            icon: bounty.inventoryitemIcon,\n            type: \"bounty\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked: (bounty.state & ItemState.Tracked) == ItemState.Tracked,\n            state: bounty.state,\n          };\n\n          if (typeof bounty.expirationDate !== \"undefined\") {\n            bountyDataItem.endDate = bounty.expirationDate;\n\n            // If the bounty is expired, we'll ignore it\n            if (\n              new Date(bounty.expirationDate).getTime() < new Date().getTime()\n            ) {\n              continue;\n            }\n          }\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            bountyDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              bountyDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              bountyDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              bountyDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${bountyDataItem.description}<br />\n              bountyDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            bountyData.push(bountyDataItem);\n          }\n        }\n      }\n\n      return bountyData;\n    };\n\n    const questBucketHash = 1345459588;\n\n    this.getQuests = function (namedObject): QuestDataItem[] {\n      let questData: QuestDataItem[] = [];\n\n      var questItems = namedObject.characterInventory.filter(\n        (item: any) =>\n          item.bucketHash === questBucketHash &&\n          [bountyItemType].filter((i) => i != item.inventoryitemItemType)\n            .length > 0\n      );\n\n      let instancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId !== \"undefined\"\n      );\n\n      let uninstancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId === \"undefined\"\n      );\n\n      for (let instanceQuest of instancedQuestItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[\n            instanceQuest.itemInstanceId\n          ];\n\n        if (itemObjectives) {\n          const _objectives = itemObjectives.objectives.filter(\n            (objective: any) => objective.visible && !objective.complete\n          );\n\n          for (let objective of _objectives) {\n            let questDataItem: QuestDataItem = {\n              name: this.replaceStringVariables(\n                instanceQuest.inventoryitemName,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              description: this.replaceStringVariables(\n                instanceQuest.inventoryitemDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              order: 1000,\n              icon: instanceQuest.inventoryitemIcon,\n              type: \"quest\",\n              inProgressValueStyle: 0,\n              completedValueStyle: 0,\n              tracked:\n                (instanceQuest.state & ItemState.Tracked) == ItemState.Tracked,\n              state: instanceQuest.state,\n            };\n\n            if (typeof objective.completionValue !== \"undefined\") {\n              questDataItem.nextLevelAt = objective.completionValue;\n\n              if (\n                typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n              ) {\n                questDataItem.inProgressValueStyle =\n                  objective.objectiveInProgressValueStyle;\n              }\n\n              if (\n                typeof objective.objectiveCompletedValueStyle !== \"undefined\"\n              ) {\n                questDataItem.completedValueStyle =\n                  objective.objectiveCompletedValueStyle;\n              }\n\n              if (typeof objective.progress !== \"undefined\") {\n                questDataItem.progressToNextLevel = objective.progress;\n              }\n\n              if (\n                typeof objective.objectiveProgressDescription !== \"undefined\"\n              ) {\n                // ${questDataItem.description}<br />\n                questDataItem.description = this.replaceStringVariables(\n                  objective.objectiveProgressDescription,\n                  namedObject.profileStringVariables.integerValuesByHash\n                );\n              }\n\n              questData.push(questDataItem);\n            }\n          }\n        }\n      }\n\n      for (let uninstancedQuest of uninstancedQuestItems) {\n        let questObjectives = (\n          namedObject.characterProgression.uninstancedItemObjectives[\n            uninstancedQuest.itemHash\n          ] ?? []\n        ).filter((objective: any) => objective.visible && !objective.complete);\n\n        for (let objective of questObjectives) {\n          let questDataItem: QuestDataItem = {\n            name: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 10000,\n            icon: uninstancedQuest.inventoryitemIcon,\n            type: \"quest\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked:\n              (uninstancedQuest.state & ItemState.Tracked) == ItemState.Tracked,\n            state: uninstancedQuest.state,\n          };\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            questDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              questDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              questDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              questDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${questDataItem.description}<br />\n              questDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            questData.push(questDataItem);\n          }\n        }\n      }\n\n      return questData;\n    };\n\n    this.getCharacterRecords = function (\n      namedObject\n    ): CharacterRecordDataItem[] {\n      let characterRecords: CharacterRecordDataItem[] = [];\n\n      let characterRecordKeys = Object.keys(\n        namedObject.characterRecords.records\n      );\n      for (let key of characterRecordKeys) {\n        let characterRecord = namedObject.characterRecords.records[key];\n        if (\n          typeof characterRecord.objectives === \"undefined\" ||\n          (characterRecord.recordName ?? \"\").length === 0\n        )\n          continue;\n\n        let recordObjectives = characterRecord.objectives.filter(\n          (objective: any) => objective.visible && !objective.complete\n        );\n\n        for (let objective of recordObjectives) {\n          let characterRecordData: CharacterRecordDataItem = {\n            name: characterRecord.recordName,\n            type: \"characterRecord\",\n            order: 100,\n            icon: characterRecord.recordIcon,\n            // ${characterRecord.recordDescription}<br />\n            description: `${objective.objectiveProgressDescription ?? \"\"}`,\n            progressToNextLevel: objective.progress,\n            nextLevelAt: objective.completionValue,\n            inProgressValueStyle: objective.objectiveInProgressValueStyle,\n            completedValueStyle: objective.objectiveCompletedValueStyle,\n            state: characterRecord.state,\n          };\n\n          characterRecords.push(characterRecordData);\n        }\n      }\n\n      return characterRecords;\n    };\n\n    return this;\n  }\n}\n","import { DestinyNamedObject } from \"./apiClasses/destinyNamedObject\";\nimport { GoalDataItem } from \"./apiClasses/goalDataItem\";\nimport { Destiny2Goals } from \"./destiny2Goals\";\nimport { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  checkManifestVersion: () => Promise<{\n    updatedManifest: boolean;\n    version: string | null;\n  } | null>;\n  checkStoredDefinitions: (\n    downloadMissingDefinitions?: boolean\n  ) => Promise<string[]>;\n  loadDestinyContentData: (definitions: string[]) => Promise<void>;\n  loadDataFromStorage: () => Promise<void>;\n  getManifest: () => Promise<{\n    Response: any;\n  } | null>;\n  loadCommonSettings: () => Promise<any>;\n  getUserToken: () => Promise<string | null>;\n  getLinkedProfiles: (forceRefresh?: boolean) => Promise<unknown>;\n  getUserProfile: (\n    membershipId: string,\n    membershipType: number\n  ) => Promise<unknown>;\n  getLastPlayedCharacter: (forceRefresh?: boolean) => Promise<any | null>;\n  getNamedDataObject: (\n    forceRefresh?: boolean\n  ) => Promise<DestinyNamedObject | null>;\n  getPresentationNodeFromHash: (hash: string) => any[];\n  mapHashesToDefinitionsInObject: (object: any) => any;\n  getTrackableData: (forceRefresh?: boolean) => Promise<GoalDataItem[] | null>;\n\n  apiToken: string;\n  applicationName: string;\n  cachedManifest: any;\n  destinyDataDefinition: { [key: string]: any };\n  lastVersion: string | null;\n  profile: any | null;\n  linkedProfiles: any | null;\n  trackedGoals: GoalDataItem[] | null;\n  goalApi: Destiny2Goals;\n\n  constructor(apiToken: string, appName: string) {\n    _log(\"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    const maxActivitiesPerFetch = 250;\n\n    /**\n     * @description The datatypes we are interested in.\n     */\n    const destinyDataTypes = [\n      \"DestinyActivityTypeDefinition\",\n      \"DestinyActivityDefinition\",\n      \"DestinyArtifactDefinition\",\n      \"DestinyChecklistDefinition\",\n      \"DestinyClassDefinition\",\n      \"DestinyDestinationDefinition\",\n      \"DestinyDamageTypeDefinition\",\n      \"DestinyFactionDefinition\",\n      \"DestinyGenderDefinition\",\n      \"DestinyItemCategoryDefinition\",\n      \"DestinyItemTierTypeDefinition\",\n      \"DestinyInventoryBucketDefinition\",\n      \"DestinyInventoryItemDefinition\",\n      \"DestinyMedalTierDefinition\",\n      \"DestinyMetricDefinition\",\n      \"DestinyMilestoneDefinition\",\n      \"DestinyObjectiveDefinition\",\n      \"DestinyPlaceDefinition\",\n      \"DestinyPresentationNodeDefinition\",\n      \"DestinyProgressionDefinition\",\n      \"DestinyRaceDefinition\",\n      \"DestinyRecordDefinition\",\n      \"DestinySeasonDefinition\",\n      \"DestinySeasonPassDefinition\",\n      \"DestinyStatDefinition\",\n      \"DestinyTraitDefinition\",\n    ];\n\n    const profileComponents = {\n      None: 0,\n      Profiles: 100,\n      VendorReceipts: 101,\n      ProfileInventories: 102,\n      ProfileCurrencies: 103,\n      ProfileProgression: 104,\n      PlatformSilver: 105,\n      Characters: 200,\n      CharacterInventories: 201,\n      CharacterProgressions: 202,\n      CharacterRenderData: 203,\n      CharacterActivities: 204,\n      CharacterEquipment: 205,\n      ItemInstances: 300,\n      ItemObjectives: 301,\n      ItemPerks: 302,\n      ItemRenderData: 303,\n      ItemStats: 304,\n      ItemSockets: 305,\n      ItemTalentGrids: 306,\n      ItemCommonData: 307,\n      ItemPlugStates: 308,\n      ItemPlugObjectives: 309,\n      ItemReusablePlugs: 310,\n      Vendors: 400,\n      VendorCategories: 401,\n      VendorSales: 402,\n      Kiosks: 500,\n      CurrencyLookups: 600,\n      PresentationNodes: 700,\n      Collectibles: 800,\n      Records: 900,\n      Transitory: 1000,\n      Metrics: 1100,\n      StringVariables: 1200,\n    };\n\n    const DestinyItemState = {\n      None: 0,\n      Locked: 1,\n      Tracked: 2,\n      Masterwork: 4,\n    };\n\n    this.lastVersion = null;\n    this.applicationName = appName;\n    this.apiToken = apiToken;\n    this.destinyDataDefinition = {};\n    this.trackedGoals = [];\n\n    function _log(...params: any[]) {\n      log(\"D2API\", params);\n    }\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      let headers: RequestInit[\"headers\"] = {};\n\n      if (body !== null || authorization !== null) {\n        headers[\"Content-Type\"] = \"application/json\";\n        headers[\"x-api-key\"] = self.apiToken;\n        if (authorization !== null) {\n          headers.authorization = `Bearer ${authorization}`;\n        }\n      }\n\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        _log(\"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        _log(\"Error handling token\", JSON.stringify(tokenResponse));\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.loadDataFromStorage = async () => {\n      _log(\"Loading data from storage\");\n\n      let _cachedManifest = await db.getItem(\"manifest\");\n      if (_cachedManifest !== null) {\n        self.cachedManifest = JSON.parse(_cachedManifest);\n      }\n\n      let _cachedManifestVersion = await db.getItem(\"manifestVersion\");\n      if (_cachedManifestVersion !== null) {\n        self.lastVersion = _cachedManifestVersion;\n      }\n\n      self.checkStoredDefinitions();\n\n      for (let dataType of destinyDataTypes) {\n        let _cachedData = await db.getItem(`destinyContent-${dataType}`);\n        if (_cachedData !== null) {\n          self.destinyDataDefinition[dataType] = JSON.parse(_cachedData);\n        }\n      }\n\n      let _profile = await db.getItem(\"destiny-profile\");\n      if (_profile !== null) {\n        self.profile = JSON.parse(_profile);\n      }\n\n      let _linkedProfiles = await db.getItem(\"destiny-linkedProfiles\");\n      if (_linkedProfiles !== null) {\n        self.linkedProfiles = JSON.parse(_linkedProfiles);\n      }\n\n      _log(\"Data loaded from storage\");\n      eventEmitter.emit(\"destiny-data-loaded\");\n    };\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        _log(\"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      _log(\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    this.checkManifestVersion = async () => {\n      _log(\"Checking manifest version\");\n      return new Promise(async function (resolve, reject) {\n        let manifest = await self.getManifest();\n\n        if (manifest == null) {\n          _log(\"Failed to fetch API\");\n          return null;\n        }\n\n        let lastVersion = (await db.getItem(\"manifestVersion\")) ?? \"null\";\n\n        if (manifest.Response.version !== lastVersion) {\n          /* Currently cached data is older than 60 minutes, so we clear it. */\n          await db.removeItem(\"lastManifestUpdate\");\n          await db.removeItem(\"manifest\");\n          await db.removeItem(\"manifestVersion\");\n\n          for (let dataType of destinyDataTypes) {\n            await db.removeItem(`destinyContent-${dataType}`);\n          }\n\n          self.cachedManifest = manifest.Response;\n\n          await db.setItem(\"manifestVersion\", manifest.Response.version);\n          await db.setItem(\"manifest\", JSON.stringify(self.cachedManifest));\n          await db.setItem(\"lastManifestUpdate\", Date.now());\n\n          resolve({ updatedManifest: true, version: self.lastVersion });\n          _log(\"Manifest updated\");\n          return;\n        }\n\n        self.cachedManifest = manifest.Response;\n\n        resolve({ updatedManifest: false, version: self.lastVersion });\n        _log(\"Manifest version is up to date\");\n      });\n    };\n\n    this.checkStoredDefinitions = async function (\n      downloadMissingDefinitions = true\n    ) {\n      let missingDefinitions: string[] = [];\n\n      for (let dataType of destinyDataTypes) {\n        let data = await db.getItem(`destinyContent-${dataType}`);\n        if (data === null) {\n          missingDefinitions.push(dataType);\n        }\n      }\n\n      if (missingDefinitions.length > 0 && downloadMissingDefinitions) {\n        for (let dataType of missingDefinitions) {\n          await db.removeItem(`destinyContent-${dataType}`);\n        }\n\n        await self.loadDestinyContentData(missingDefinitions);\n      }\n\n      return missingDefinitions;\n    };\n\n    this.loadDestinyContentData = async function (definitions: string[] = []) {\n      for (let dataType of definitions) {\n        await loadDestinyContentDataType(dataType);\n      }\n    };\n\n    async function loadDestinyContentDataType(dataType: string) {\n      let manifest = self.cachedManifest;\n\n      const dataTypeWords = dataType\n        .replace(\"Destiny\", \"\")\n        .split(/(?=[A-Z])/)\n        .join(\" \");\n\n      eventEmitter.emit(\"loading-text\", `Loading ${dataTypeWords}`);\n\n      const contentTypeDownload = await callUrl(\n        \"GET\",\n        `${destinyBaseUrl}${manifest.jsonWorldComponentContentPaths.en[dataType]}`\n      );\n\n      const contentLength = contentTypeDownload.headers.get(\"content-length\");\n\n      const total = parseInt(contentLength || \"0\", 10);\n      let loaded = 0;\n\n      const res = new Response(\n        new ReadableStream({\n          async start(controller) {\n            const reader = contentTypeDownload.body!.getReader();\n\n            let progressIndication = 0;\n            for (;;) {\n              var r = await reader!.read();\n              if (r!.done) {\n                break;\n              }\n              loaded += r!.value.byteLength;\n\n              progressIndication++;\n              if (progressIndication % 30 === 0) {\n                eventEmitter.emit(\n                  \"loading-text\",\n                  `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                    \"sv-SE\"\n                  ).format(\n                    Math.round(\n                      (loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON\n                    ) / 100\n                  )} MB)`\n                );\n              }\n              controller.enqueue(r!.value);\n            }\n\n            eventEmitter.emit(\n              \"loading-text\",\n              `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                \"sv-SE\"\n              ).format(\n                Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) /\n                  100\n              )} MB)`\n            );\n            controller.close();\n          },\n        })\n      );\n\n      if (contentTypeDownload.status !== 200) {\n        log(\"Manifest download error\", await res.json());\n        return;\n      }\n\n      const contentTypeJson = await res.json();\n\n      self.destinyDataDefinition[dataType] = contentTypeJson;\n      db.setItem(`destinyContent-${dataType}`, JSON.stringify(contentTypeJson));\n    }\n\n    this.getManifest = async function (): Promise<{\n      Response: any;\n    } | null> {\n      let lastManifestUpdate = await db.getItem(\"lastManifestUpdate\");\n      _log(\"Checking if manifest is cached\");\n\n      if (\n        lastManifestUpdate !== null &&\n        Date.now() - lastManifestUpdate < 60000 * 60\n      ) {\n        let _manifest = await db.getItem(\"manifest\");\n        if (_manifest !== null) {\n          _log(\"Manifest is cached\");\n          return { Response: JSON.parse(_manifest) };\n        }\n      }\n\n      let manifestRequest = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Destiny2/Manifest/`\n      );\n\n      if (manifestRequest.status === 200) {\n        let manifest = await manifestRequest.json();\n        if (manifest.ErrorStatus == \"Success\") {\n          db.setItem(\"lastManifestUpdate\", Date.now());\n          db.setItem(\"manifest\", JSON.stringify(manifest.Response));\n          _log(\"Manifest updated from API\");\n\n          return { Response: manifest.Response };\n        } else {\n          _log(\"Manifesterror\");\n          _log(manifest.Response);\n\n          return null;\n        }\n      } else {\n        let responseText = manifestRequest.json();\n        _log(\"Error when fetching Manifest\");\n        _log(responseText);\n\n        return null;\n      }\n    };\n\n    this.loadCommonSettings = async function () {\n      await refreshTokenIfExpired();\n\n      const settings = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Settings`,\n        null,\n        await this.getUserToken()\n      );\n      if (settings.status === 200) {\n        return await settings.json();\n      }\n\n      _log(\n        \"Error fetching common settings\",\n        settings.status,\n        settings.statusText\n      );\n      return null;\n    };\n\n    this.getUserToken = async function () {\n      return await db.getItem(\"destinyToken\");\n    };\n\n    this.getLinkedProfiles = async function (forceRefresh: boolean = false) {\n      if (forceRefresh) {\n        self.linkedProfiles = null;\n      }\n\n      if (self.linkedProfiles != null) {\n        return self.linkedProfiles;\n      }\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        var bnetMemberId = await db.getItem(\"destinyBungieMembershipId\");\n\n        let linkedProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/-1/Profile/${bnetMemberId}/LinkedProfiles/`,\n          null,\n          await this.getUserToken()\n        );\n\n        if (linkedProfile.status === 200) {\n          let profiles = await linkedProfile.json();\n\n          db.setItem(\n            \"destiny-linkedProfiles\",\n            JSON.stringify(profiles.Response)\n          );\n\n          self.linkedProfiles = profiles.Response;\n\n          resolve(profiles.Response);\n        } else {\n          self.refreshToken();\n          reject(linkedProfile);\n        }\n      });\n    };\n\n    this.getUserProfile = async function (\n      membershipId: string,\n      membershipType: number\n    ) {\n      let interestingComponents = [\n        profileComponents.Profiles,\n        profileComponents.ProfileInventories,\n        profileComponents.ProfileCurrencies,\n        profileComponents.ProfileProgression,\n        profileComponents.Characters,\n        profileComponents.CharacterInventories,\n        profileComponents.CharacterProgressions,\n        profileComponents.CharacterActivities,\n        profileComponents.CharacterEquipment,\n        profileComponents.ItemInstances,\n        profileComponents.ItemObjectives,\n        profileComponents.ItemSockets,\n        profileComponents.ItemTalentGrids,\n        profileComponents.ItemCommonData,\n        profileComponents.ItemPlugStates,\n        profileComponents.ItemPlugObjectives,\n        profileComponents.ItemReusablePlugs,\n        profileComponents.Metrics,\n        profileComponents.Records,\n        profileComponents.Collectibles,\n        profileComponents.StringVariables,\n      ];\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        let userProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/${membershipType}/Profile/${membershipId}/?components=${interestingComponents.join(\n            \",\"\n          )}`,\n          null,\n          await this.getUserToken()\n        );\n        if (userProfile.status === 200) {\n          let profile = await userProfile.json();\n\n          db.setItem(\"destiny-profile\", JSON.stringify(profile.Response));\n          self.profile = profile.Response;\n\n          resolve(profile.Response);\n        } else {\n          self.refreshToken();\n          reject(userProfile);\n        }\n      });\n    };\n\n    this.getLastPlayedCharacter = async function (forceRefresh = false) {\n      await refreshTokenIfExpired();\n\n      let _profile = self.profile;\n\n      if (forceRefresh) {\n        _profile = null;\n      }\n\n      if (self.linkedProfiles === null) {\n        return null;\n      }\n\n      await self.getLinkedProfiles(forceRefresh);\n\n      if (\n        self.linkedProfiles !== null &&\n        self.linkedProfiles.profiles !== null &&\n        self.linkedProfiles.profiles.length > 0\n      ) {\n        var primaryMembership = self.linkedProfiles.profiles.sort(\n          (a: any, b: any) => (a.dateLastPlayed > b.dateLastPlayed ? -1 : 1)\n        )[0];\n\n        _profile = await self.getUserProfile(\n          primaryMembership.membershipId,\n          primaryMembership.membershipType\n        );\n      }\n\n      let characters = [];\n\n      for (let char of _profile.profile.data.characterIds) {\n        characters.push(_profile.characters.data[char]);\n      }\n\n      let _last = characters.sort((a, b) =>\n        a.dateLastPlayed > b.dateLastPlayed ? -1 : 1\n      )[0];\n\n      let lastPlayedCharacter = {\n        characterInfo: _last,\n        characterProgression: !!!_profile.characterProgressions.disabled\n          ? _profile.characterProgressions.data[_last.characterId]\n          : {},\n        characterActivities: !!!_profile.characterActivities.disabled\n          ? _profile.characterActivities.data[_last.characterId]\n          : {},\n        characterUninstancedItemComponents:\n          _profile.characterUninstancedItemComponents[_last.characterId]\n            .objectives.data,\n        characterInventory:\n          _profile.characterInventories.data[_last.characterId].items,\n        characterEquipment:\n          _profile.characterEquipment.data[_last.characterId].items,\n        characterPlugSets: !!!_profile.characterPlugSets.disabled\n          ? _profile.characterPlugSets.data[_last.characterId].plugs\n          : {},\n        characterCollectibles:\n          _profile.characterCollectibles.data[_last.characterId].collectibles,\n        characterRecords: _profile.characterRecords.data[_last.characterId],\n        characterStringVariables:\n          _profile.characterStringVariables.data[_last.characterId],\n        profileProgression: _profile.profileProgression.data,\n        metrics: _profile.metrics.data.metrics,\n        itemComponents: _profile.itemComponents,\n        records: _profile.profileRecords.data,\n        profileInventory: _profile.profileInventory.data.items,\n        profileCurrency: _profile.profileCurrencies.data.items,\n        profilePlugSets: !!!_profile.profilePlugSets.disabled\n          ? _profile.profilePlugSets.data.plugs\n          : {},\n        profileCollectibles: _profile.profileCollectibles.data,\n        profile: _profile.profile.data,\n        profileStringVariables: _profile.profileStringVariables.data,\n      };\n\n      return lastPlayedCharacter;\n    };\n\n    this.getNamedDataObject = async function (\n      forceRefresh = false\n    ): Promise<DestinyNamedObject | null> {\n      let _lastPlayer = await self.getLastPlayedCharacter(forceRefresh);\n\n      if (_lastPlayer == null) {\n        return null;\n      }\n\n      let namedDataObject = {\n        ..._lastPlayer,\n      };\n\n      for (let statKey of Object.keys(namedDataObject.characterInfo.stats)) {\n        namedDataObject.characterInfo.stats[statKey] = {\n          statValue: namedDataObject.characterInfo.stats[statKey],\n          statHash: statKey,\n        };\n      }\n\n      for (let metricKey of Object.keys(namedDataObject.metrics)) {\n        namedDataObject.metrics[metricKey] = {\n          ...namedDataObject.metrics[metricKey],\n          metricHash: metricKey,\n        };\n      }\n\n      for (let recordKey of Object.keys(namedDataObject.records.records)) {\n        namedDataObject.records.records[recordKey] = {\n          ...namedDataObject.records.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      for (let recordKey of Object.keys(\n        namedDataObject.characterRecords.records\n      )) {\n        namedDataObject.characterRecords.records[recordKey] = {\n          ...namedDataObject.characterRecords.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      namedDataObject = self.mapHashesToDefinitionsInObject(namedDataObject);\n\n      const cacheBreaker = await db.getItem(\"destiny2-use-cachebreaker\", false);\n      if (cacheBreaker) {\n        const lockableItems = _lastPlayer.characterInventory.filter(\n          (i: any) => i.lockable && i.inventoryitemItemType == 3\n        );\n\n        if (lockableItems.length > 0) {\n          // await self.lockItem(\n          //   _lastPlayer.characterInfo.membershipType,\n          //   _lastPlayer.characterInfo.characterId,\n          //   lockableItems[0].itemInstanceId,\n          //   lockableItems[0].state & DestinyItemState.Locked\n          // );\n        }\n      }\n\n      eventEmitter.emit(\"destiny2-api-update\", namedDataObject);\n\n      return namedDataObject;\n    };\n\n    this.getPresentationNodeFromHash = function (hash: string) {\n      const presentationNameArray = [];\n\n      const presentationNode =\n        self.destinyDataDefinition.DestinyPresentationNodeDefinition[hash];\n      if (presentationNode) {\n        presentationNameArray.unshift({\n          name: presentationNode.displayProperties.name,\n          description: presentationNode.displayProperties.description,\n          icon: presentationNode.displayProperties.icon,\n          hash: hash,\n        });\n\n        if (presentationNode.parentNodeHashes) {\n          for (let _hash of presentationNode.parentNodeHashes) {\n            const subItems = self.getPresentationNodeFromHash(_hash);\n            for (let item of subItems) {\n              presentationNameArray.push(item);\n            }\n          }\n        }\n      }\n\n      return presentationNameArray;\n    };\n\n    this.mapHashesToDefinitionsInObject = function (object: any) {\n      let _objectCopy = { ...object };\n\n      let keys = Object.keys(_objectCopy);\n      for (let key of keys) {\n        let _type = typeof _objectCopy[key];\n        let _field = _objectCopy[key];\n\n        if (Array.isArray(_field)) {\n          for (let x = 0; x < _field.length; x++) {\n            let arrItem = _field[x];\n            if (typeof arrItem === \"object\") {\n              _field[x] = self.mapHashesToDefinitionsInObject(arrItem);\n            } else {\n              _field[x] = arrItem;\n            }\n          }\n          _objectCopy[key] = _field;\n        } else if (_type === \"object\" && _field !== null) {\n          _objectCopy[key] = self.mapHashesToDefinitionsInObject(\n            _objectCopy[key]\n          );\n        } else {\n          if (key.indexOf(\"Hash\") > -1 && !Array.isArray(_field)) {\n            let _hashType = key\n              .split(\"Hash\")[0]\n              .replace(\"current\", \"\")\n              .toLowerCase();\n\n            switch (_hashType) {\n              case \"item\":\n              case \"plugitem\":\n                _hashType = \"inventoryitem\";\n                break;\n            }\n\n            let dataType = destinyDataTypes.find(\n              (i) =>\n                i.toLowerCase() == `Destiny${_hashType}Definition`.toLowerCase()\n            );\n            let definitionData = self.destinyDataDefinition[dataType!];\n            if (\n              definitionData &&\n              definitionData[_field] &&\n              definitionData[_field].displayProperties\n            ) {\n              const dField = definitionData[_field];\n              if (\n                dField.displayProperties.name &&\n                dField.displayProperties.name.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.displayProperties.name;\n              } else if (\n                dField.setData &&\n                dField.setData.questLineName &&\n                dField.setData.questLineName.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.setData.questLineName;\n              }\n\n              if (\n                dField.displayProperties.description &&\n                dField.displayProperties.description.length > 0\n              ) {\n                _objectCopy[`${_hashType}Description`] =\n                  dField.displayProperties.description;\n              }\n\n              if (\n                dField.displayProperties.icon &&\n                dField.displayProperties.icon.length > 0\n              ) {\n                _objectCopy[`${_hashType}Icon`] = dField.displayProperties.icon;\n              }\n\n              if (\n                dField.progressDescription &&\n                dField.progressDescription.length > 0\n              ) {\n                _objectCopy[`${_hashType}ProgressDescription`] =\n                  dField.progressDescription;\n              }\n\n              if (typeof dField.inProgressValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}InProgressValueStyle`] =\n                  dField.inProgressValueStyle;\n              }\n\n              if (typeof dField.completedValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}CompletedValueStyle`] =\n                  dField.completedValueStyle;\n              }\n\n              if (typeof dField.itemType !== \"undefined\") {\n                _objectCopy[`${_hashType}ItemType`] = dField.itemType;\n              }\n\n              if (typeof dField.parentNodeHashes !== \"undefined\") {\n                _objectCopy[`parentNodeHashes`] = dField.parentNodeHashes.map(\n                  (item: any) => {\n                    return self.getPresentationNodeFromHash(item);\n                  }\n                );\n              }\n            }\n          }\n\n          _objectCopy[key] = _field;\n        }\n      }\n\n      return _objectCopy;\n    };\n\n    this.getTrackableData = async function (\n      forceRefresh = false\n    ): Promise<GoalDataItem[] | null> {\n      let namedObject = await self.getNamedDataObject(forceRefresh);\n\n      if (namedObject == null) {\n        return null;\n      }\n\n      let seasonDefinition =\n        self.destinyDataDefinition.DestinySeasonDefinition[\n          namedObject.profile.currentSeasonHash\n        ];\n      let seasonPassDefinition =\n        self.destinyDataDefinition.DestinySeasonPassDefinition[\n          seasonDefinition.seasonPassHash\n        ];\n\n      let trackableDataItems: GoalDataItem[] = [];\n\n      let milestoneData = self.goalApi.getMilestoneData(namedObject);\n      for (let milestone of milestoneData) {\n        trackableDataItems.push(milestone);\n      }\n\n      let bountyData = self.goalApi.getBounties(namedObject);\n      for (let bounty of bountyData) {\n        trackableDataItems.push(bounty);\n      }\n\n      let questData = self.goalApi.getQuests(namedObject);\n      for (let quest of questData) {\n        trackableDataItems.push(quest);\n      }\n\n      let characterRecords = self.goalApi.getCharacterRecords(namedObject);\n\n      for (let characterRecord of characterRecords) {\n        trackableDataItems.push(characterRecord);\n      }\n\n      function sortTrackableItems(a: any, b: any) {\n        if (\n          typeof a.nextLevelAt !== \"undefined\" &&\n          typeof b.nextLevelAt !== \"undefined\"\n        ) {\n          let aProgress = (a.progressToNextLevel / a.nextLevelAt) * 100;\n          let bProgress = (b.progressToNextLevel / b.nextLevelAt) * 100;\n\n          return aProgress < bProgress ? 1 : -1;\n        }\n\n        if (typeof a.endDate !== \"undefined\") {\n          return typeof b.endDate === \"undefined\" || a.endDate < b.endDate\n            ? -1\n            : 1;\n        }\n\n        return a.order < b.order ? 1 : -1;\n      }\n\n      const trackedItems = trackableDataItems\n        .filter((i) => i.tracked)\n        .sort(sortTrackableItems);\n\n      const itemsWithExpiration = trackableDataItems\n        .filter((i) => i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n      const itemsWithoutExpiration = trackableDataItems\n        .filter((i) => !i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n\n      trackableDataItems = [\n        ...trackedItems,\n        ...itemsWithExpiration,\n        ...itemsWithoutExpiration,\n      ];\n\n      trackableDataItems.unshift(\n        self.goalApi.getSeasonRankData(\n          namedObject,\n          seasonDefinition,\n          seasonPassDefinition\n        )\n      );\n\n      self.trackedGoals = trackableDataItems;\n      eventEmitter.emit(\"goal-list-update\", trackableDataItems);\n\n      return trackableDataItems;\n    };\n\n    let self = this;\n\n    this.goalApi = new Destiny2Goals(this);\n\n    _log(\"Initialized\");\n    return this;\n  }\n}\n","import { render, createContext, Context } from \"preact\";\nimport { signal } from \"@preact/signals\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\nimport { D2AppState } from \"./classes/appState\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n    appState: Context<D2AppState>;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nfunction createAppState(): D2AppState {\n  const isDataLoaded = signal(false);\n  const isAuthenticated = signal(false);\n\n  return {\n    isDataLoaded,\n    isAuthenticated,\n  };\n}\n\nconst state = createAppState();\n\nwindow.appState = createContext(state);\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  state.isAuthenticated.value = await window.apiClient.checkIfAuthenticated();\n\n  render(<App />, document.getElementById(\"app\") as HTMLElement);\n});\n"],"names":["log","category","params","JSON","stringify","MainPage","props","isAuthenticated","location","href","_jsx","_Fragment","_jsxs","children","import","Date","getTime","Authenticated","apiClient","window","url","getCurrentUrl","code","URL","origin","searchParams","get","getToken","then","catch","err","Dashboard","value","isDataLoaded","profile","Footer","className","getUTCFullYear","LoggingIn","eventEmitter","addEventListener","data","setLoadingText","text","loadingText","document","getElementById","innerText","checkIfAuthenticated","result","manifestVersion","checkManifestVersion","getLastPlayedCharacter","missingDefinitions","checkStoredDefinitions","length","loadDataFromStorage","setTimeout","emit","class","id","App","state","useContext","appState","Router","history","createHashHistory","Fragment","path","Destiny2Database","constructor","DBInstance","initializeDatabase","setItem","setItems","getItem","removeItem","setStorageItem","setStorageItems","getStorageItem","getStorageItems","removeStorageItem","Promise","resolve","reject","dbRequest","indexedDB","open","onupgradeneeded","event","db","oldVersion","newVersion","createObjectStore","autoIncrement","keyPath","createIndex","onsuccess","e","target","onerror","_setItem","storeName","key","request","self","transaction","objectStore","put","_getFilteredItems","filter","getAll","_getItem","defaultValue","_removeItem","delete","items","item","storageName","EventEmitter","eventListeners","eventName","eventHandler","push","handler","parse","ev","forEach","l","console","error","ItemState","None","Locked","Tracked","Masterwork","Crafted","HighlightedObjective","Destiny2Goals","destiny2ApiClient","getSeasonRankData","replaceStringVariables","getMilestoneData","getBounties","getQuests","getCharacterRecords","destinyApiClient","namedObject","seasonDefinition","seasonPassDefinition","seasonPassData","characterProgression","progressions","seasonPassProgressionHash","seasonPassProgressionData","prestigeProgressionHash","seasonArtifactData","destinyDataDefinition","DestinyInventoryItemDefinition","artifactItemHash","seasonRank","level","nextLevelAt","progressToNextLevel","levelCap","name","description","displayProperties","icon","startDate","endDate","type","order","inProgressValueStyle","completedValueStyle","seasonRankDataItem","string","profileVariables","indexOf","matchRegex","allMatches","match","newString","i","_match","matchIndex","matchString","replace","milestoneData","milestoneKeys","Object","keys","milestones","milestoneKey","milestone","milestoneDataItem","milestoneName","profileStringVariables","integerValuesByHash","milestoneDescription","milestoneIcon","availableQuests","quest","tracked","status","started","completed","stepObjectives","step","complete","progress","completionValue","objectiveInProgressValueStyle","objectiveCompletedValueStyle","activityIcon","activities","activity","challenges","challenge","objective","bountyItemType","bountyData","bountyItems","characterInventory","inventoryitemItemType","bounty","incompleteTasks","itemComponents","objectives","itemInstanceId","obj","bountyDataItem","inventoryitemName","inventoryitemDescription","inventoryitemIcon","expirationDate","objectiveProgressDescription","questBucketHash","questData","questItems","bucketHash","instancedQuestItems","uninstancedQuestItems","instanceQuest","itemObjectives","_objectives","visible","questDataItem","uninstancedQuest","questObjectives","uninstancedItemObjectives","itemHash","characterRecords","characterRecordKeys","records","characterRecord","recordName","recordObjectives","characterRecordData","recordIcon","Destiny2ApiClient","apiToken","appName","refreshToken","loadDestinyContentData","getManifest","loadCommonSettings","getUserToken","getLinkedProfiles","getUserProfile","getNamedDataObject","getPresentationNodeFromHash","mapHashesToDefinitionsInObject","getTrackableData","applicationName","cachedManifest","lastVersion","linkedProfiles","trackedGoals","goalApi","_log","authGatewayUrl","destinyBaseUrl","destinyApiUrl","destinyDataTypes","profileComponents","Profiles","VendorReceipts","ProfileInventories","ProfileCurrencies","ProfileProgression","PlatformSilver","Characters","CharacterInventories","CharacterProgressions","CharacterRenderData","CharacterActivities","CharacterEquipment","ItemInstances","ItemObjectives","ItemPerks","ItemRenderData","ItemStats","ItemSockets","ItemTalentGrids","ItemCommonData","ItemPlugStates","ItemPlugObjectives","ItemReusablePlugs","Vendors","VendorCategories","VendorSales","Kiosks","CurrencyLookups","PresentationNodes","Collectibles","Records","Transitory","Metrics","StringVariables","callUrl","method","body","authorization","headers","fetch","refreshTokenIfExpired","now","handleTokenResponse","tokenResponse","access_token","refresh_token","tokenExpires","expires_in","refreshTokenExpires","refresh_expires_in","membership_id","_cachedManifest","_cachedManifestVersion","dataType","_cachedData","_profile","_linkedProfiles","tokenRequest","json","statusText","manifest","Response","version","updatedManifest","downloadMissingDefinitions","definitions","loadDestinyContentDataType","dataTypeWords","split","join","contentTypeDownload","jsonWorldComponentContentPaths","en","loaded","res","ReadableStream","start","controller","reader","getReader","progressIndication","r","read","done","byteLength","Intl","NumberFormat","format","Math","round","Number","EPSILON","enqueue","close","contentTypeJson","lastManifestUpdate","_manifest","manifestRequest","ErrorStatus","responseText","settings","forceRefresh","bnetMemberId","linkedProfile","profiles","membershipId","membershipType","interestingComponents","userProfile","primaryMembership","sort","a","b","dateLastPlayed","characters","char","characterIds","_last","lastPlayedCharacter","characterInfo","characterProgressions","disabled","characterId","characterActivities","characterUninstancedItemComponents","characterInventories","characterEquipment","characterPlugSets","plugs","characterCollectibles","collectibles","characterStringVariables","profileProgression","metrics","profileRecords","profileInventory","profileCurrency","profileCurrencies","profilePlugSets","profileCollectibles","_lastPlayer","namedDataObject","statKey","stats","statValue","statHash","metricKey","metricHash","recordKey","recordHash","parentNodeHashes","DestinyRecordDefinition","lockable","hash","presentationNameArray","presentationNode","DestinyPresentationNodeDefinition","unshift","_hash","subItems","object","_objectCopy","_type","_field","Array","isArray","x","arrItem","_hashType","toLowerCase","find","definitionData","dField","setData","questLineName","progressDescription","itemType","map","DestinySeasonDefinition","currentSeasonHash","DestinySeasonPassDefinition","seasonPassHash","trackableDataItems","sortTrackableItems","aProgress","bProgress","trackedItems","itemsWithExpiration","itemsWithoutExpiration","createAppState","signal","createContext"],"mappings":"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"}