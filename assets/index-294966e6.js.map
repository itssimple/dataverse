{"version":3,"file":"index-294966e6.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/pages/logging-in.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function MainPage(props: D2AppState) {\n  if (props.isAuthenticated) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }\n      >\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/logging-in\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function Dashboard(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  if (!props.isAuthenticated.value) {\n    location.href = \"/\";\n    return <></>;\n  }\n\n  if (!props.isDataLoaded.value) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return <>Blep</>;\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      Â© 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Signal } from \"@preact/signals\";\nimport { log } from \"../scripts/log\";\nimport { D2AppState } from \"../classes/appState\";\n\nexport default function LoggingIn(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  const eventEmitter = window.eventEmitter;\n\n  eventEmitter.addEventListener(\"loading-text\", (data: any) => {\n    if (!!data) {\n      setLoadingText(data);\n    }\n  });\n\n  function setLoadingText(text: string) {\n    let loadingText = document.getElementById(\"loading-text\");\n    if (loadingText) {\n      loadingText.innerText = text;\n    }\n  }\n\n  // Check if the user has a valid token and/or is authenticated, if not, redirect to the main page so they can login\n  apiClient.checkIfAuthenticated().then(async (result) => {\n    if (!result) {\n      location.href = \"/\";\n      return;\n    }\n\n    log(\"LOGIN\", \"Authenticated, checking manifests\");\n\n    setLoadingText(\"Checking manifest ...\");\n    let manifestVersion = await apiClient.checkManifestVersion();\n\n    if (manifestVersion === null || manifestVersion === undefined) {\n      setLoadingText(\n        \"Something is wrong with Destiny 2, please reload the page.\"\n      );\n      return;\n    }\n\n    log(\"LOGIN\", manifestVersion);\n\n    setLoadingText(\"Loading profile data\");\n\n    await apiClient.getLinkedProfiles();\n\n    setLoadingText(\"Checking for missing definitions\");\n\n    let missingDefinitions = await apiClient.checkStoredDefinitions(false);\n\n    if (missingDefinitions.length > 0) {\n      setLoadingText(\n        `Downloading ${missingDefinitions.length} missing definition(s)`\n      );\n      await apiClient.checkStoredDefinitions(true);\n    }\n\n    setLoadingText(\"Loading data...\");\n    await apiClient.loadDataFromStorage();\n    setLoadingText(\"Loading data... done\");\n\n    props.isDataLoaded.value = true;\n\n    setTimeout(() => {\n      setLoadingText(\"Opening application...\");\n      eventEmitter.emit(\"manifests-loaded\");\n\n      setTimeout(() => {\n        location.href = \"/#/dashboard\";\n      }, 1000);\n    }, 1000);\n  });\n\n  return (\n    <>\n      <span class=\"fui body\" id=\"loading-text\">\n        Logging in and loading data ...\n      </span>\n    </>\n  );\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\nimport LoggingIn from \"./pages/logging-in\";\nimport { useContext } from \"preact/hooks\";\n\nexport function App() {\n  const state = useContext(window.appState);\n  return (\n    <>\n      <header className=\"header subscreen\">Dataverse</header>\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage {...state} />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/logging-in\">\n            <LoggingIn {...state} />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard {...state} />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","import { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  checkManifestVersion: () => Promise<{\n    updatedManifest: boolean;\n    version: string | null;\n  } | null>;\n  checkStoredDefinitions: (\n    downloadMissingDefinitions?: boolean\n  ) => Promise<string[]>;\n  loadDestinyContentData: (definitions: string[]) => Promise<void>;\n  loadDataFromStorage: () => Promise<void>;\n  getManifest: () => Promise<{\n    Response: any;\n  } | null>;\n  loadCommonSettings: () => Promise<any>;\n  getUserToken: () => Promise<string | null>;\n  getLinkedProfiles: () => Promise<unknown>;\n\n  apiToken: string;\n  applicationName: string;\n  cachedManifest: any;\n  destinyDataDefinition: { [key: string]: any };\n  lastVersion: string | null;\n  profile: any | null;\n  linkedProfiles: any | null;\n  \n  constructor(apiToken: string, appName: string) {\n    _log(\"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    const maxActivitiesPerFetch = 250;\n\n    /**\n     * @description The datatypes we are interested in.\n     */\n    const destinyDataTypes = [\n      \"DestinyActivityTypeDefinition\",\n      \"DestinyActivityDefinition\",\n      \"DestinyArtifactDefinition\",\n      \"DestinyChecklistDefinition\",\n      \"DestinyClassDefinition\",\n      \"DestinyDestinationDefinition\",\n      \"DestinyDamageTypeDefinition\",\n      \"DestinyFactionDefinition\",\n      \"DestinyGenderDefinition\",\n      \"DestinyItemCategoryDefinition\",\n      \"DestinyItemTierTypeDefinition\",\n      \"DestinyInventoryBucketDefinition\",\n      \"DestinyInventoryItemDefinition\",\n      \"DestinyMedalTierDefinition\",\n      \"DestinyMetricDefinition\",\n      \"DestinyMilestoneDefinition\",\n      \"DestinyObjectiveDefinition\",\n      \"DestinyPlaceDefinition\",\n      \"DestinyPresentationNodeDefinition\",\n      \"DestinyProgressionDefinition\",\n      \"DestinyRaceDefinition\",\n      \"DestinyRecordDefinition\",\n      \"DestinySeasonDefinition\",\n      \"DestinySeasonPassDefinition\",\n      \"DestinyStatDefinition\",\n      \"DestinyTraitDefinition\",\n    ];\n\n    const DestinyItemState = {\n      None: 0,\n      Locked: 1,\n      Tracked: 2,\n      Masterwork: 4,\n    };\n\n    this.lastVersion = null;\n\n    this.applicationName = appName;\n\n    this.apiToken = apiToken;\n\n    this.destinyDataDefinition = {};\n\n    function _log(...params: any[]) {\n      log(\"D2API\", params);\n    }\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      let headers: RequestInit[\"headers\"] = {};\n\n      if (body !== null || authorization !== null) {\n        headers[\"Content-Type\"] = \"application/json\";\n        headers[\"x-api-key\"] = self.apiToken;\n        if (authorization !== null) {\n          headers.authorization = `Bearer ${authorization}`;\n        }\n      }\n\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        _log(\"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        _log(\"Error handling token\", JSON.stringify(tokenResponse));\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.loadDataFromStorage = async () => {\n      _log(\"Loading data from storage\");\n\n      let _cachedManifest = await db.getItem(\"manifest\");\n      if (_cachedManifest !== null) {\n        self.cachedManifest = JSON.parse(_cachedManifest);\n      }\n\n      let _cachedManifestVersion = await db.getItem(\"manifestVersion\");\n      if (_cachedManifestVersion !== null) {\n        self.lastVersion = _cachedManifestVersion;\n      }\n\n      self.checkStoredDefinitions();\n\n      for (let dataType of destinyDataTypes) {\n        let _cachedData = await db.getItem(`destinyContent-${dataType}`);\n        if (_cachedData !== null) {\n          self.destinyDataDefinition[dataType] = JSON.parse(_cachedData);\n        }\n      }\n\n      let _profile = await db.getItem(\"destiny-profile\");\n      if (_profile !== null) {\n        self.profile = JSON.parse(_profile);\n      }\n\n      let _linkedProfiles = await db.getItem(\"destiny-linkedProfiles\");\n      if (_linkedProfiles !== null) {\n        self.linkedProfiles = JSON.parse(_linkedProfiles);\n      }\n\n      _log(\"Data loaded from storage\");\n      eventEmitter.emit(\"destiny-data-loaded\");\n    };\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        _log(\"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      _log(\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    this.checkManifestVersion = async () => {\n      _log(\"Checking manifest version\");\n      return new Promise(async function (resolve, reject) {\n        let manifest = await self.getManifest();\n\n        if (manifest == null) {\n          _log(\"Failed to fetch API\");\n          return null;\n        }\n\n        let lastVersion = (await db.getItem(\"manifestVersion\")) ?? \"null\";\n\n        console.log(manifest, lastVersion);\n        if (manifest.Response.version !== lastVersion) {\n          /* Currently cached data is older than 60 minutes, so we clear it. */\n          await db.removeItem(\"lastManifestUpdate\");\n          await db.removeItem(\"manifest\");\n          await db.removeItem(\"manifestVersion\");\n\n          for (let dataType of destinyDataTypes) {\n            await db.removeItem(`destinyContent-${dataType}`);\n          }\n\n          self.cachedManifest = manifest.Response;\n\n          await db.setItem(\"manifestVersion\", manifest.Response.version);\n          await db.setItem(\"manifest\", JSON.stringify(self.cachedManifest));\n          await db.setItem(\"lastManifestUpdate\", Date.now());\n\n          resolve({ updatedManifest: true, version: self.lastVersion });\n          _log(\"Manifest updated\");\n          return;\n        }\n\n        self.cachedManifest = manifest.Response;\n\n        resolve({ updatedManifest: false, version: self.lastVersion });\n        _log(\"Manifest version is up to date\");\n      });\n    };\n\n    this.checkStoredDefinitions = async function (\n      downloadMissingDefinitions = true\n    ) {\n      let missingDefinitions: string[] = [];\n\n      for (let dataType of destinyDataTypes) {\n        let data = await db.getItem(`destinyContent-${dataType}`);\n        if (data === null) {\n          missingDefinitions.push(dataType);\n        }\n      }\n\n      if (missingDefinitions.length > 0 && downloadMissingDefinitions) {\n        for (let dataType of missingDefinitions) {\n          await db.removeItem(`destinyContent-${dataType}`);\n        }\n\n        await self.loadDestinyContentData(missingDefinitions);\n      }\n\n      return missingDefinitions;\n    };\n\n    this.loadDestinyContentData = async function (definitions: string[] = []) {\n      for (let dataType of definitions) {\n        await loadDestinyContentDataType(dataType);\n      }\n    };\n\n    async function loadDestinyContentDataType(dataType: string) {\n      let manifest = self.cachedManifest;\n\n      const dataTypeWords = dataType\n        .replace(\"Destiny\", \"\")\n        .split(/(?=[A-Z])/)\n        .join(\" \");\n\n      eventEmitter.emit(\"loading-text\", `Loading ${dataTypeWords}`);\n\n      const contentTypeDownload = await callUrl(\n        \"GET\",\n        `${destinyBaseUrl}${manifest.jsonWorldComponentContentPaths.en[dataType]}`\n      );\n\n      const contentLength = contentTypeDownload.headers.get(\"content-length\");\n\n      const total = parseInt(contentLength || \"0\", 10);\n      let loaded = 0;\n\n      const res = new Response(\n        new ReadableStream({\n          async start(controller) {\n            const reader = contentTypeDownload.body!.getReader();\n\n            let progressIndication = 0;\n            for (;;) {\n              var r = await reader!.read();\n              if (r!.done) {\n                break;\n              }\n              loaded += r!.value.byteLength;\n\n              progressIndication++;\n              if(progressIndication % 30 === 0) {\n                eventEmitter.emit(\n                  \"loading-text\",\n                  `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                    \"sv-SE\"\n                  ).format(Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) / 100)} MB)`\n                );\n              }\n              controller.enqueue(r!.value);\n            }\n\n            eventEmitter.emit(\n              \"loading-text\",\n              `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                \"sv-SE\"\n              ).format(Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) / 100)} MB)`\n            );\n            controller.close();\n          },\n        })\n      );\n\n      if (contentTypeDownload.status !== 200) {\n        log(\"Manifest download error\", await res.json());\n        return;\n      }\n\n      const contentTypeJson = await res.json();\n\n      self.destinyDataDefinition[dataType] = contentTypeJson;\n      db.setItem(`destinyContent-${dataType}`, JSON.stringify(contentTypeJson));\n    }\n\n    this.getManifest = async function (): Promise<{\n      Response: any;\n    } | null> {\n      let lastManifestUpdate = await db.getItem(\"lastManifestUpdate\");\n      _log(\"Checking if manifest is cached\");\n\n      if (\n        lastManifestUpdate !== null &&\n        Date.now() - lastManifestUpdate < 60000 * 60\n      ) {\n        let _manifest = await db.getItem(\"manifest\");\n        if (_manifest !== null) {\n          _log(\"Manifest is cached\");\n          return { Response: JSON.parse(_manifest) };\n        }\n      }\n\n      let manifestRequest = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Destiny2/Manifest/`\n      );\n\n      if (manifestRequest.status === 200) {\n        let manifest = await manifestRequest.json();\n        if (manifest.ErrorStatus == \"Success\") {\n          db.setItem(\"lastManifestUpdate\", Date.now());\n          db.setItem(\"manifest\", JSON.stringify(manifest.Response));\n          _log(\"Manifest updated from API\");\n\n          return { Response: manifest.Response };\n        } else {\n          _log(\"Manifesterror\");\n          _log(manifest.Response);\n\n          return null;\n        }\n      } else {\n        let responseText = manifestRequest.json();\n        _log(\"Error when fetching Manifest\");\n        _log(responseText);\n\n        return null;\n      }\n    };\n\n    this.loadCommonSettings = async function () {\n      await refreshTokenIfExpired();\n\n      const settings = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Settings`,\n        null,\n        await this.getUserToken()\n      );\n      if (settings.status === 200) {\n        return await settings.json();\n      }\n\n      _log(\n        \"Error fetching common settings\",\n        settings.status,\n        settings.statusText\n      );\n      return null;\n    };\n\n    this.getUserToken = async function () {\n      return await db.getItem(\"destinyToken\");\n    };\n\n    this.getLinkedProfiles = async function () {\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        var bnetMemberId = await db.getItem(\"destinyBungieMembershipId\");\n\n        let linkedProfile = await callUrl('GET',\n          `${destinyApiUrl}/Destiny2/-1/Profile/${bnetMemberId}/LinkedProfiles/`,\n          null,\n          await this.getUserToken()\n        );\n        \n        if (linkedProfile.status === 200) {\n          let profiles = await linkedProfile.json();\n\n          db.setItem(\"destiny-linkedProfiles\", JSON.stringify(profiles.Response));\n\n          self.linkedProfiles = profiles.Response;\n\n          resolve(profiles.Response);\n        } else {\n          self.refreshToken();\n          reject(linkedProfile);\n        }\n      });\n    };\n\n    let self = this;\n\n    _log(\"Initialized\");\n    return this;\n  }\n}\n","import { render, createContext, Context } from \"preact\";\nimport { signal } from \"@preact/signals\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\nimport { D2AppState } from \"./classes/appState\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n    appState: Context<D2AppState>;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nfunction createAppState(): D2AppState {\n  const isDataLoaded = signal(false);\n  const isAuthenticated = signal(false);\n\n  return {\n    isDataLoaded,\n    isAuthenticated,\n  };\n}\n\nconst state = createAppState();\n\nwindow.appState = createContext(state);\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  state.isAuthenticated.value = await window.apiClient.checkIfAuthenticated();\n\n  render(<App />, document.getElementById(\"app\") as HTMLElement);\n});\n"],"names":["log","category","params","JSON","stringify","MainPage","props","isAuthenticated","location","href","_jsx","_Fragment","_jsxs","children","import","Date","getTime","Authenticated","apiClient","window","url","getCurrentUrl","code","URL","origin","searchParams","get","getToken","then","catch","err","Dashboard","value","isDataLoaded","Footer","className","getUTCFullYear","LoggingIn","eventEmitter","addEventListener","data","setLoadingText","text","loadingText","document","getElementById","innerText","checkIfAuthenticated","result","manifestVersion","checkManifestVersion","getLinkedProfiles","missingDefinitions","checkStoredDefinitions","length","loadDataFromStorage","setTimeout","emit","class","id","App","state","useContext","appState","Router","history","createHashHistory","Fragment","path","Destiny2Database","constructor","DBInstance","initializeDatabase","setItem","setItems","getItem","removeItem","setStorageItem","setStorageItems","getStorageItem","getStorageItems","removeStorageItem","Promise","resolve","reject","dbRequest","indexedDB","open","onupgradeneeded","event","db","oldVersion","newVersion","createObjectStore","autoIncrement","keyPath","createIndex","onsuccess","e","target","onerror","_setItem","storeName","key","request","self","transaction","objectStore","put","_getFilteredItems","filter","getAll","_getItem","defaultValue","_removeItem","delete","items","item","storageName","EventEmitter","eventListeners","eventName","eventHandler","push","handler","parse","ev","forEach","l","console","error","Destiny2ApiClient","apiToken","appName","refreshToken","loadDestinyContentData","getManifest","loadCommonSettings","getUserToken","applicationName","cachedManifest","destinyDataDefinition","lastVersion","profile","linkedProfiles","_log","authGatewayUrl","destinyBaseUrl","destinyApiUrl","destinyDataTypes","callUrl","method","body","authorization","headers","fetch","refreshTokenIfExpired","now","handleTokenResponse","tokenResponse","access_token","refresh_token","tokenExpires","expires_in","refreshTokenExpires","refresh_expires_in","membership_id","_cachedManifest","_cachedManifestVersion","dataType","_cachedData","_profile","_linkedProfiles","tokenRequest","status","json","statusText","manifest","Response","version","updatedManifest","downloadMissingDefinitions","definitions","loadDestinyContentDataType","dataTypeWords","replace","split","join","contentTypeDownload","jsonWorldComponentContentPaths","en","loaded","res","ReadableStream","start","controller","reader","getReader","progressIndication","r","read","done","byteLength","Intl","NumberFormat","format","Math","round","Number","EPSILON","enqueue","close","contentTypeJson","lastManifestUpdate","_manifest","manifestRequest","ErrorStatus","responseText","settings","bnetMemberId","linkedProfile","profiles","createAppState","signal","createContext"],"mappings":"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"}