{"version":3,"file":"index-a11af9cc.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/scripts/utils.ts","../../src/components/goalList.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/pages/logging-in.tsx","../../src/components/header.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClasses/itemState.ts","../../src/scripts/destiny2Goals.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (!(window as any).showDataverseLogs) return;\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function MainPage(props: D2AppState) {\n  if (props.isAuthenticated.value) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }\n      >\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/logging-in\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","/**\n * Shortens the text if it's longer than the max length\n * @param {string} string\n * @param {number} maxLength\n * @returns {string}\n */\nexport function shorten(string: string, maxLength: number): string {\n  if (string.length > maxLength) {\n    return string.substring(0, maxLength).trim() + \" ...\";\n  }\n\n  return string;\n}\n\n/**\n * Sorts a the dictionary you send, based on the property (numbers)\n * @param {Object} dictionary\n * @param {String} property The property in the dictionary to sort on\n * @param {Boolean} ascending Sort ascending or descending (Default descending)\n */\nexport function sortDictionaryByProperty(\n  dictionary: any,\n  property: string,\n  ascending: boolean\n) {\n  let items = Object.keys(dictionary).map(function (key) {\n    return [key, dictionary[key]];\n  });\n\n  items.sort(function (first, second) {\n    if (ascending) return first[1][property] - second[1][property];\n    return second[1][property] - first[1][property];\n  });\n\n  return items;\n}\n\nexport function sortDictionaryByPropertyAlphabetically(\n  dictionary: any,\n  property: string,\n  ascending: boolean\n) {\n  let internal = sortDictionaryByProperty(dictionary, property, ascending);\n\n  var keys = internal.map((v) => v[0]).sort();\n\n  let newItems = [];\n  for (let key of keys) {\n    newItems.push([key, internal.filter((v) => v[0] == key)[0][1]]);\n  }\n\n  return newItems;\n}\n\n/**\n * Outputs a date in YYYY-MM-DD format\n * @param {Date} date\n */\nexport function formatDate(date: Date) {\n  let retVal = \"\";\n\n  retVal += date.getFullYear() + \"-\";\n  if (date.getMonth() + 1 < 10) {\n    retVal += \"0\";\n  }\n  retVal += date.getMonth() + 1 + \"-\";\n\n  if (date.getDate() < 10) {\n    retVal += \"0\";\n  }\n  retVal += date.getDate();\n\n  return retVal;\n}\n\n/**\n *\n * @param {Date} startDate\n * @param {Date} endDate\n * @param {Boolean} latestSession\n * @returns {String}\n */\nexport function formatTimespan(\n  startDate: any,\n  endDate: any,\n  latestSession = false\n) {\n  if (!latestSession && !endDate) return `Unknown, no end time`;\n  return outputTimesObjectFromDifference(getTimeDifference(startDate, endDate));\n}\n\n/**\n *\n * @param {Number} days\n * @param {Number} hours\n * @param {Number} minutes\n * @param {Number} seconds\n * @returns {String}\n */\nexport function outputTimesObject(\n  days: number,\n  hours: number,\n  minutes: number\n) {\n  let time = [];\n\n  if (days > 0) time.push(`${days}d`);\n  if (hours > 0) time.push(`${hours}h`);\n  if (minutes > 0) time.push(`${minutes}m`);\n\n  return time.join(\", \");\n}\n\nexport function outputTimesObjectFromDifference(differenceInSeconds: number) {\n  let { days, hours, minutes } = getTimeObject(differenceInSeconds);\n  return outputTimesObject(days, hours, minutes);\n}\n\n/**\n *\n * @param {Date} startDate\n * @param {Date} endDate\n * @returns {Number}\n */\nexport function getTimeDifference(startDate: number, endDate: number) {\n  if (!endDate) endDate = Date.now();\n  return (endDate - startDate) / 1000;\n}\n\nfunction getTimeObject(differenceInSeconds: number) {\n  let days = Math.floor(differenceInSeconds / (24 * 3600));\n  let hours = Math.floor((differenceInSeconds % (24 * 3600)) / 3600);\n  let minutes = Math.floor((differenceInSeconds % 3600) / 60);\n  let seconds = Math.floor(differenceInSeconds % 60);\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n  };\n}\n\n/**\n *\n * @param {Number} count\n * @param {String} singular\n * @param {String} plural\n * @returns {String} pluralized string\n */\nexport function pluralize(count: number, singular: string, plural: string) {\n  return `${count} ${count === 1 ? singular : plural}`;\n}\n\n/**\n * Method copied from Stackoverflow (https://stackoverflow.com/a/8809472/1025823)\n * @returns {string} Returns a UUIDv4\n */\nexport function generateUUID() {\n  // Public Domain/MIT\n  var d = new Date().getTime(); //Timestamp\n  var d2 = (performance && performance.now && performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","import { useSignal } from \"@preact/signals\";\nimport { GoalDataItem } from \"../scripts/apiClasses/goalDataItem\";\nimport { formatTimespan } from \"../scripts/utils\";\nimport \"../styles/components/goalList.scss\";\nimport { D2AppState } from \"../classes/appState\";\nimport { useEffect } from \"preact/hooks\";\n\nconst intlFormat = new Intl.NumberFormat();\n\nconst destinyBaseUrl = \"https://www.bungie.net\";\n\nvar trackingItems = {\n  milestones: true,\n  bounties: true,\n  quests: true,\n  records: true,\n  seasonRank: true,\n};\n\nvar cachedGoals: GoalDataItem[] = [];\n\nexport function GoalList(props: D2AppState) {\n  const eventEmitter = window.eventEmitter;\n  const apiClient = window.apiClient;\n\n  var dataUpdate: NodeJS.Timeout;\n\n  useEffect(() => {\n    eventEmitter.addEventListener(\"goal-list-update\", updateGoalList);\n\n    (async function () {\n      await apiClient.getTrackableData();\n\n      dataUpdate = setInterval(async () => {\n        await apiClient.getTrackableData();\n      }, 15 * 1000);\n\n      return () => {\n        clearInterval(dataUpdate);\n      };\n    })();\n  }, []);\n\n  function renderProgress(goal: any) {\n    let progress: any = null;\n\n    if (goal.inProgressValueStyle === 0) {\n      if (goal.nextLevelAt === 1) {\n        goal.inProgressValueStyle = 2;\n      }\n    }\n\n    switch (goal.inProgressValueStyle) {\n      case 2:\n        progress = (\n          <span className=\"goal-progress\">\n            {goal.progressToNextLevel == 0 ? \"Incomplete\" : \"Complete\"}\n          </span>\n        );\n        break;\n      case 3:\n        let progressPercent = (\n          (goal.progressToNextLevel / goal.nextLevelAt) *\n          100\n        ).toFixed(0);\n        progress = <span className=\"goal-progress\">{progressPercent} %</span>;\n        break;\n      case 8:\n        progress = \"\";\n        break;\n      case 12:\n        progress = (\n          <span className=\"goal-progress\">{goal.progressToNextLevel} %</span>\n        );\n        break;\n      case 6:\n      default:\n        progress = (\n          <span className=\"goal-progress\">\n            {intlFormat.format(goal.progressToNextLevel)} /{\" \"}\n            {intlFormat.format(goal.nextLevelAt)}\n          </span>\n        );\n        break;\n    }\n\n    return typeof goal.nextLevelAt !== \"undefined\" ? <>{progress}</> : null;\n  }\n\n  function renderGoalItem(goal: any) {\n    let icon =\n      typeof goal.icon !== \"undefined\" ? (\n        <img className=\"goal-icon\" src={`${destinyBaseUrl}${goal.icon}`} />\n      ) : null;\n\n    let expiryDate =\n      typeof goal.endDate !== \"undefined\" ? (\n        <>\n          <br />\n          <i class=\"fui body fiction goal-end\">\n            Ends in {formatTimespan(new Date(), new Date(goal.endDate))}\n          </i>\n        </>\n      ) : null;\n\n    let progress = renderProgress(goal);\n\n    return (\n      <div className=\"goal-item\">\n        {icon}\n        <div className=\"goal-body\">\n          <h5>\n            {goal.name}\n            {progress}\n          </h5>\n          {goal.description}\n          {expiryDate}\n        </div>\n      </div>\n    );\n  }\n\n  async function updateGoalList(goals: GoalDataItem[]) {\n    let goalsVisible = 0;\n\n    let _visibleGoals: GoalDataItem[] = [];\n\n    for (let goal of goals) {\n      let addGoal = true;\n\n      switch (goal.type) {\n        case \"milestone\":\n          addGoal = trackingItems.milestones;\n          break;\n        case \"quest\":\n          addGoal = trackingItems.quests;\n          break;\n        case \"bounty\":\n          addGoal = trackingItems.bounties;\n          break;\n        case \"characterRecord\":\n          addGoal = trackingItems.records;\n          break;\n        case \"seasonrank\":\n          addGoal = trackingItems.seasonRank;\n          break;\n      }\n\n      if (addGoal) {\n        _visibleGoals.push(goal);\n        goalsVisible++;\n      }\n    }\n\n    props.goals.value = _visibleGoals;\n    cachedGoals = goals;\n  }\n\n  return (\n    <div className=\"goal-container\">\n      {props.goals?.value?.length > 0 ? (\n        props.goals.value.map((goal) => renderGoalItem(goal))\n      ) : (\n        <>Loading ...</>\n      )}\n    </div>\n  );\n}\n","import { D2AppState } from \"../classes/appState\";\nimport { GoalList } from \"../components/goalList\";\n\nexport default function Dashboard(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  if (!props.isAuthenticated.value || !props.isDataLoaded.value) {\n    location.href = \"/\";\n    return <></>;\n  }\n\n  const userProfile = apiClient.profile.profile;\n\n  return (\n    <>\n      <GoalList {...props} />\n    </>\n  );\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      © 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Signal } from \"@preact/signals\";\nimport { log } from \"../scripts/log\";\nimport { D2AppState } from \"../classes/appState\";\n\nexport default function LoggingIn(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  const eventEmitter = window.eventEmitter;\n\n  eventEmitter.addEventListener(\"loading-text\", (data: any) => {\n    if (!!data) {\n      setLoadingText(data);\n    }\n  });\n\n  function setLoadingText(text: string) {\n    let loadingText = document.getElementById(\"loading-text\");\n    if (loadingText) {\n      loadingText.innerText = text;\n    }\n  }\n\n  // Check if the user has a valid token and/or is authenticated, if not, redirect to the main page so they can login\n  apiClient\n    .checkIfAuthenticated()\n    .then(async (result) => {\n      if (!result) {\n        location.href = \"/\";\n        return;\n      }\n\n      log(\"LOGIN\", \"Authenticated, checking manifests\");\n\n      setLoadingText(\"Checking manifest ...\");\n      let manifestVersion = await apiClient.checkManifestVersion();\n\n      if (manifestVersion === null || manifestVersion === undefined) {\n        setLoadingText(\n          \"Something is wrong with Destiny 2 (or this app), please reload the page.\"\n        );\n        return;\n      }\n\n      log(\"LOGIN\", manifestVersion);\n\n      setLoadingText(\"Checking Destiny 2 server status\");\n\n      const status = await apiClient.checkDestinyStatus();\n\n      if (status && !status.systems.Destiny2.enabled) {\n        // Destiny 2 is not enabled\n        setLoadingText(\n          \"Destiny 2 is currently down for maintenance, trying again in one minute.\"\n        );\n\n        setTimeout(() => {\n          location.href = \"/\";\n        }, 60000);\n\n        return;\n      }\n\n      setLoadingText(\"Loading profile data\");\n\n      await apiClient.getLastPlayedCharacter();\n\n      setLoadingText(\"Checking for missing definitions\");\n\n      let missingDefinitions = await apiClient.checkStoredDefinitions(false);\n\n      if (missingDefinitions.length > 0) {\n        setLoadingText(\n          `Downloading ${missingDefinitions.length} missing definition(s)`\n        );\n        await apiClient.checkStoredDefinitions(true);\n      }\n\n      setLoadingText(\"Loading data...\");\n      await apiClient.loadDataFromStorage();\n\n      props.isDataLoaded.value = true;\n\n      setTimeout(() => {\n        setLoadingText(\"Opening application...\");\n        eventEmitter.emit(\"manifests-loaded\");\n\n        setTimeout(() => {\n          location.href = \"/#/dashboard\";\n        }, 1000);\n      }, 1000);\n    })\n    .catch(async (error) => {\n      if (error.status === 503) {\n        // Bungie API is down\n        setLoadingText(\"Bungie API is down, retrying in a minute.\");\n        setTimeout(() => {\n          location.href = \"/\";\n        }, 60000);\n      } else {\n        setLoadingText(\n          \"An error occurred while trying to log in, please try again.\"\n        );\n\n        console.error(error);\n        console.error(await error.json());\n      }\n    });\n\n  return (\n    <>\n      <span class=\"fui body\" id=\"loading-text\">\n        Logging in and loading data ...\n      </span>\n    </>\n  );\n}\n","export function Header() {\n  return <header className=\"header subscreen\">Dataverse</header>;\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\nimport LoggingIn from \"./pages/logging-in\";\nimport { useContext } from \"preact/hooks\";\nimport { Header } from \"./components/header\";\n\nexport function App() {\n  const state = useContext(window.appState);\n  return (\n    <>\n      <Header />\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage {...state} />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/logging-in\">\n            <LoggingIn {...state} />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard {...state} />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: any | null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","export enum ItemState {\n  None = 0,\n  Locked = 1,\n  Tracked = 2,\n  Masterwork = 4,\n  Crafted = 8,\n  HighlightedObjective = 16,\n}\n","import { BountyDataItem } from \"./apiClasses/bountyDataItem\";\nimport { CharacterRecordDataItem } from \"./apiClasses/characterRecordDataItem\";\nimport { ItemState } from \"./apiClasses/itemState\";\nimport { MilestoneDataItem } from \"./apiClasses/milestoneDataItem\";\nimport { QuestDataItem } from \"./apiClasses/questDataItem\";\nimport { SeasonRankData } from \"./apiClasses/seasonRankData\";\nimport { Destiny2ApiClient } from \"./apiClient\";\n\nexport class Destiny2Goals {\n  getSeasonRankData: (\n    namedObject: any,\n    seasonDefinition: any,\n    seasonPassDefinition: any\n  ) => SeasonRankData;\n  replaceStringVariables: (\n    string: string,\n    profileVariables: string[]\n  ) => string;\n  getMilestoneData: (namedObject: any) => MilestoneDataItem[];\n  getBounties: (namedObject: any) => BountyDataItem[];\n  getQuests: (namedObject: any) => QuestDataItem[];\n  getCharacterRecords: (namedObject: any) => CharacterRecordDataItem[];\n  destinyApiClient: any;\n\n  constructor(destiny2ApiClient: Destiny2ApiClient) {\n    /**\n     * @description Used for the base URL of content, like images and such.\n     */\n    const destinyBaseUrl = \"https://www.bungie.net\";\n\n    this.destinyApiClient = destiny2ApiClient;\n\n    this.getSeasonRankData = function (\n      namedObject,\n      seasonDefinition,\n      seasonPassDefinition\n    ): SeasonRankData {\n      let seasonPassData =\n        namedObject.characterProgression.progressions[\n          seasonPassDefinition.rewardProgressionHash\n        ];\n      let seasonPassProgressionData =\n        namedObject.characterProgression.progressions[\n          seasonPassDefinition.prestigeProgressionHash\n        ];\n\n      let seasonArtifactData =\n        this.destinyApiClient.destinyDataDefinition\n          .DestinyInventoryItemDefinition[seasonDefinition.artifactItemHash];\n\n      let seasonRank = seasonPassData.level;\n      let nextLevelAt = seasonPassData.nextLevelAt;\n      let progressToNextLevel = seasonPassData.progressToNextLevel;\n\n      if (seasonPassData.level == seasonPassData.levelCap) {\n        seasonRank += seasonPassProgressionData.level;\n        nextLevelAt += seasonPassProgressionData.nextLevelAt;\n        progressToNextLevel += seasonPassProgressionData.progressToNextLevel;\n      }\n\n      let seasonRankDataItem: SeasonRankData = {\n        name: `Season Rank ${seasonRank}`,\n        description: seasonDefinition.displayProperties.name,\n        icon: `${seasonArtifactData.displayProperties.icon}`,\n        startDate: seasonDefinition.startDate,\n        endDate: seasonDefinition.endDate,\n        nextLevelAt: nextLevelAt,\n        progressToNextLevel: progressToNextLevel,\n        type: \"seasonrank\",\n        order: -1,\n        inProgressValueStyle: 0,\n        completedValueStyle: 0,\n      };\n      return seasonRankDataItem;\n    };\n\n    this.replaceStringVariables = function (string, profileVariables): string {\n      if (!string || string.indexOf(\"{var:\") === -1) return string;\n      var matchRegex = /{var:(\\d+)}/g;\n\n      var allMatches = string.match(matchRegex);\n\n      let newString = string;\n\n      if (allMatches) {\n        for (var i = 0; i < allMatches.length; i++) {\n          var match = allMatches[i];\n          var _match = match.match(/\\d+/);\n          if (_match) {\n            var matchIndex: any = _match[0];\n            var matchString = profileVariables[matchIndex];\n\n            if (matchString) {\n              newString = newString.replace(match, matchString);\n            }\n          }\n        }\n      }\n\n      return newString;\n    };\n\n    this.getMilestoneData = function (namedObject): MilestoneDataItem[] {\n      let milestoneData: MilestoneDataItem[] = [];\n\n      let milestoneKeys = Object.keys(\n        namedObject.characterProgression.milestones\n      );\n\n      for (let milestoneKey of milestoneKeys) {\n        let milestone =\n          namedObject.characterProgression.milestones[milestoneKey];\n\n        let milestoneDataItem: MilestoneDataItem = {\n          name: this.replaceStringVariables(\n            milestone.milestoneName,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          description: this.replaceStringVariables(\n            milestone.milestoneDescription,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          order: milestone.order,\n          icon: milestone.milestoneIcon,\n          type: \"milestone\",\n          inProgressValueStyle: 0,\n          completedValueStyle: 0,\n        };\n\n        if (milestone.startDate) {\n          milestoneDataItem.startDate = milestone.startDate;\n        }\n\n        if (milestone.endDate) {\n          milestoneDataItem.endDate = milestone.endDate;\n        }\n\n        if (milestone.availableQuests && milestone.availableQuests.length > 0) {\n          for (let quest of milestone.availableQuests) {\n            if (quest.tracked) {\n              milestoneDataItem.tracked = true;\n            }\n            if (quest.status.started && !quest.status.completed) {\n              if (\n                quest.status.stepObjectives &&\n                quest.status.stepObjectives.length > 0\n              ) {\n                for (let step of quest.status.stepObjectives) {\n                  if (!step.complete) {\n                    if (typeof step.progress !== \"undefined\") {\n                      milestoneDataItem.progressToNextLevel = step.progress;\n                    }\n\n                    if (typeof step.completionValue !== \"undefined\") {\n                      milestoneDataItem.nextLevelAt = step.completionValue;\n                    }\n\n                    if (\n                      typeof step.objectiveInProgressValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.inProgressValueStyle =\n                        step.objectiveInProgressValueStyle;\n                    }\n\n                    if (\n                      typeof step.objectiveCompletedValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.completedValueStyle =\n                        step.objectiveCompletedValueStyle;\n                    }\n\n                    if (\n                      (milestoneDataItem.icon ?? \"\").length == 0 &&\n                      typeof step.activityIcon !== \"undefined\"\n                    ) {\n                      milestoneDataItem.icon = step.activityIcon;\n                    }\n\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (milestone.activities && milestone.activities.length > 0) {\n          for (let activity of milestone.activities) {\n            if (activity.challenges && activity.challenges.length > 0) {\n              for (let challenge of activity.challenges) {\n                if (!challenge.objective.complete) {\n                  if (typeof challenge.objective.progress !== \"undefined\") {\n                    milestoneDataItem.progressToNextLevel =\n                      challenge.objective.progress;\n                  }\n\n                  if (\n                    typeof challenge.objectiveInProgressValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.inProgressValueStyle =\n                      challenge.objectiveInProgressValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objectiveCompletedValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.completedValueStyle =\n                      challenge.objectiveCompletedValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objective.completionValue !== \"undefined\"\n                  ) {\n                    milestoneDataItem.nextLevelAt =\n                      challenge.objective.completionValue;\n                  }\n\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        }\n\n        milestoneData.push(milestoneDataItem);\n      }\n\n      return milestoneData;\n    };\n\n    const bountyItemType = 26;\n\n    this.getBounties = function (namedObject): BountyDataItem[] {\n      let bountyData: BountyDataItem[] = [];\n\n      var bountyItems = namedObject.characterInventory.filter(\n        (item: any) => item.inventoryitemItemType === bountyItemType\n      );\n\n      for (let bounty of bountyItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[bounty.itemInstanceId]\n            .objectives;\n\n        let incompleteTasks = itemObjectives.filter(\n          (obj: any) => !obj.complete\n        );\n\n        // If we don't have any tasks left to do, we'll ignore this bounty\n        if (incompleteTasks.length === 0) continue;\n\n        for (let objective of incompleteTasks) {\n          let bountyDataItem: BountyDataItem = {\n            name: this.replaceStringVariables(\n              bounty.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              bounty.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 500,\n            icon: bounty.inventoryitemIcon,\n            type: \"bounty\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked: (bounty.state & ItemState.Tracked) == ItemState.Tracked,\n            state: bounty.state,\n          };\n\n          if (typeof bounty.expirationDate !== \"undefined\") {\n            bountyDataItem.endDate = bounty.expirationDate;\n\n            // If the bounty is expired, we'll ignore it\n            if (\n              new Date(bounty.expirationDate).getTime() < new Date().getTime()\n            ) {\n              continue;\n            }\n          }\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            bountyDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              bountyDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              bountyDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              bountyDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${bountyDataItem.description}<br />\n              bountyDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            bountyData.push(bountyDataItem);\n          }\n        }\n      }\n\n      return bountyData;\n    };\n\n    const questBucketHash = 1345459588;\n\n    this.getQuests = function (namedObject): QuestDataItem[] {\n      let questData: QuestDataItem[] = [];\n\n      var questItems = namedObject.characterInventory.filter(\n        (item: any) =>\n          item.bucketHash === questBucketHash &&\n          [bountyItemType].filter((i) => i != item.inventoryitemItemType)\n            .length > 0\n      );\n\n      let instancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId !== \"undefined\"\n      );\n\n      let uninstancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId === \"undefined\"\n      );\n\n      for (let instanceQuest of instancedQuestItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[\n            instanceQuest.itemInstanceId\n          ];\n\n        if (itemObjectives) {\n          const _objectives = itemObjectives.objectives.filter(\n            (objective: any) => objective.visible && !objective.complete\n          );\n\n          for (let objective of _objectives) {\n            let questDataItem: QuestDataItem = {\n              name: this.replaceStringVariables(\n                instanceQuest.inventoryitemName,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              description: this.replaceStringVariables(\n                instanceQuest.inventoryitemDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              order: 1000,\n              icon: instanceQuest.inventoryitemIcon,\n              type: \"quest\",\n              inProgressValueStyle: 0,\n              completedValueStyle: 0,\n              tracked:\n                (instanceQuest.state & ItemState.Tracked) == ItemState.Tracked,\n              state: instanceQuest.state,\n            };\n\n            if (typeof objective.completionValue !== \"undefined\") {\n              questDataItem.nextLevelAt = objective.completionValue;\n\n              if (\n                typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n              ) {\n                questDataItem.inProgressValueStyle =\n                  objective.objectiveInProgressValueStyle;\n              }\n\n              if (\n                typeof objective.objectiveCompletedValueStyle !== \"undefined\"\n              ) {\n                questDataItem.completedValueStyle =\n                  objective.objectiveCompletedValueStyle;\n              }\n\n              if (typeof objective.progress !== \"undefined\") {\n                questDataItem.progressToNextLevel = objective.progress;\n              }\n\n              if (\n                typeof objective.objectiveProgressDescription !== \"undefined\"\n              ) {\n                // ${questDataItem.description}<br />\n                questDataItem.description = this.replaceStringVariables(\n                  objective.objectiveProgressDescription,\n                  namedObject.profileStringVariables.integerValuesByHash\n                );\n              }\n\n              questData.push(questDataItem);\n            }\n          }\n        }\n      }\n\n      for (let uninstancedQuest of uninstancedQuestItems) {\n        let questObjectives = (\n          namedObject.characterProgression.uninstancedItemObjectives[\n            uninstancedQuest.itemHash\n          ] ?? []\n        ).filter((objective: any) => objective.visible && !objective.complete);\n\n        for (let objective of questObjectives) {\n          let questDataItem: QuestDataItem = {\n            name: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 10000,\n            icon: uninstancedQuest.inventoryitemIcon,\n            type: \"quest\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked:\n              (uninstancedQuest.state & ItemState.Tracked) == ItemState.Tracked,\n            state: uninstancedQuest.state,\n          };\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            questDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              questDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              questDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              questDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${questDataItem.description}<br />\n              questDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            questData.push(questDataItem);\n          }\n        }\n      }\n\n      return questData;\n    };\n\n    this.getCharacterRecords = function (\n      namedObject\n    ): CharacterRecordDataItem[] {\n      let characterRecords: CharacterRecordDataItem[] = [];\n\n      let characterRecordKeys = Object.keys(\n        namedObject.characterRecords.records\n      );\n      for (let key of characterRecordKeys) {\n        let characterRecord = namedObject.characterRecords.records[key];\n        if (\n          typeof characterRecord.objectives === \"undefined\" ||\n          (characterRecord.recordName ?? \"\").length === 0\n        )\n          continue;\n\n        let recordObjectives = characterRecord.objectives.filter(\n          (objective: any) => objective.visible && !objective.complete\n        );\n\n        for (let objective of recordObjectives) {\n          let characterRecordData: CharacterRecordDataItem = {\n            name: characterRecord.recordName,\n            type: \"characterRecord\",\n            order: 100,\n            icon: characterRecord.recordIcon,\n            // ${characterRecord.recordDescription}<br />\n            description: `${objective.objectiveProgressDescription ?? \"\"}`,\n            progressToNextLevel: objective.progress,\n            nextLevelAt: objective.completionValue,\n            inProgressValueStyle: objective.objectiveInProgressValueStyle,\n            completedValueStyle: objective.objectiveCompletedValueStyle,\n            state: characterRecord.state,\n          };\n\n          characterRecords.push(characterRecordData);\n        }\n      }\n\n      return characterRecords;\n    };\n\n    return this;\n  }\n}\n","import { DestinyNamedObject } from \"./apiClasses/destinyNamedObject\";\nimport { GoalDataItem } from \"./apiClasses/goalDataItem\";\nimport { Destiny2Goals } from \"./destiny2Goals\";\nimport { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  checkManifestVersion: () => Promise<{\n    updatedManifest: boolean;\n    version: string | null;\n  } | null>;\n  checkStoredDefinitions: (\n    downloadMissingDefinitions?: boolean\n  ) => Promise<string[]>;\n  loadDestinyContentData: (definitions: string[]) => Promise<void>;\n  loadDataFromStorage: () => Promise<void>;\n  getManifest: () => Promise<{\n    Response: any;\n  } | null>;\n  loadCommonSettings: () => Promise<any>;\n  getUserToken: () => Promise<string | null>;\n  getLinkedProfiles: (forceRefresh?: boolean) => Promise<unknown>;\n  getUserProfile: (\n    membershipId: string,\n    membershipType: number\n  ) => Promise<unknown>;\n  getLastPlayedCharacter: (forceRefresh?: boolean) => Promise<any | null>;\n  getNamedDataObject: (\n    forceRefresh?: boolean\n  ) => Promise<DestinyNamedObject | null>;\n  getPresentationNodeFromHash: (hash: string) => any[];\n  mapHashesToDefinitionsInObject: (object: any) => any;\n  getTrackableData: (forceRefresh?: boolean) => Promise<GoalDataItem[] | null>;\n  checkDestinyStatus: () => Promise<{\n    destiny2CoreSettings: any;\n    systems: {\n      Destiny2: {\n        enabled: boolean;\n        [key: string]: any;\n      };\n      [key: string]: any;\n    };\n  }>;\n\n  apiToken: string;\n  applicationName: string;\n  cachedManifest: any;\n  destinyDataDefinition: { [key: string]: any };\n  lastVersion: string | null;\n  profile: any | null;\n  linkedProfiles: any | null;\n  trackedGoals: GoalDataItem[] | null;\n  goalApi: Destiny2Goals;\n\n  constructor(apiToken: string, appName: string) {\n    _log(\"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    const maxActivitiesPerFetch = 250;\n\n    /**\n     * @description The datatypes we are interested in.\n     */\n    const destinyDataTypes = [\n      \"DestinyActivityTypeDefinition\",\n      \"DestinyActivityDefinition\",\n      \"DestinyArtifactDefinition\",\n      \"DestinyChecklistDefinition\",\n      \"DestinyClassDefinition\",\n      \"DestinyDestinationDefinition\",\n      \"DestinyDamageTypeDefinition\",\n      \"DestinyFactionDefinition\",\n      \"DestinyGenderDefinition\",\n      \"DestinyItemCategoryDefinition\",\n      \"DestinyItemTierTypeDefinition\",\n      \"DestinyInventoryBucketDefinition\",\n      \"DestinyInventoryItemDefinition\",\n      \"DestinyMedalTierDefinition\",\n      \"DestinyMetricDefinition\",\n      \"DestinyMilestoneDefinition\",\n      \"DestinyObjectiveDefinition\",\n      \"DestinyPlaceDefinition\",\n      \"DestinyPresentationNodeDefinition\",\n      \"DestinyProgressionDefinition\",\n      \"DestinyRaceDefinition\",\n      \"DestinyRecordDefinition\",\n      \"DestinySeasonDefinition\",\n      \"DestinySeasonPassDefinition\",\n      \"DestinyStatDefinition\",\n      \"DestinyTraitDefinition\",\n    ];\n\n    const profileComponents = {\n      None: 0,\n      Profiles: 100,\n      VendorReceipts: 101,\n      ProfileInventories: 102,\n      ProfileCurrencies: 103,\n      ProfileProgression: 104,\n      PlatformSilver: 105,\n      Characters: 200,\n      CharacterInventories: 201,\n      CharacterProgressions: 202,\n      CharacterRenderData: 203,\n      CharacterActivities: 204,\n      CharacterEquipment: 205,\n      CharacterLoadouts: 206,\n      ItemInstances: 300,\n      ItemObjectives: 301,\n      ItemPerks: 302,\n      ItemRenderData: 303,\n      ItemStats: 304,\n      ItemSockets: 305,\n      ItemTalentGrids: 306,\n      ItemCommonData: 307,\n      ItemPlugStates: 308,\n      ItemPlugObjectives: 309,\n      ItemReusablePlugs: 310,\n      Vendors: 400,\n      VendorCategories: 401,\n      VendorSales: 402,\n      Kiosks: 500,\n      CurrencyLookups: 600,\n      PresentationNodes: 700,\n      Collectibles: 800,\n      Records: 900,\n      Transitory: 1000,\n      Metrics: 1100,\n      StringVariables: 1200,\n      Craftables: 1300,\n      SocialCommendations: 1400,\n    };\n\n    const DestinyItemState = {\n      None: 0,\n      Locked: 1,\n      Tracked: 2,\n      Masterwork: 4,\n    };\n\n    this.lastVersion = null;\n    this.applicationName = appName;\n    this.apiToken = apiToken;\n    this.destinyDataDefinition = {};\n    this.trackedGoals = [];\n\n    function _log(...params: any[]) {\n      log(\"D2API\", params);\n    }\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      let headers: RequestInit[\"headers\"] = {};\n\n      if (body !== null || authorization !== null) {\n        headers[\"Content-Type\"] = \"application/json\";\n        headers[\"x-api-key\"] = self.apiToken;\n        if (authorization !== null) {\n          headers.authorization = `Bearer ${authorization}`;\n        }\n      }\n\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        _log(\"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        _log(\"Error handling token\", JSON.stringify(tokenResponse));\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.loadDataFromStorage = async () => {\n      _log(\"Loading data from storage\");\n\n      let _cachedManifest = await db.getItem(\"manifest\");\n      if (_cachedManifest !== null) {\n        self.cachedManifest = JSON.parse(_cachedManifest);\n      }\n\n      let _cachedManifestVersion = await db.getItem(\"manifestVersion\");\n      if (_cachedManifestVersion !== null) {\n        self.lastVersion = _cachedManifestVersion;\n      }\n\n      self.checkStoredDefinitions();\n\n      for (let dataType of destinyDataTypes) {\n        let _cachedData = await db.getItem(`destinyContent-${dataType}`);\n        if (_cachedData !== null) {\n          self.destinyDataDefinition[dataType] = JSON.parse(_cachedData);\n        }\n      }\n\n      let _profile = await db.getItem(\"destiny-profile\");\n      if (_profile !== null) {\n        self.profile = JSON.parse(_profile);\n      }\n\n      let _linkedProfiles = await db.getItem(\"destiny-linkedProfiles\");\n      if (_linkedProfiles !== null) {\n        self.linkedProfiles = JSON.parse(_linkedProfiles);\n      }\n\n      _log(\"Data loaded from storage\");\n      eventEmitter.emit(\"destiny-data-loaded\");\n    };\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        _log(\"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      _log(\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    this.checkManifestVersion = async () => {\n      _log(\"Checking manifest version\");\n      return new Promise(async function (resolve, reject) {\n        let manifest = await self.getManifest();\n\n        if (manifest == null) {\n          _log(\"Failed to fetch API\");\n          return null;\n        }\n\n        let lastVersion = (await db.getItem(\"manifestVersion\")) ?? \"null\";\n\n        if (manifest.Response.version !== lastVersion) {\n          /* Currently cached data is older than 60 minutes, so we clear it. */\n          await db.removeItem(\"lastManifestUpdate\");\n          await db.removeItem(\"manifest\");\n          await db.removeItem(\"manifestVersion\");\n\n          for (let dataType of destinyDataTypes) {\n            await db.removeItem(`destinyContent-${dataType}`);\n          }\n\n          self.cachedManifest = manifest.Response;\n\n          await db.setItem(\"manifestVersion\", manifest.Response.version);\n          await db.setItem(\"manifest\", JSON.stringify(self.cachedManifest));\n          await db.setItem(\"lastManifestUpdate\", Date.now());\n\n          resolve({ updatedManifest: true, version: self.lastVersion });\n          _log(\"Manifest updated\");\n          return;\n        }\n\n        self.cachedManifest = manifest.Response;\n\n        resolve({ updatedManifest: false, version: self.lastVersion });\n        _log(\"Manifest version is up to date\");\n      });\n    };\n\n    this.checkStoredDefinitions = async function (\n      downloadMissingDefinitions = true\n    ) {\n      let missingDefinitions: string[] = [];\n\n      for (let dataType of destinyDataTypes) {\n        let data = await db.getItem(`destinyContent-${dataType}`);\n        if (data === null) {\n          missingDefinitions.push(dataType);\n        }\n      }\n\n      if (missingDefinitions.length > 0 && downloadMissingDefinitions) {\n        for (let dataType of missingDefinitions) {\n          await db.removeItem(`destinyContent-${dataType}`);\n        }\n\n        await self.loadDestinyContentData(missingDefinitions);\n      }\n\n      return missingDefinitions;\n    };\n\n    this.loadDestinyContentData = async function (definitions: string[] = []) {\n      for (let dataType of definitions) {\n        let success = false;\n        let attempts = 0;\n        let lastError = null;\n        while (!success && attempts < 5) {\n          try {\n            await loadDestinyContentDataType(dataType);\n            success = true;\n          } catch (err) {\n            lastError = err;\n            // Remove possibly corrupted data\n            await db.removeItem(`destinyContent-${dataType}`);\n            attempts++;\n            if (attempts < 5) {\n              // Exponential backoff: 250ms, 500ms, 1000ms, 2000ms, 4000ms\n              const wait = 250 * Math.pow(2, attempts - 1);\n              await new Promise((res) => setTimeout(res, wait));\n            }\n          }\n        }\n        if (!success) {\n          eventEmitter.emit(\"loading-error\", {\n            dataType,\n            error: lastError,\n            message: `Failed to load ${dataType} after 5 attempts.`,\n          });\n        }\n      }\n    };\n\n    async function loadDestinyContentDataType(dataType: string) {\n      let manifest = self.cachedManifest;\n\n      const dataTypeWords = dataType\n        .replace(\"Destiny\", \"\")\n        .split(/(?=[A-Z])/)\n        .join(\" \");\n\n      eventEmitter.emit(\"loading-text\", `Loading ${dataTypeWords}`);\n\n      const contentTypeDownload = await callUrl(\n        \"GET\",\n        `${destinyBaseUrl}${manifest.jsonWorldComponentContentPaths.en[dataType]}`\n      );\n\n      const contentLength = contentTypeDownload.headers.get(\"content-length\");\n\n      const total = parseInt(contentLength || \"0\", 10);\n      let loaded = 0;\n\n      const res = new Response(\n        new ReadableStream({\n          async start(controller) {\n            const reader = contentTypeDownload.body!.getReader();\n\n            let progressIndication = 0;\n            for (;;) {\n              var r = await reader!.read();\n              if (r!.done) {\n                break;\n              }\n              loaded += r!.value.byteLength;\n\n              progressIndication++;\n              if (progressIndication % 30 === 0) {\n                eventEmitter.emit(\n                  \"loading-text\",\n                  `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                    \"sv-SE\"\n                  ).format(\n                    Math.round(\n                      (loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON\n                    ) / 100\n                  )} MB)`\n                );\n              }\n              controller.enqueue(r!.value);\n            }\n\n            eventEmitter.emit(\n              \"loading-text\",\n              `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                \"sv-SE\"\n              ).format(\n                Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) /\n                  100\n              )} MB)`\n            );\n            controller.close();\n          },\n        })\n      );\n\n      if (contentTypeDownload.status !== 200) {\n        log(\"Manifest download error\", await res.json());\n        return;\n      }\n\n      const contentTypeJson = await res.json();\n\n      self.destinyDataDefinition[dataType] = contentTypeJson;\n      db.setItem(`destinyContent-${dataType}`, JSON.stringify(contentTypeJson));\n    }\n\n    this.getManifest = async function (): Promise<{\n      Response: any;\n    } | null> {\n      let lastManifestUpdate = await db.getItem(\"lastManifestUpdate\");\n      _log(\"Checking if manifest is cached\");\n\n      if (\n        lastManifestUpdate !== null &&\n        Date.now() - lastManifestUpdate < 60000 * 60\n      ) {\n        let _manifest = await db.getItem(\"manifest\");\n        if (_manifest !== null) {\n          _log(\"Manifest is cached\");\n          return { Response: JSON.parse(_manifest) };\n        }\n      }\n\n      let manifestRequest = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Destiny2/Manifest/`\n      );\n\n      if (manifestRequest.status === 200) {\n        let manifest = await manifestRequest.json();\n        if (manifest.ErrorStatus == \"Success\") {\n          db.setItem(\"lastManifestUpdate\", Date.now());\n          db.setItem(\"manifest\", JSON.stringify(manifest.Response));\n          _log(\"Manifest updated from API\");\n\n          return { Response: manifest.Response };\n        } else {\n          _log(\"Manifesterror\");\n          _log(manifest.Response);\n\n          return null;\n        }\n      } else {\n        let responseText = manifestRequest.json();\n        _log(\"Error when fetching Manifest\");\n        _log(responseText);\n\n        return null;\n      }\n    };\n\n    this.loadCommonSettings = async function () {\n      await refreshTokenIfExpired();\n\n      const settings = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Settings`,\n        null,\n        await this.getUserToken()\n      );\n      if (settings.status === 200) {\n        return await settings.json();\n      }\n\n      _log(\n        \"Error fetching common settings\",\n        settings.status,\n        settings.statusText\n      );\n      return null;\n    };\n\n    this.getUserToken = async function () {\n      return await db.getItem(\"destinyToken\");\n    };\n\n    this.getLinkedProfiles = async function (forceRefresh: boolean = false) {\n      if (forceRefresh) {\n        self.linkedProfiles = null;\n      }\n\n      if (self.linkedProfiles != null) {\n        return self.linkedProfiles;\n      }\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        var bnetMemberId = await db.getItem(\"destinyBungieMembershipId\");\n\n        let linkedProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/-1/Profile/${bnetMemberId}/LinkedProfiles/`,\n          null,\n          await this.getUserToken()\n        );\n\n        if (linkedProfile.status === 200) {\n          let profiles = await linkedProfile.json();\n\n          db.setItem(\n            \"destiny-linkedProfiles\",\n            JSON.stringify(profiles.Response)\n          );\n\n          self.linkedProfiles = profiles.Response;\n\n          resolve(profiles.Response);\n        } else {\n          self.refreshToken();\n          reject(linkedProfile);\n        }\n      });\n    };\n\n    this.getUserProfile = async function (\n      membershipId: string,\n      membershipType: number\n    ) {\n      let interestingComponents = [\n        profileComponents.Profiles,\n        profileComponents.ProfileInventories,\n        profileComponents.ProfileCurrencies,\n        profileComponents.ProfileProgression,\n        profileComponents.Characters,\n        profileComponents.CharacterInventories,\n        profileComponents.CharacterProgressions,\n        profileComponents.CharacterActivities,\n        profileComponents.CharacterEquipment,\n        profileComponents.ItemInstances,\n        profileComponents.ItemObjectives,\n        profileComponents.ItemSockets,\n        profileComponents.ItemTalentGrids,\n        profileComponents.ItemCommonData,\n        profileComponents.ItemPlugStates,\n        profileComponents.ItemPlugObjectives,\n        profileComponents.ItemReusablePlugs,\n        profileComponents.Metrics,\n        profileComponents.Records,\n        profileComponents.Collectibles,\n        profileComponents.StringVariables,\n      ];\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        let userProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/${membershipType}/Profile/${membershipId}/?components=${interestingComponents.join(\n            \",\"\n          )}`,\n          null,\n          await this.getUserToken()\n        );\n        if (userProfile.status === 200) {\n          let profile = await userProfile.json();\n\n          if (\n            typeof self.profile == \"undefined\" ||\n            new Date(self.profile.responseMintedTimestamp).getTime() <\n              new Date(profile.Response.responseMintedTimestamp).getTime()\n          ) {\n            db.setItem(\"destiny-profile\", JSON.stringify(profile.Response));\n            self.profile = profile.Response;\n\n            resolve(profile.Response);\n          } else {\n            resolve(self.profile);\n          }\n        } else {\n          self.refreshToken();\n          reject(userProfile);\n        }\n      });\n    };\n\n    this.getLastPlayedCharacter = async function (forceRefresh = false) {\n      await refreshTokenIfExpired();\n\n      let _profile = self.profile;\n\n      if (\n        typeof _profile !== \"undefined\" &&\n        (new Date().getTime() -\n          new Date(_profile.responseMintedTimestamp).getTime()) /\n          1000 >\n          60\n      ) {\n        forceRefresh = true;\n      }\n\n      if (forceRefresh) {\n        _profile = null;\n      }\n\n      if (self.linkedProfiles === null) {\n        return null;\n      }\n\n      await self.getLinkedProfiles(forceRefresh);\n\n      if (\n        self.linkedProfiles !== null &&\n        self.linkedProfiles.profiles !== null &&\n        self.linkedProfiles.profiles.length > 0\n      ) {\n        var primaryMembership = self.linkedProfiles.profiles.sort(\n          (a: any, b: any) => (a.dateLastPlayed > b.dateLastPlayed ? -1 : 1)\n        )[0];\n\n        _profile = await self.getUserProfile(\n          primaryMembership.membershipId,\n          primaryMembership.membershipType\n        );\n      }\n\n      let characters = [];\n\n      for (let char of _profile.profile.data.characterIds) {\n        characters.push(_profile.characters.data[char]);\n      }\n\n      let _last = characters.sort((a, b) =>\n        a.dateLastPlayed > b.dateLastPlayed ? -1 : 1\n      )[0];\n\n      let lastPlayedCharacter = {\n        characterInfo: _last,\n        characterProgression: !!!_profile.characterProgressions.disabled\n          ? _profile.characterProgressions.data[_last.characterId]\n          : {},\n        characterActivities: !!!_profile.characterActivities.disabled\n          ? _profile.characterActivities.data[_last.characterId]\n          : {},\n        characterUninstancedItemComponents:\n          _profile.characterUninstancedItemComponents[_last.characterId]\n            .objectives.data,\n        characterInventory:\n          _profile.characterInventories.data[_last.characterId].items,\n        characterEquipment:\n          _profile.characterEquipment.data[_last.characterId].items,\n        characterPlugSets: !!!_profile.characterPlugSets.disabled\n          ? _profile.characterPlugSets.data[_last.characterId].plugs\n          : {},\n        characterCollectibles:\n          _profile.characterCollectibles.data[_last.characterId].collectibles,\n        characterRecords: _profile.characterRecords.data[_last.characterId],\n        characterStringVariables:\n          _profile.characterStringVariables.data[_last.characterId],\n        profileProgression: _profile.profileProgression.data,\n        metrics: _profile.metrics.data.metrics,\n        itemComponents: _profile.itemComponents,\n        records: _profile.profileRecords.data,\n        profileInventory: _profile.profileInventory.data.items,\n        profileCurrency: _profile.profileCurrencies.data.items,\n        profilePlugSets: !!!_profile.profilePlugSets.disabled\n          ? _profile.profilePlugSets.data.plugs\n          : {},\n        profileCollectibles: _profile.profileCollectibles.data,\n        profile: _profile.profile.data,\n        profileStringVariables: _profile.profileStringVariables.data,\n      };\n\n      return lastPlayedCharacter;\n    };\n\n    this.getNamedDataObject = async function (\n      forceRefresh = false\n    ): Promise<DestinyNamedObject | null> {\n      let _lastPlayer = await self.getLastPlayedCharacter(forceRefresh);\n\n      if (_lastPlayer == null) {\n        return null;\n      }\n\n      let namedDataObject = {\n        ..._lastPlayer,\n      };\n\n      for (let statKey of Object.keys(namedDataObject.characterInfo.stats)) {\n        namedDataObject.characterInfo.stats[statKey] = {\n          statValue: namedDataObject.characterInfo.stats[statKey],\n          statHash: statKey,\n        };\n      }\n\n      for (let metricKey of Object.keys(namedDataObject.metrics)) {\n        namedDataObject.metrics[metricKey] = {\n          ...namedDataObject.metrics[metricKey],\n          metricHash: metricKey,\n        };\n      }\n\n      for (let recordKey of Object.keys(namedDataObject.records.records)) {\n        namedDataObject.records.records[recordKey] = {\n          ...namedDataObject.records.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      for (let recordKey of Object.keys(\n        namedDataObject.characterRecords.records\n      )) {\n        namedDataObject.characterRecords.records[recordKey] = {\n          ...namedDataObject.characterRecords.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      namedDataObject = self.mapHashesToDefinitionsInObject(namedDataObject);\n\n      const cacheBreaker = await db.getItem(\"destiny2-use-cachebreaker\", false);\n      if (cacheBreaker) {\n        const lockableItems = _lastPlayer.characterInventory.filter(\n          (i: any) => i.lockable && i.inventoryitemItemType == 3\n        );\n\n        if (lockableItems.length > 0) {\n          // await self.lockItem(\n          //   _lastPlayer.characterInfo.membershipType,\n          //   _lastPlayer.characterInfo.characterId,\n          //   lockableItems[0].itemInstanceId,\n          //   lockableItems[0].state & DestinyItemState.Locked\n          // );\n        }\n      }\n\n      eventEmitter.emit(\"destiny2-api-update\", namedDataObject);\n\n      return namedDataObject;\n    };\n\n    this.getPresentationNodeFromHash = function (hash: string) {\n      const presentationNameArray = [];\n\n      const presentationNode =\n        self.destinyDataDefinition.DestinyPresentationNodeDefinition[hash];\n      if (presentationNode) {\n        presentationNameArray.unshift({\n          name: presentationNode.displayProperties.name,\n          description: presentationNode.displayProperties.description,\n          icon: presentationNode.displayProperties.icon,\n          hash: hash,\n        });\n\n        if (presentationNode.parentNodeHashes) {\n          for (let _hash of presentationNode.parentNodeHashes) {\n            const subItems = self.getPresentationNodeFromHash(_hash);\n            for (let item of subItems) {\n              presentationNameArray.push(item);\n            }\n          }\n        }\n      }\n\n      return presentationNameArray;\n    };\n\n    this.mapHashesToDefinitionsInObject = function (object: any) {\n      let _objectCopy = { ...object };\n\n      let keys = Object.keys(_objectCopy);\n      for (let key of keys) {\n        let _type = typeof _objectCopy[key];\n        let _field = _objectCopy[key];\n\n        if (Array.isArray(_field)) {\n          for (let x = 0; x < _field.length; x++) {\n            let arrItem = _field[x];\n            if (typeof arrItem === \"object\") {\n              _field[x] = self.mapHashesToDefinitionsInObject(arrItem);\n            } else {\n              _field[x] = arrItem;\n            }\n          }\n          _objectCopy[key] = _field;\n        } else if (_type === \"object\" && _field !== null) {\n          _objectCopy[key] = self.mapHashesToDefinitionsInObject(\n            _objectCopy[key]\n          );\n        } else {\n          if (key.indexOf(\"Hash\") > -1 && !Array.isArray(_field)) {\n            let _hashType = key\n              .split(\"Hash\")[0]\n              .replace(\"current\", \"\")\n              .toLowerCase();\n\n            switch (_hashType) {\n              case \"item\":\n              case \"plugitem\":\n                _hashType = \"inventoryitem\";\n                break;\n            }\n\n            let dataType = destinyDataTypes.find(\n              (i) =>\n                i.toLowerCase() == `Destiny${_hashType}Definition`.toLowerCase()\n            );\n            let definitionData = self.destinyDataDefinition[dataType!];\n            if (\n              definitionData &&\n              definitionData[_field] &&\n              definitionData[_field].displayProperties\n            ) {\n              const dField = definitionData[_field];\n              if (\n                dField.displayProperties.name &&\n                dField.displayProperties.name.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.displayProperties.name;\n              } else if (\n                dField.setData &&\n                dField.setData.questLineName &&\n                dField.setData.questLineName.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.setData.questLineName;\n              }\n\n              if (\n                dField.displayProperties.description &&\n                dField.displayProperties.description.length > 0\n              ) {\n                _objectCopy[`${_hashType}Description`] =\n                  dField.displayProperties.description;\n              }\n\n              if (\n                dField.displayProperties.icon &&\n                dField.displayProperties.icon.length > 0\n              ) {\n                _objectCopy[`${_hashType}Icon`] = dField.displayProperties.icon;\n              }\n\n              if (\n                dField.progressDescription &&\n                dField.progressDescription.length > 0\n              ) {\n                _objectCopy[`${_hashType}ProgressDescription`] =\n                  dField.progressDescription;\n              }\n\n              if (typeof dField.inProgressValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}InProgressValueStyle`] =\n                  dField.inProgressValueStyle;\n              }\n\n              if (typeof dField.completedValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}CompletedValueStyle`] =\n                  dField.completedValueStyle;\n              }\n\n              if (typeof dField.itemType !== \"undefined\") {\n                _objectCopy[`${_hashType}ItemType`] = dField.itemType;\n              }\n\n              if (typeof dField.parentNodeHashes !== \"undefined\") {\n                _objectCopy[`parentNodeHashes`] = dField.parentNodeHashes.map(\n                  (item: any) => {\n                    return self.getPresentationNodeFromHash(item);\n                  }\n                );\n              }\n            }\n          }\n\n          _objectCopy[key] = _field;\n        }\n      }\n\n      return _objectCopy;\n    };\n\n    this.getTrackableData = async function (\n      forceRefresh = false\n    ): Promise<GoalDataItem[] | null> {\n      let namedObject = await self.getNamedDataObject(forceRefresh);\n\n      if (namedObject == null) {\n        return null;\n      }\n\n      let seasonDefinition =\n        self.destinyDataDefinition.DestinySeasonDefinition[\n          namedObject.profile.currentSeasonHash\n        ];\n\n      let currentSeasonPass = seasonDefinition.seasonPassList.find(\n        (i: any) =>\n          new Date() < new Date(Date.parse(i.seasonPassEndDate)) &&\n          new Date() >= new Date(Date.parse(i.seasonPassStartDate))\n      );\n\n      let seasonPassDefinition =\n        self.destinyDataDefinition.DestinySeasonPassDefinition[\n          currentSeasonPass.seasonPassHash\n        ];\n\n      let trackableDataItems: GoalDataItem[] = [];\n\n      let milestoneData = self.goalApi.getMilestoneData(namedObject);\n      for (let milestone of milestoneData) {\n        trackableDataItems.push(milestone);\n      }\n\n      let bountyData = self.goalApi.getBounties(namedObject);\n      for (let bounty of bountyData) {\n        trackableDataItems.push(bounty);\n      }\n\n      let questData = self.goalApi.getQuests(namedObject);\n      for (let quest of questData) {\n        trackableDataItems.push(quest);\n      }\n\n      let characterRecords = self.goalApi.getCharacterRecords(namedObject);\n\n      for (let characterRecord of characterRecords) {\n        trackableDataItems.push(characterRecord);\n      }\n\n      function sortTrackableItems(a: any, b: any) {\n        if (\n          typeof a.nextLevelAt !== \"undefined\" &&\n          typeof b.nextLevelAt !== \"undefined\"\n        ) {\n          let aProgress = (a.progressToNextLevel / a.nextLevelAt) * 100;\n          let bProgress = (b.progressToNextLevel / b.nextLevelAt) * 100;\n\n          return aProgress < bProgress ? 1 : -1;\n        }\n\n        if (typeof a.endDate !== \"undefined\") {\n          return typeof b.endDate === \"undefined\" || a.endDate < b.endDate\n            ? -1\n            : 1;\n        }\n\n        return a.order < b.order ? 1 : -1;\n      }\n\n      const trackedItems = trackableDataItems\n        .filter((i) => i.tracked)\n        .sort(sortTrackableItems);\n\n      const itemsWithExpiration = trackableDataItems\n        .filter((i) => i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n      const itemsWithoutExpiration = trackableDataItems\n        .filter((i) => !i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n\n      trackableDataItems = [\n        ...trackedItems,\n        ...itemsWithExpiration,\n        ...itemsWithoutExpiration,\n      ];\n\n      trackableDataItems.unshift(\n        self.goalApi.getSeasonRankData(\n          namedObject,\n          seasonDefinition,\n          seasonPassDefinition\n        )\n      );\n\n      self.trackedGoals = trackableDataItems;\n      eventEmitter.emit(\"goal-list-update\", trackableDataItems);\n\n      return trackableDataItems;\n    };\n\n    this.checkDestinyStatus = async function () {\n      _log(\"Checking Destiny status\");\n      const statusRequest = await callUrl(\"GET\", `${destinyApiUrl}/Settings/`);\n\n      const status = await statusRequest.json();\n\n      const systems = [\"D2Manifest\", \"DestinyLinkedProfiles\", \"Destiny2\"];\n\n      const systemStatuses: {\n        [key: string]: any;\n      } = {};\n\n      for (let system of systems) {\n        if (status.Response.systems[system]) {\n          systemStatuses[system] = status.Response.systems[system];\n        }\n      }\n\n      return {\n        destiny2CoreSettings: status.Response.destiny2CoreSettings,\n        systems: {\n          Destiny2: systemStatuses.Destiny2,\n          D2Manifest: systemStatuses.D2Manifest,\n          DestinyLinkedProfiles: systemStatuses.DestinyLinkedProfiles,\n        },\n      };\n    };\n\n    let self = this;\n\n    this.goalApi = new Destiny2Goals(this);\n\n    _log(\"Initialized\");\n    return this;\n  }\n}\n","import { render, createContext, Context } from \"preact\";\nimport { signal } from \"@preact/signals\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\nimport { D2AppState } from \"./classes/appState\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n    appState: Context<D2AppState>;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nfunction createAppState(): D2AppState {\n  const isDataLoaded = signal(false);\n  const isAuthenticated = signal(false);\n  const goals = signal([]);\n\n  return {\n    isDataLoaded,\n    isAuthenticated,\n    goals,\n  };\n}\n\nconst state = createAppState();\n\nwindow.appState = createContext(state);\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  state.isAuthenticated.value = await window.apiClient.checkIfAuthenticated();\n\n  render(<App />, document.getElementById(\"app\") as HTMLElement);\n});\n"],"names":["log","category","params","MainPage","props","jsx","Fragment","jsxs","Authenticated","apiClient","url","getCurrentUrl","code","err","formatTimespan","startDate","endDate","latestSession","outputTimesObjectFromDifference","getTimeDifference","outputTimesObject","days","hours","minutes","time","differenceInSeconds","getTimeObject","seconds","intlFormat","destinyBaseUrl","trackingItems","GoalList","eventEmitter","dataUpdate","useEffect","updateGoalList","renderProgress","goal","progress","progressPercent","renderGoalItem","icon","expiryDate","goals","_visibleGoals","addGoal","Dashboard","Footer","LoggingIn","data","setLoadingText","text","loadingText","result","manifestVersion","status","missingDefinitions","error","Header","App","state","useContext","Router","createHashHistory","Destiny2Database","__publicField","resolve","reject","dbRequest","event","db","self","_setItem","storeName","key","value","request","_getFilteredItems","filter","_getItem","defaultValue","_removeItem","items","item","storageName","EventEmitter","eventName","eventHandler","ev","l","e","ItemState","Destiny2Goals","destiny2ApiClient","namedObject","seasonDefinition","seasonPassDefinition","seasonPassData","seasonPassProgressionData","seasonArtifactData","seasonRank","nextLevelAt","progressToNextLevel","string","profileVariables","matchRegex","allMatches","newString","i","match","_match","matchIndex","matchString","milestoneData","milestoneKeys","milestoneKey","milestone","milestoneDataItem","quest","step","activity","challenge","bountyItemType","bountyData","bountyItems","bounty","incompleteTasks","obj","objective","bountyDataItem","questBucketHash","questData","questItems","instancedQuestItems","uninstancedQuestItems","instanceQuest","itemObjectives","_objectives","questDataItem","uninstancedQuest","questObjectives","characterRecords","characterRecordKeys","characterRecord","recordObjectives","characterRecordData","Destiny2ApiClient","apiToken","appName","_log","authGatewayUrl","destinyApiUrl","destinyDataTypes","profileComponents","callUrl","method","body","authorization","headers","refreshTokenIfExpired","handleTokenResponse","tokenResponse","tokenExpires","refreshTokenExpires","_cachedManifest","_cachedManifestVersion","dataType","_cachedData","_profile","_linkedProfiles","isAuthenticated","tokenRequest","refreshToken","manifest","lastVersion","downloadMissingDefinitions","definitions","success","attempts","lastError","loadDestinyContentDataType","wait","res","dataTypeWords","contentTypeDownload","loaded","controller","reader","progressIndication","r","contentTypeJson","lastManifestUpdate","_manifest","manifestRequest","responseText","settings","forceRefresh","bnetMemberId","linkedProfile","profiles","membershipId","membershipType","interestingComponents","userProfile","profile","primaryMembership","a","b","characters","char","_last","_lastPlayer","namedDataObject","statKey","metricKey","recordKey","hash","presentationNameArray","presentationNode","_hash","subItems","object","_objectCopy","keys","_type","_field","x","arrItem","_hashType","definitionData","dField","currentSeasonPass","trackableDataItems","sortTrackableItems","aProgress","bProgress","trackedItems","itemsWithExpiration","itemsWithoutExpiration","systems","systemStatuses","system","createAppState","isDataLoaded","signal","createContext","render"],"mappings":"s9BAKgB,SAAAA,EAAIC,KAAqBC,EAAqB,CACtD,OAAe,mBAIb,QAAA,IAAI,IAAID,CAAQ,IAAK,KAAK,UAAU,CAAC,GAAGC,CAAM,CAAC,CAAC,CAC1D,CCTA,SAAwBC,EAASC,EAAmB,CAC9C,OAAAA,EAAM,gBAAgB,OACxB,SAAS,KAAO,gBACPC,EAAAC,EAAA,CAAA,CAAA,GAIPC,EAAAD,EAAA,CAAA,SAAA,CAAA,cACY,IACZD,EAAC,IAAA,CACC,KACE,uEAEI,IAAA,KAAA,EAAO,QAAQ,EAEtB,SAAA,QAAA,CAED,CACF,CAAA,CAAA,CAEJ,CCnBA,SAAwBG,GAAgB,CACtC,MAAMC,EAAY,OAAO,UAEnBC,EAAMC,IACRX,EAAA,OAAQ,mCAAoCU,CAAG,EAG7C,MAAAE,EAFU,IAAI,IAAIF,EAAK,SAAS,MAAM,EAAE,aAEzB,IAAI,MAAM,EAE/B,OAAKE,GAMLH,EACG,SAAS,GAAIG,CAAI,EACjB,KAAK,IAAM,CACVZ,EAAI,OAAQ,qCAAqC,EACjD,SAAS,KAAO,eAAA,CACjB,EACA,MAAOa,GAAQ,CACdb,EAAI,OAAQ,+CAA+C,EAC3D,SAAS,KAAO,GAAA,CACjB,OAEM,SAAuC,yCAAA,CAAA,IAhB9CA,EAAI,OAAQ,yCAAyC,EACrD,SAAS,KAAO,SACP,SAAwB,0BAAA,CAAA,EAerC,CCoDO,SAASc,GACdC,EACAC,EACAC,EAAgB,GAChB,CACI,MAAA,CAACA,GAAiB,CAACD,EAAgB,uBAChCE,GAAgCC,GAAkBJ,EAAWC,CAAO,CAAC,CAC9E,CAUgB,SAAAI,GACdC,EACAC,EACAC,EACA,CACA,IAAIC,EAAO,CAAA,EAEX,OAAIH,EAAO,GAAQG,EAAA,KAAK,GAAGH,CAAI,GAAG,EAC9BC,EAAQ,GAAQE,EAAA,KAAK,GAAGF,CAAK,GAAG,EAChCC,EAAU,GAAQC,EAAA,KAAK,GAAGD,CAAO,GAAG,EAEjCC,EAAK,KAAK,IAAI,CACvB,CAEO,SAASN,GAAgCO,EAA6B,CAC3E,GAAI,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,CAAQ,EAAIG,GAAcD,CAAmB,EACzD,OAAAL,GAAkBC,EAAMC,EAAOC,CAAO,CAC/C,CAQgB,SAAAJ,GAAkBJ,EAAmBC,EAAiB,CACpE,OAAKA,IAASA,EAAU,KAAK,QACrBA,EAAUD,GAAa,GACjC,CAEA,SAASW,GAAcD,EAA6B,CAClD,IAAIJ,EAAO,KAAK,MAAMI,EAAuB,KAAU,EACnDH,EAAQ,KAAK,MAAOG,GAAuB,GAAK,MAAS,IAAI,EAC7DF,EAAU,KAAK,MAAOE,EAAsB,KAAQ,EAAE,EACtDE,EAAU,KAAK,MAAMF,EAAsB,EAAE,EAE1C,MAAA,CACL,KAAAJ,EACA,MAAAC,EACA,QAAAC,EACA,QAAAI,CAAA,CAEJ,CCtIA,MAAMC,EAAa,IAAI,KAAK,aAEtBC,GAAiB,yBAEvB,IAAIC,EAAgB,CAClB,WAAY,GACZ,SAAU,GACV,OAAQ,GACR,QAAS,GACT,WAAY,EACd,EAIO,SAASC,GAAS3B,EAAmB,SAC1C,MAAM4B,EAAe,OAAO,aACtBvB,EAAY,OAAO,UAErB,IAAAwB,EAEJC,EAAU,IAAM,CACDF,EAAA,iBAAiB,mBAAoBG,CAAc,EAE/D,gBAAkB,CACjB,aAAM1B,EAAU,mBAEhBwB,EAAa,YAAY,SAAY,CACnC,MAAMxB,EAAU,kBAAiB,EAChC,GAAK,GAAI,EAEL,IAAM,CACX,cAAcwB,CAAU,CAAA,CAC1B,GAEJ,EAAG,CAAE,CAAA,EAEL,SAASG,EAAeC,EAAW,CACjC,IAAIC,EAAgB,KAQpB,OANID,EAAK,uBAAyB,GAC5BA,EAAK,cAAgB,IACvBA,EAAK,qBAAuB,GAIxBA,EAAK,qBAAsB,CACjC,IAAK,GAEDC,EAAAjC,EAAC,QAAK,UAAU,gBACb,WAAK,qBAAuB,EAAI,aAAe,UAClD,CAAA,EAEF,MACF,IAAK,GACH,IAAIkC,GACDF,EAAK,oBAAsBA,EAAK,YACjC,KACA,QAAQ,CAAC,EACAC,EAAA/B,EAAC,OAAK,CAAA,UAAU,gBAAiB,SAAA,CAAAgC,EAAgB,IAAE,CAAA,CAAA,EAC9D,MACF,IAAK,GACQD,EAAA,GACX,MACF,IAAK,IAEDA,EAAA/B,EAAC,OAAK,CAAA,UAAU,gBAAiB,SAAA,CAAK8B,EAAA,oBAAoB,IAAE,CAAA,CAAA,EAE9D,MACF,IAAK,GACL,QAEIC,EAAA/B,EAAC,OAAK,CAAA,UAAU,gBACb,SAAA,CAAWqB,EAAA,OAAOS,EAAK,mBAAmB,EAAE,KAAG,IAC/CT,EAAW,OAAOS,EAAK,WAAW,CACrC,CAAA,CAAA,EAEF,KACJ,CAEA,OAAO,OAAOA,EAAK,YAAgB,IAAchC,EAAAC,EAAA,CAAG,WAAS,EAAM,IACrE,CAEA,SAASkC,EAAeH,EAAW,CACjC,IAAII,EACF,OAAOJ,EAAK,KAAS,MAClB,MAAI,CAAA,UAAU,YAAY,IAAK,GAAGR,EAAc,GAAGQ,EAAK,IAAI,GAAI,EAC/D,KAEFK,EACF,OAAOL,EAAK,QAAY,IAEpB9B,EAAAD,EAAA,CAAA,SAAA,CAAAD,EAAC,KAAG,EAAA,EACJE,EAAC,IAAE,CAAA,MAAM,4BAA4B,SAAA,CAAA,WAC1BO,OAAmB,KAAQ,IAAI,KAAKuB,EAAK,OAAO,CAAC,CAAA,EAC5D,CAAA,CACF,CAAA,EACE,KAEFC,EAAWF,EAAeC,CAAI,EAGhC,OAAA9B,EAAC,MAAI,CAAA,UAAU,YACZ,SAAA,CAAAkC,EACDlC,EAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAA,EAAC,KACE,CAAA,SAAA,CAAK8B,EAAA,KACLC,CAAA,EACH,EACCD,EAAK,YACLK,CAAA,EACH,CACF,CAAA,CAAA,CAEJ,CAEA,eAAeP,EAAeQ,EAAuB,CAGnD,IAAIC,EAAgC,CAAA,EAEpC,QAASP,KAAQM,EAAO,CACtB,IAAIE,EAAU,GAEd,OAAQR,EAAK,KAAM,CACjB,IAAK,YACHQ,EAAUf,EAAc,WACxB,MACF,IAAK,QACHe,EAAUf,EAAc,OACxB,MACF,IAAK,SACHe,EAAUf,EAAc,SACxB,MACF,IAAK,kBACHe,EAAUf,EAAc,QACxB,MACF,IAAK,aACHe,EAAUf,EAAc,WACxB,KACJ,CAEIe,GACFD,EAAc,KAAKP,CAAI,CAG3B,CAEAjC,EAAM,MAAM,MAAQwC,CAEtB,CAGE,OAAAvC,EAAC,OAAI,UAAU,iBACZ,kBAAM,sBAAO,sBAAO,QAAS,EAC5BD,EAAM,MAAM,MAAM,IAAKiC,GAASG,EAAeH,CAAI,CAAC,EAElDhC,EAAAC,EAAA,CAAA,SAAA,aAAW,CAAA,CAEjB,CAAA,CAEJ,CCpKA,SAAwBwC,GAAU1C,EAAmB,CACnD,MAAMK,EAAY,OAAO,UAEzB,MAAI,CAACL,EAAM,gBAAgB,OAAS,CAACA,EAAM,aAAa,OACtD,SAAS,KAAO,IACPC,EAAAC,EAAA,CAAA,CAAA,IAGSG,EAAU,QAAQ,QAIlCJ,EAAAC,EAAA,CAAA,SAAAD,EAAC0B,GAAU,CAAA,GAAG3B,EAAO,CACvB,CAAA,EAEJ,CClBO,SAAS2C,IAAS,CAErB,OAAAxC,EAAC,SAAO,CAAA,UAAU,mBAAmB,SAAA,CAAA,SAElC,IAAI,KAAK,EAAE,eAAe,GAAK,KAC5B,MAAY,IAAA,KAAA,EAAO,eAAA,EACnB,KAAM,IAAI,mBAEhB,CAAA,CAAA,CAEJ,CCNA,SAAwByC,GAAU5C,EAAmB,CACnD,MAAMK,EAAY,OAAO,UAEnBuB,EAAe,OAAO,aAEfA,EAAA,iBAAiB,eAAiBiB,GAAc,CACrDA,GACJC,EAAeD,CAAI,CACrB,CACD,EAED,SAASC,EAAeC,EAAc,CAChC,IAAAC,EAAc,SAAS,eAAe,cAAc,EACpDA,IACFA,EAAY,UAAYD,EAE5B,CAGA,OAAA1C,EACG,qBAAqB,EACrB,KAAK,MAAO4C,GAAW,CACtB,GAAI,CAACA,EAAQ,CACX,SAAS,KAAO,IAChB,MACF,CAEArD,EAAI,QAAS,mCAAmC,EAEhDkD,EAAe,uBAAuB,EAClC,IAAAI,EAAkB,MAAM7C,EAAU,uBAElC,GAAA6C,GAAoB,KAAuC,CAC7DJ,EACE,0EAAA,EAEF,MACF,CAEAlD,EAAI,QAASsD,CAAe,EAE5BJ,EAAe,kCAAkC,EAE3C,MAAAK,EAAS,MAAM9C,EAAU,qBAE/B,GAAI8C,GAAU,CAACA,EAAO,QAAQ,SAAS,QAAS,CAE9CL,EACE,0EAAA,EAGF,WAAW,IAAM,CACf,SAAS,KAAO,KACf,GAAK,EAER,MACF,CAEAA,EAAe,sBAAsB,EAErC,MAAMzC,EAAU,yBAEhByC,EAAe,kCAAkC,EAEjD,IAAIM,EAAqB,MAAM/C,EAAU,uBAAuB,EAAK,EAEjE+C,EAAmB,OAAS,IAC9BN,EACE,eAAeM,EAAmB,MAAM,wBAAA,EAEpC,MAAA/C,EAAU,uBAAuB,EAAI,GAG7CyC,EAAe,iBAAiB,EAChC,MAAMzC,EAAU,sBAEhBL,EAAM,aAAa,MAAQ,GAE3B,WAAW,IAAM,CACf8C,EAAe,wBAAwB,EACvClB,EAAa,KAAK,kBAAkB,EAEpC,WAAW,IAAM,CACf,SAAS,KAAO,gBACf,GAAI,GACN,GAAI,CAAA,CACR,EACA,MAAM,MAAOyB,GAAU,CAClBA,EAAM,SAAW,KAEnBP,EAAe,2CAA2C,EAC1D,WAAW,IAAM,CACf,SAAS,KAAO,KACf,GAAK,IAERA,EACE,6DAAA,EAGF,QAAQ,MAAMO,CAAK,EACnB,QAAQ,MAAM,MAAMA,EAAM,KAAM,CAAA,EAClC,CACD,EAGDpD,EAAAC,EAAA,CACE,WAAC,OAAK,CAAA,MAAM,WAAW,GAAG,eAAe,0CAEzC,CAAA,CACF,CAAA,CAEJ,CCnHO,SAASoD,IAAS,CACvB,OAAQrD,EAAA,SAAA,CAAO,UAAU,mBAAmB,SAAS,WAAA,CAAA,CACvD,CCUO,SAASsD,IAAM,CACd,MAAAC,EAAQC,EAAW,OAAO,QAAQ,EACxC,OAEItD,EAAAD,EAAA,CAAA,SAAA,CAAAD,EAACqD,GAAO,EAAA,EACRrD,EAAC,OAAI,MAAM,MACT,WAACyD,EAAO,CAAA,QAASC,IACf,SAAA,CAACzD,EAAAA,EAAA,CAAS,KAAK,IACb,WAACH,EAAU,CAAA,GAAGyD,EAAO,CACvB,CAAA,IACCtD,EAAA,CAAS,KAAK,iBACb,SAAAD,EAACG,GAAc,CAAA,EACjB,EACAH,EAACC,EAAA,CAAS,KAAK,cACb,SAACD,EAAA2C,GAAA,CAAW,GAAGY,CAAA,CAAO,CACxB,CAAA,EACAvD,EAACC,EAAA,CAAS,KAAK,aACb,SAACD,EAAAyC,GAAA,CAAW,GAAGc,CAAA,CAAO,CACxB,CAAA,CAAA,CAAA,CACF,CACF,CAAA,IACCb,GAAO,EAAA,CACV,CAAA,CAAA,CAEJ,CCnCO,MAAMiB,EAAiB,CAuB5B,aAAc,CAtBdC,EAAA,mBACAA,EAAA,2BACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,uBAKAA,EAAA,wBAIAA,EAAA,uBAKAA,EAAA,wBACAA,EAAA,0BAEE,KAAK,WAAa,KAElB,KAAK,mBAAqB,gBAAkB,CAC1C,OAAO,IAAI,QAAc,CAACC,EAASC,IAAW,CAC5C,IAAIC,EAAY,OAAO,UAAU,KAAK,qBAAsB,CAAC,EAEnDA,EAAA,gBAAkB,SAAUC,EAAO,CAC3C,MAAMC,EAAKF,EAAU,OAErBpE,EAAI,KAAM,MAAOqE,EAAM,WAAY,MAAOA,EAAM,UAAU,EACtDA,EAAM,WAAa,IACrBrE,EACE,KACA,kFAAA,EAEoBsE,EAAG,kBAAkB,UAAW,CACpD,cAAe,GACf,QAAS,KAAA,CACV,EAEa,YAAY,SAAU,KAAK,GAEvCD,EAAM,WAAa,IACrBrE,EAAI,KAAM,qDAAqD,EAEnCsE,EAAG,kBAAkB,iBAAkB,CACjE,cAAe,GACf,QAAS,KAAA,CACV,EAEmB,YAAY,SAAU,KAAK,EAElBA,EAAG,kBAC9B,kBACA,CACE,cAAe,GACf,QAAS,KACX,CAAA,EAGmB,YAAY,SAAU,KAAK,EAClD,EAGQF,EAAA,UAAY,SAAU,EAAQ,CACtCpE,EAAI,KAAM,iBAAiB,EACtBuE,EAAA,WAAa,EAAE,OAAO,OAEnBL,GAAA,EAGAE,EAAA,QAAU,SAAUC,EAAO,CACnCrE,EAAI,KAAM,yBAAyB,EACnCmE,EAAOE,CAAK,CAAA,CACd,CACD,CAAA,EAGY,eAAAG,EAASC,EAAmBC,EAAaC,EAAY,CAClE,OAAO,IAAI,QAAc,CAACT,EAASC,IAAW,CAMtC,MAAAS,EALcL,EAAK,WAAY,YACnCE,EACA,WAAA,EAE8B,YAAYA,CAAS,EACzB,IAAI,CAC9B,IAAAC,EACA,MAAAC,CAAA,CACD,EAEDC,EAAQ,UAAY,UAAY,CACtBV,GAAA,EAGFU,EAAA,QAAU,SAAUP,EAAO,CACjCF,EAAOE,CAAK,CAAA,CACd,CACD,CACH,CAEe,eAAAQ,EAAkBJ,EAAmBK,EAAS,KAAM,CACjE,OAAO,IAAI,QAAQ,CAACZ,EAASC,IAAW,CAGhC,MAAAS,EAFcL,EAAK,WAAY,YAAYE,EAAW,UAAU,EACtC,YAAYA,CAAS,EACzB,SAE5BG,EAAQ,UAAY,UAAY,CAC9B,MAAMvB,EAASuB,EAAQ,OAGbV,EADNY,EACMzB,EAAO,OAAOyB,CAAM,EAEpBzB,CAFqB,CAG/B,EAGMuB,EAAA,QAAU,SAAUP,EAAO,CACjCF,EAAOE,CAAK,CAAA,CACd,CACD,CACH,CAEA,eAAeU,EACbN,EACAC,EACAM,EAA2B,KAC3B,CACA,OAAO,IAAI,QAAQ,CAACd,EAASC,IAAW,CAGhC,MAAAS,EAFcL,EAAK,WAAY,YAAYE,EAAW,UAAU,EACtC,YAAYA,CAAS,EACzB,IAAIC,CAAG,EAE3BE,EAAA,UAAY,SAAUP,EAAY,CACpCA,EAAM,OAAO,OACPH,EAAAG,EAAM,OAAO,OAAO,KAAK,EAEjCH,EAAQc,CAAY,CACtB,EAGMJ,EAAA,QAAU,SAAUP,EAAO,CACjCF,EAAOE,CAAK,CAAA,CACd,CACD,CACH,CAEe,eAAAY,EAAYR,EAAmBC,EAAa,CACzD,OAAO,IAAI,QAAc,CAACR,EAASC,IAAW,CAMtC,MAAAS,EALcL,EAAK,WAAY,YACnCE,EACA,WAAA,EAE8B,YAAYA,CAAS,EACzB,OAAOC,CAAG,EAEtCE,EAAQ,UAAY,UAAY,CACtBV,GAAA,EAGFU,EAAA,QAAU,SAAUP,EAAO,CACjCF,EAAOE,CAAK,CAAA,CACd,CACD,CACH,CAEK,KAAA,QAAU,eAAgBK,EAAaC,EAAY,CACtD,OAAO,MAAMH,EAAS,UAAWE,EAAKC,CAAK,CAAA,EAGxC,KAAA,SAAW,eAAgBO,EAAsC,CACpE,QAASC,KAAQD,EACf,MAAMV,EAAS,UAAWW,EAAK,IAAKA,EAAK,KAAK,CAChD,EAGF,KAAK,QAAU,eACbT,EACAM,EAA2B,KAC3B,CACA,OAAO,MAAMD,EAAS,UAAWL,EAAKM,CAAY,CAAA,EAG/C,KAAA,WAAa,eAAgBN,EAAa,CACtC,OAAA,MAAMO,EAAY,UAAWP,CAAG,CAAA,EAGzC,KAAK,eAAiB,eACpBU,EACAV,EACAC,EACA,CACA,OAAO,MAAMH,EAASY,EAAaV,EAAKC,CAAK,CAAA,EAG1C,KAAA,gBAAkB,eACrBS,EACAF,EACA,CACA,QAASC,KAAQD,EACf,MAAMV,EAASY,EAAaD,EAAK,IAAKA,EAAK,KAAK,CAClD,EAGF,KAAK,eAAiB,eACpBC,EACAV,EACAM,EAAe,KACf,CACA,OAAO,MAAMD,EAASK,EAAaV,EAAKM,CAAY,CAAA,EAGtD,KAAK,gBAAkB,eAAgBI,EAAqBN,EAAS,KAAM,CAClE,OAAA,MAAMD,EAAkBO,EAAaN,CAAM,CAAA,EAG/C,KAAA,kBAAoB,eAAgBM,EAAqBV,EAAa,CAClE,OAAA,MAAMO,EAAYG,EAAaV,CAAG,CAAA,EAG3C,IAAIH,EAAO,KAEJ,OAAA,IACT,CACF,CC7NO,MAAMc,EAAa,CAIxB,aAAc,CAHdpB,EAAA,uBACAA,EAAA,yBACAA,EAAA,aAEE,YAAK,eAAiB,GAOjB,KAAA,iBAAmB,SACtBqB,EACAC,EACA,CACAvF,EAAI,mBAAoBsF,CAAS,EACjC,KAAK,eAAe,KAAK,CAAE,UAAAA,EAAsB,QAASC,EAAc,CAAA,EAQrE,KAAA,KAAO,eAAgBD,KAAsBpF,EAAe,CAI/D,OAHmB,KAAK,MACrB,MAAM,OAAO,GAAG,QAAQ,cAAc,GAAM,OAAA,EAGzCF,EAAA,iBAAkBsF,EAAW,GAAGpF,CAAM,EAE1CF,EAAI,iBAAkBsF,CAAS,EAE1B,IAAI,QAAQ,CAACpB,EAASC,IAAW,CACjC,KAAA,eACF,OAAQqB,GAAOA,EAAG,WAAaF,CAAS,EACxC,QAAQ,MAAOG,GAAM,CAChB,GAAA,CACI,MAAAA,EAAE,QAAQ,GAAGvF,CAAM,QAClBwF,EAAG,CACN1F,EAAA,cAAesF,EAAWI,CAAC,EAC/B,QAAQ,MAAMA,CAAC,EACfvB,EAAOuB,CAAC,CACV,CAAA,CACD,EAEHxB,EAAQ,EAAI,CAAA,CACb,CAAA,EAGHlE,EAAI,eAAgB,aAAa,EAE1B,IACT,CACF,CC9DY,IAAA2F,GAAAA,IACVA,EAAAA,EAAA,KAAO,CAAP,EAAA,OACAA,EAAAA,EAAA,OAAS,CAAT,EAAA,SACAA,EAAAA,EAAA,QAAU,CAAV,EAAA,UACAA,EAAAA,EAAA,WAAa,CAAb,EAAA,aACAA,EAAAA,EAAA,QAAU,CAAV,EAAA,UACAA,EAAAA,EAAA,qBAAuB,EAAvB,EAAA,uBANUA,IAAAA,GAAA,CAAA,CAAA,ECQL,MAAMC,EAAc,CAgBzB,YAAYC,EAAsC,CAflD5B,EAAA,0BAKAA,EAAA,+BAIAA,EAAA,yBACAA,EAAA,oBACAA,EAAA,kBACAA,EAAA,4BACAA,EAAA,yBAQE,KAAK,iBAAmB4B,EAExB,KAAK,kBAAoB,SACvBC,EACAC,EACAC,EACgB,CAChB,IAAIC,EACFH,EAAY,qBAAqB,aAC/BE,EAAqB,qBACvB,EACEE,EACFJ,EAAY,qBAAqB,aAC/BE,EAAqB,uBACvB,EAEEG,EACF,KAAK,iBAAiB,sBACnB,+BAA+BJ,EAAiB,gBAAgB,EAEjEK,EAAaH,EAAe,MAC5BI,EAAcJ,EAAe,YAC7BK,EAAsBL,EAAe,oBAErC,OAAAA,EAAe,OAASA,EAAe,WACzCG,GAAcF,EAA0B,MACxCG,GAAeH,EAA0B,YACzCI,GAAuBJ,EAA0B,qBAGV,CACvC,KAAM,eAAeE,CAAU,GAC/B,YAAaL,EAAiB,kBAAkB,KAChD,KAAM,GAAGI,EAAmB,kBAAkB,IAAI,GAClD,UAAWJ,EAAiB,UAC5B,QAASA,EAAiB,QAC1B,YAAAM,EACA,oBAAAC,EACA,KAAM,aACN,MAAO,GACP,qBAAsB,EACtB,oBAAqB,CAAA,CAEhB,EAGJ,KAAA,uBAAyB,SAAUC,EAAQC,EAA0B,CACxE,GAAI,CAACD,GAAUA,EAAO,QAAQ,OAAO,IAAM,GAAW,OAAAA,EACtD,IAAIE,EAAa,eAEbC,EAAaH,EAAO,MAAME,CAAU,EAExC,IAAIE,EAAYJ,EAEhB,GAAIG,EACF,QAASE,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IAAK,CACtC,IAAAC,EAAQH,EAAWE,CAAC,EACpBE,EAASD,EAAM,MAAM,KAAK,EAC9B,GAAIC,EAAQ,CACN,IAAAC,EAAkBD,EAAO,CAAC,EAC1BE,EAAcR,EAAiBO,CAAU,EAEzCC,IACUL,EAAAA,EAAU,QAAQE,EAAOG,CAAW,EAEpD,CACF,CAGK,OAAAL,CAAA,EAGJ,KAAA,iBAAmB,SAAUb,EAAkC,CAClE,IAAImB,EAAqC,CAAA,EAErCC,EAAgB,OAAO,KACzBpB,EAAY,qBAAqB,UAAA,EAGnC,QAASqB,KAAgBD,EAAe,CACtC,IAAIE,EACFtB,EAAY,qBAAqB,WAAWqB,CAAY,EAEtDE,EAAuC,CACzC,KAAM,KAAK,uBACTD,EAAU,cACVtB,EAAY,uBAAuB,mBACrC,EACA,YAAa,KAAK,uBAChBsB,EAAU,qBACVtB,EAAY,uBAAuB,mBACrC,EACA,MAAOsB,EAAU,MACjB,KAAMA,EAAU,cAChB,KAAM,YACN,qBAAsB,EACtB,oBAAqB,CAAA,EAWvB,GARIA,EAAU,YACZC,EAAkB,UAAYD,EAAU,WAGtCA,EAAU,UACZC,EAAkB,QAAUD,EAAU,SAGpCA,EAAU,iBAAmBA,EAAU,gBAAgB,OAAS,GACzD,QAAAE,KAASF,EAAU,gBAI1B,GAHIE,EAAM,UACRD,EAAkB,QAAU,IAE1BC,EAAM,OAAO,SAAW,CAACA,EAAM,OAAO,WAEtCA,EAAM,OAAO,gBACbA,EAAM,OAAO,eAAe,OAAS,GAE5B,QAAAC,KAAQD,EAAM,OAAO,eACxB,GAAA,CAACC,EAAK,SAAU,CACd,OAAOA,EAAK,SAAa,MAC3BF,EAAkB,oBAAsBE,EAAK,UAG3C,OAAOA,EAAK,gBAAoB,MAClCF,EAAkB,YAAcE,EAAK,iBAIrC,OAAOA,EAAK,8BAAkC,MAE9CF,EAAkB,qBAChBE,EAAK,+BAIP,OAAOA,EAAK,6BAAiC,MAE7CF,EAAkB,oBAChBE,EAAK,+BAINF,EAAkB,MAAQ,IAAI,QAAU,GACzC,OAAOE,EAAK,aAAiB,MAE7BF,EAAkB,KAAOE,EAAK,cAGhC,KACF,GAOV,GAAIH,EAAU,YAAcA,EAAU,WAAW,OAAS,EAC/C,QAAAI,KAAYJ,EAAU,WAAY,CACzC,GAAII,EAAS,YAAcA,EAAS,WAAW,OAAS,GAC7C,QAAAC,KAAaD,EAAS,WACzB,GAAA,CAACC,EAAU,UAAU,SAAU,CAC7B,OAAOA,EAAU,UAAU,SAAa,MACxBJ,EAAA,oBAChBI,EAAU,UAAU,UAItB,OAAOA,EAAU,8BACjB,MAEAJ,EAAkB,qBAChBI,EAAU,+BAIZ,OAAOA,EAAU,6BACjB,MAEAJ,EAAkB,oBAChBI,EAAU,8BAIZ,OAAOA,EAAU,UAAU,gBAAoB,MAE7BJ,EAAA,YAChBI,EAAU,UAAU,iBAGxB,KACF,EAGJ,KACF,CAGFR,EAAc,KAAKI,CAAiB,CACtC,CAEO,OAAAJ,CAAA,EAGT,MAAMS,EAAiB,GAElB,KAAA,YAAc,SAAU5B,EAA+B,CAC1D,IAAI6B,EAA+B,CAAA,EAE/B,IAAAC,EAAc9B,EAAY,mBAAmB,OAC9CX,GAAcA,EAAK,wBAA0BuC,CAAA,EAGhD,QAASG,KAAUD,EAAa,CAK9B,IAAIE,EAHFhC,EAAY,eAAe,WAAW,KAAK+B,EAAO,cAAc,EAC7D,WAEgC,OAClCE,GAAa,CAACA,EAAI,QAAA,EAIrB,GAAID,EAAgB,SAAW,EAE/B,QAASE,KAAaF,EAAiB,CACrC,IAAIG,EAAiC,CACnC,KAAM,KAAK,uBACTJ,EAAO,kBACP/B,EAAY,uBAAuB,mBACrC,EACA,YAAa,KAAK,uBAChB+B,EAAO,yBACP/B,EAAY,uBAAuB,mBACrC,EACA,MAAO,IACP,KAAM+B,EAAO,kBACb,KAAM,SACN,qBAAsB,EACtB,oBAAqB,EACrB,SAAUA,EAAO,MAAQlC,EAAU,UAAYA,EAAU,QACzD,MAAOkC,EAAO,KAAA,EAGZ,OAAOA,EAAO,eAAmB,MACnCI,EAAe,QAAUJ,EAAO,eAI9B,IAAI,KAAKA,EAAO,cAAc,EAAE,QAAQ,EAAQ,IAAA,OAAO,YAMvD,OAAOG,EAAU,gBAAoB,MACvCC,EAAe,YAAcD,EAAU,gBAGrC,OAAOA,EAAU,8BAAkC,MAEnDC,EAAe,qBACbD,EAAU,+BAGV,OAAOA,EAAU,6BAAiC,MACpDC,EAAe,oBACbD,EAAU,8BAGV,OAAOA,EAAU,SAAa,MAChCC,EAAe,oBAAsBD,EAAU,UAG7C,OAAOA,EAAU,6BAAiC,MAEpDC,EAAe,YAAc,KAAK,uBAChCD,EAAU,6BACVlC,EAAY,uBAAuB,mBAAA,GAIvC6B,EAAW,KAAKM,CAAc,EAElC,CACF,CAEO,OAAAN,CAAA,EAGT,MAAMO,EAAkB,WAEnB,YAAA,UAAY,SAAUpC,EAA8B,CACvD,IAAIqC,EAA6B,CAAA,EAE7B,IAAAC,EAAatC,EAAY,mBAAmB,OAC7CX,GACCA,EAAK,aAAe+C,GACpB,CAACR,CAAc,EAAE,OAAQ,GAAM,GAAKvC,EAAK,qBAAqB,EAC3D,OAAS,CAAA,EAGhB,IAAIkD,EAAsBD,EAAW,OAClCjD,GAAc,OAAOA,EAAK,eAAmB,GAAA,EAG5CmD,EAAwBF,EAAW,OACpCjD,GAAc,OAAOA,EAAK,eAAmB,GAAA,EAGhD,QAASoD,KAAiBF,EAAqB,CAC7C,IAAIG,EACF1C,EAAY,eAAe,WAAW,KACpCyC,EAAc,cAChB,EAEF,GAAIC,EAAgB,CACZ,MAAAC,EAAcD,EAAe,WAAW,OAC3CR,GAAmBA,EAAU,SAAW,CAACA,EAAU,QAAA,EAGtD,QAASA,KAAaS,EAAa,CACjC,IAAIC,EAA+B,CACjC,KAAM,KAAK,uBACTH,EAAc,kBACdzC,EAAY,uBAAuB,mBACrC,EACA,YAAa,KAAK,uBAChByC,EAAc,yBACdzC,EAAY,uBAAuB,mBACrC,EACA,MAAO,IACP,KAAMyC,EAAc,kBACpB,KAAM,QACN,qBAAsB,EACtB,oBAAqB,EACrB,SACGA,EAAc,MAAQ5C,EAAU,UAAYA,EAAU,QACzD,MAAO4C,EAAc,KAAA,EAGnB,OAAOP,EAAU,gBAAoB,MACvCU,EAAc,YAAcV,EAAU,gBAGpC,OAAOA,EAAU,8BAAkC,MAEnDU,EAAc,qBACZV,EAAU,+BAIZ,OAAOA,EAAU,6BAAiC,MAElDU,EAAc,oBACZV,EAAU,8BAGV,OAAOA,EAAU,SAAa,MAChCU,EAAc,oBAAsBV,EAAU,UAI9C,OAAOA,EAAU,6BAAiC,MAGlDU,EAAc,YAAc,KAAK,uBAC/BV,EAAU,6BACVlC,EAAY,uBAAuB,mBAAA,GAIvCqC,EAAU,KAAKO,CAAa,EAEhC,CACF,CACF,CAEA,QAASC,KAAoBL,EAAuB,CAClD,IAAIM,GACF9C,EAAY,qBAAqB,0BAC/B6C,EAAiB,QACnB,GAAK,CACL,GAAA,OAAQX,GAAmBA,EAAU,SAAW,CAACA,EAAU,QAAQ,EAErE,QAASA,KAAaY,EAAiB,CACrC,IAAIF,EAA+B,CACjC,KAAM,KAAK,uBACTC,EAAiB,kBACjB7C,EAAY,uBAAuB,mBACrC,EACA,YAAa,KAAK,uBAChB6C,EAAiB,yBACjB7C,EAAY,uBAAuB,mBACrC,EACA,MAAO,IACP,KAAM6C,EAAiB,kBACvB,KAAM,QACN,qBAAsB,EACtB,oBAAqB,EACrB,SACGA,EAAiB,MAAQhD,EAAU,UAAYA,EAAU,QAC5D,MAAOgD,EAAiB,KAAA,EAGtB,OAAOX,EAAU,gBAAoB,MACvCU,EAAc,YAAcV,EAAU,gBAGpC,OAAOA,EAAU,8BAAkC,MAEnDU,EAAc,qBACZV,EAAU,+BAGV,OAAOA,EAAU,6BAAiC,MACpDU,EAAc,oBACZV,EAAU,8BAGV,OAAOA,EAAU,SAAa,MAChCU,EAAc,oBAAsBV,EAAU,UAG5C,OAAOA,EAAU,6BAAiC,MAEpDU,EAAc,YAAc,KAAK,uBAC/BV,EAAU,6BACVlC,EAAY,uBAAuB,mBAAA,GAIvCqC,EAAU,KAAKO,CAAa,EAEhC,CACF,CAEO,OAAAP,CAAA,EAGJ,KAAA,oBAAsB,SACzBrC,EAC2B,CAC3B,IAAI+C,EAA8C,CAAA,EAE9CC,EAAsB,OAAO,KAC/BhD,EAAY,iBAAiB,OAAA,EAE/B,QAASpB,KAAOoE,EAAqB,CACnC,IAAIC,EAAkBjD,EAAY,iBAAiB,QAAQpB,CAAG,EAC9D,GACE,OAAOqE,EAAgB,WAAe,MACrCA,EAAgB,YAAc,IAAI,SAAW,EAE9C,SAEE,IAAAC,EAAmBD,EAAgB,WAAW,OAC/Cf,GAAmBA,EAAU,SAAW,CAACA,EAAU,QAAA,EAGtD,QAASA,KAAagB,EAAkB,CACtC,IAAIC,EAA+C,CACjD,KAAMF,EAAgB,WACtB,KAAM,kBACN,MAAO,IACP,KAAMA,EAAgB,WAEtB,YAAa,GAAGf,EAAU,8BAAgC,EAAE,GAC5D,oBAAqBA,EAAU,SAC/B,YAAaA,EAAU,gBACvB,qBAAsBA,EAAU,8BAChC,oBAAqBA,EAAU,6BAC/B,MAAOe,EAAgB,KAAA,EAGzBF,EAAiB,KAAKI,CAAmB,CAC3C,CACF,CAEO,OAAAJ,CAAA,EAGF,IACT,CACF,CC5fO,MAAMK,EAAkB,CAmD7B,YAAYC,EAAkBC,EAAiB,CAlD/CnF,EAAA,6BACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,6BAIAA,EAAA,+BAGAA,EAAA,+BACAA,EAAA,4BACAA,EAAA,oBAGAA,EAAA,2BACAA,EAAA,qBACAA,EAAA,0BACAA,EAAA,uBAIAA,EAAA,+BACAA,EAAA,2BAGAA,EAAA,oCACAA,EAAA,uCACAA,EAAA,yBACAA,EAAA,2BAWAA,EAAA,iBACAA,EAAA,wBACAA,EAAA,uBACAA,EAAA,8BACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,uBACAA,EAAA,qBACAA,EAAA,gBAGEoF,EAAK,cAAc,EAEnB,MAAM/E,EAAK,OAAO,GACZtC,EAAe,OAAO,aAEtBsH,EAAiB,2BACjBzH,EAAiB,yBACjB0H,EAAgB,kCAOhBC,EAAmB,CACvB,gCACA,4BACA,4BACA,6BACA,yBACA,+BACA,8BACA,2BACA,0BACA,gCACA,gCACA,mCACA,iCACA,6BACA,0BACA,6BACA,6BACA,yBACA,oCACA,+BACA,wBACA,0BACA,0BACA,8BACA,wBACA,wBAAA,EAGIC,EAAoB,CACxB,KAAM,EACN,SAAU,IACV,eAAgB,IAChB,mBAAoB,IACpB,kBAAmB,IACnB,mBAAoB,IACpB,eAAgB,IAChB,WAAY,IACZ,qBAAsB,IACtB,sBAAuB,IACvB,oBAAqB,IACrB,oBAAqB,IACrB,mBAAoB,IACpB,kBAAmB,IACnB,cAAe,IACf,eAAgB,IAChB,UAAW,IACX,eAAgB,IAChB,UAAW,IACX,YAAa,IACb,gBAAiB,IACjB,eAAgB,IAChB,eAAgB,IAChB,mBAAoB,IACpB,kBAAmB,IACnB,QAAS,IACT,iBAAkB,IAClB,YAAa,IACb,OAAQ,IACR,gBAAiB,IACjB,kBAAmB,IACnB,aAAc,IACd,QAAS,IACT,WAAY,IACZ,QAAS,KACT,gBAAiB,KACjB,WAAY,KACZ,oBAAqB,IAAA,EAUvB,KAAK,YAAc,KACnB,KAAK,gBAAkBL,EACvB,KAAK,SAAWD,EAChB,KAAK,sBAAwB,GAC7B,KAAK,aAAe,GAEpB,SAASE,KAAQnJ,EAAe,CAC9BF,EAAI,QAASE,CAAM,CACrB,CAEA,eAAewJ,EACbC,EACAjJ,EACAkJ,EAAmB,KACnBC,EAA4B,KAC5B,CACA,IAAIC,EAAkC,CAAA,EAUtC,OARIF,IAAS,MAAQC,IAAkB,QACrCC,EAAQ,cAAc,EAAI,mBAClBA,EAAA,WAAW,EAAIvF,EAAK,SACxBsF,IAAkB,OACZC,EAAA,cAAgB,UAAUD,CAAa,KAI/CD,IAAS,KACJ,MAAM,MAAMlJ,EAAK,CACtB,OAAAiJ,EACA,QAAAG,EACA,KAAAF,CAAA,CACD,EAEM,MAAM,MAAMlJ,EAAK,CACtB,OAAAiJ,EACA,QAAAG,CAAA,CACD,CAEL,CAEA,eAAeC,GAAwB,CAChB,MAAMzF,EAAG,QAAQ,qBAAqB,EAExC,KAAK,QACtB+E,EAAK,2BAA2B,EAChC,MAAM9E,EAAK,eAEf,CAEA,SAASyF,EAAoBC,EAAoB,CAE/C,GAAIA,EAAc,MAChB,OAAAZ,EAAK,uBAAwB,KAAK,UAAUY,CAAa,CAAC,EAE1D3F,EAAG,WAAW,cAAc,EAC5BA,EAAG,WAAW,qBAAqB,EACnCA,EAAG,WAAW,qBAAqB,EACnCA,EAAG,WAAW,4BAA4B,EAC1CA,EAAG,WAAW,2BAA2B,EAElC,GAINA,EAAA,QAAQ,eAAgB2F,EAAc,YAAY,EAClD3F,EAAA,QAAQ,sBAAuB2F,EAAc,aAAa,EAG7D,IAAIC,EAAe,KAAK,IAAI,EAAID,EAAc,WAAa,IACxD3F,EAAA,QAAQ,sBAAuB4F,CAAY,EAG9C,IAAIC,EACF,KAAK,IAAI,EAAIF,EAAc,mBAAqB,IAC/C,OAAA3F,EAAA,QAAQ,6BAA8B6F,CAAmB,EAGzD7F,EAAA,QAAQ,4BAA6B2F,EAAc,aAAa,EAE5D,EACT,CAEA,KAAK,oBAAsB,SAAY,CACrCZ,EAAK,2BAA2B,EAEhC,IAAIe,EAAkB,MAAM9F,EAAG,QAAQ,UAAU,EAC7C8F,IAAoB,OACjB7F,EAAA,eAAiB,KAAK,MAAM6F,CAAe,GAGlD,IAAIC,EAAyB,MAAM/F,EAAG,QAAQ,iBAAiB,EAC3D+F,IAA2B,OAC7B9F,EAAK,YAAc8F,GAGrB9F,EAAK,uBAAuB,EAE5B,QAAS+F,KAAYd,EAAkB,CACrC,IAAIe,EAAc,MAAMjG,EAAG,QAAQ,kBAAkBgG,CAAQ,EAAE,EAC3DC,IAAgB,OAClBhG,EAAK,sBAAsB+F,CAAQ,EAAI,KAAK,MAAMC,CAAW,EAEjE,CAEA,IAAIC,EAAW,MAAMlG,EAAG,QAAQ,iBAAiB,EAC7CkG,IAAa,OACVjG,EAAA,QAAU,KAAK,MAAMiG,CAAQ,GAGpC,IAAIC,EAAkB,MAAMnG,EAAG,QAAQ,wBAAwB,EAC3DmG,IAAoB,OACjBlG,EAAA,eAAiB,KAAK,MAAMkG,CAAe,GAGlDpB,EAAK,0BAA0B,EAC/BrH,EAAa,KAAK,qBAAqB,CAAA,EAGzC,KAAK,qBAAuB,SAAY,CAClC,GAAA,CACF,MAAM+H,EAAsB,EAC5B,MAAMW,EAAmB,MAAMpG,EAAG,QAAQ,cAAc,IAAO,KAClD,OAAAtC,EAAA,KAAK,yBAA0B0I,CAAe,EACpDA,QACAhF,EAAG,CACV,OAAA2D,EAAK,kCAAmC3D,CAAC,EAC5B1D,EAAA,KAAK,yBAA0B,EAAK,EAC1C,EACT,CAAA,EAGG,KAAA,SAAW,MAAO4B,EAAehD,IAAiB,CACrD,MAAM+J,EAAe,MAAMjB,EACzB,OACA,GAAGJ,CAAc,UAAU/E,EAAK,eAAe,GAC/C,KAAK,UAAU,CACb,KAAA3D,CAAA,CACD,CAAA,EAGC,GAAA+J,EAAa,SAAW,IAAK,CAC3B,IAAAV,EAAgB,MAAMU,EAAa,OAEnC,OAAAX,EAAoBC,CAAa,EACnCjI,EAAa,KAAK,uBAAuB,EAEzCA,EAAa,KAAK,sBAAsB,EAEnCiI,CACT,CACAZ,EACE,sBACAsB,EAAa,OACbA,EAAa,WACb,MAAMA,EAAa,KAAK,CAAA,EAE1B3I,EAAa,KAAK,sBAAsB,CAAA,EAG1C,KAAK,aAAe,SAAY,CAC9B,MAAM4I,EAAe,MAAMtG,EAAG,QAAQ,qBAAqB,EAC3D,GAAIsG,GAAgB,KACL,OAAA5I,EAAA,KAAK,wBAAyB,IAAI,EACxC,KAGT,MAAM2I,EAAe,MAAMjB,EACzB,OACA,GAAGJ,CAAc,YAAY/E,EAAK,eAAe,GACjD,KAAK,UAAU,CACb,cAAeqG,CAAA,CAChB,CAAA,EAGC,GAAAD,EAAa,SAAW,IAAK,CAC3B,IAAAV,EAAgB,MAAMU,EAAa,OAEnCX,EAAoBC,CAAa,EACnCjI,EAAa,KAAK,0BAA0B,EAE5CA,EAAa,KAAK,yBAAyB,EAG7C,MAAA,MAEAA,EAAa,KAAK,yBAAyB,CAC7C,EAGF,KAAK,qBAAuB,UAC1BqH,EAAK,2BAA2B,EACzB,IAAI,QAAQ,eAAgBnF,EAASC,EAAQ,CAC9C,IAAA0G,EAAW,MAAMtG,EAAK,cAE1B,GAAIsG,GAAY,KACd,OAAAxB,EAAK,qBAAqB,EACnB,KAGT,IAAIyB,EAAe,MAAMxG,EAAG,QAAQ,iBAAiB,GAAM,OAEvD,GAAAuG,EAAS,SAAS,UAAYC,EAAa,CAEvC,MAAAxG,EAAG,WAAW,oBAAoB,EAClC,MAAAA,EAAG,WAAW,UAAU,EACxB,MAAAA,EAAG,WAAW,iBAAiB,EAErC,QAASgG,KAAYd,EACnB,MAAMlF,EAAG,WAAW,kBAAkBgG,CAAQ,EAAE,EAGlD/F,EAAK,eAAiBsG,EAAS,SAE/B,MAAMvG,EAAG,QAAQ,kBAAmBuG,EAAS,SAAS,OAAO,EAC7D,MAAMvG,EAAG,QAAQ,WAAY,KAAK,UAAUC,EAAK,cAAc,CAAC,EAChE,MAAMD,EAAG,QAAQ,qBAAsB,KAAK,IAAK,CAAA,EAEjDJ,EAAQ,CAAE,gBAAiB,GAAM,QAASK,EAAK,YAAa,EAC5D8E,EAAK,kBAAkB,EACvB,MACF,CAEA9E,EAAK,eAAiBsG,EAAS,SAE/B3G,EAAQ,CAAE,gBAAiB,GAAO,QAASK,EAAK,YAAa,EAC7D8E,EAAK,gCAAgC,CAAA,CACtC,GAGE,KAAA,uBAAyB,eAC5B0B,EAA6B,GAC7B,CACA,IAAIvH,EAA+B,CAAA,EAEnC,QAAS8G,KAAYd,EACR,MAAMlF,EAAG,QAAQ,kBAAkBgG,CAAQ,EAAE,IAC3C,MACX9G,EAAmB,KAAK8G,CAAQ,EAIhC,GAAA9G,EAAmB,OAAS,GAAKuH,EAA4B,CAC/D,QAAST,KAAY9G,EACnB,MAAMc,EAAG,WAAW,kBAAkBgG,CAAQ,EAAE,EAG5C,MAAA/F,EAAK,uBAAuBf,CAAkB,CACtD,CAEO,OAAAA,CAAA,EAGT,KAAK,uBAAyB,eAAgBwH,EAAwB,GAAI,CACxE,QAASV,KAAYU,EAAa,CAChC,IAAIC,EAAU,GACVC,EAAW,EACXC,EAAY,KACT,KAAA,CAACF,GAAWC,EAAW,GACxB,GAAA,CACF,MAAME,EAA2Bd,CAAQ,EAC/BW,EAAA,SACHpK,EAAK,CAKZ,GAJYsK,EAAAtK,EAEZ,MAAMyD,EAAG,WAAW,kBAAkBgG,CAAQ,EAAE,EAChDY,IACIA,EAAW,EAAG,CAEhB,MAAMG,EAAO,IAAM,KAAK,IAAI,EAAGH,EAAW,CAAC,EAC3C,MAAM,IAAI,QAASI,GAAQ,WAAWA,EAAKD,CAAI,CAAC,CAClD,CACF,CAEGJ,GACHjJ,EAAa,KAAK,gBAAiB,CACjC,SAAAsI,EACA,MAAOa,EACP,QAAS,kBAAkBb,CAAQ,oBAAA,CACpC,CAEL,CAAA,EAGF,eAAec,EAA2Bd,EAAkB,CAC1D,IAAIO,EAAWtG,EAAK,eAEd,MAAAgH,EAAgBjB,EACnB,QAAQ,UAAW,EAAE,EACrB,MAAM,WAAW,EACjB,KAAK,GAAG,EAEXtI,EAAa,KAAK,eAAgB,WAAWuJ,CAAa,EAAE,EAE5D,MAAMC,EAAsB,MAAM9B,EAChC,MACA,GAAG7H,CAAc,GAAGgJ,EAAS,+BAA+B,GAAGP,CAAQ,CAAC,EAAA,EAGpDkB,EAAoB,QAAQ,IAAI,gBAAgB,EAGtE,IAAIC,EAAS,EAEb,MAAMH,EAAM,IAAI,SACd,IAAI,eAAe,CACjB,MAAM,MAAMI,EAAY,CAChB,MAAAC,EAASH,EAAoB,KAAM,UAAU,EAEnD,IAAII,EAAqB,EAChB,OAAA,CACH,IAAAC,EAAI,MAAMF,EAAQ,OACtB,GAAIE,EAAG,KACL,MAEFJ,GAAUI,EAAG,MAAM,WAEnBD,IACIA,EAAqB,KAAO,GACjB5J,EAAA,KACX,eACA,WAAWuJ,CAAa,KAAK,IAAI,KAAK,aACpC,OAAA,EACA,OACA,KAAK,MACFE,EAAS,KAAS,KAAU,IAAM,OAAO,OAAA,EACxC,GACL,CAAA,MAAA,EAGMC,EAAA,QAAQG,EAAG,KAAK,CAC7B,CAEa7J,EAAA,KACX,eACA,WAAWuJ,CAAa,KAAK,IAAI,KAAK,aACpC,OAAA,EACA,OACA,KAAK,MAAOE,EAAS,KAAS,KAAU,IAAM,OAAO,OAAO,EAC1D,GACH,CAAA,MAAA,EAEHC,EAAW,MAAM,CACnB,CAAA,CACD,CAAA,EAGC,GAAAF,EAAoB,SAAW,IAAK,CACtCxL,EAAI,0BAA2B,MAAMsL,EAAI,KAAM,CAAA,EAC/C,MACF,CAEM,MAAAQ,EAAkB,MAAMR,EAAI,OAE7B/G,EAAA,sBAAsB+F,CAAQ,EAAIwB,EACvCxH,EAAG,QAAQ,kBAAkBgG,CAAQ,GAAI,KAAK,UAAUwB,CAAe,CAAC,CAC1E,CAEA,KAAK,YAAc,gBAET,CACR,IAAIC,EAAqB,MAAMzH,EAAG,QAAQ,oBAAoB,EAG9D,GAFA+E,EAAK,gCAAgC,EAGnC0C,IAAuB,MACvB,KAAK,MAAQA,EAAqB,IAAQ,GAC1C,CACA,IAAIC,EAAY,MAAM1H,EAAG,QAAQ,UAAU,EAC3C,GAAI0H,IAAc,KAChB,OAAA3C,EAAK,oBAAoB,EAClB,CAAE,SAAU,KAAK,MAAM2C,CAAS,CAAE,CAE7C,CAEA,IAAIC,EAAkB,MAAMvC,EAC1B,MACA,GAAGH,CAAa,qBAAA,EAGd,GAAA0C,EAAgB,SAAW,IAAK,CAC9B,IAAApB,EAAW,MAAMoB,EAAgB,OACjC,OAAApB,EAAS,aAAe,WAC1BvG,EAAG,QAAQ,qBAAsB,KAAK,IAAK,CAAA,EAC3CA,EAAG,QAAQ,WAAY,KAAK,UAAUuG,EAAS,QAAQ,CAAC,EACxDxB,EAAK,2BAA2B,EAEzB,CAAE,SAAUwB,EAAS,YAE5BxB,EAAK,eAAe,EACpBA,EAAKwB,EAAS,QAAQ,EAEf,KACT,KACK,CACD,IAAAqB,EAAeD,EAAgB,OACnC,OAAA5C,EAAK,8BAA8B,EACnCA,EAAK6C,CAAY,EAEV,IACT,CAAA,EAGF,KAAK,mBAAqB,gBAAkB,CAC1C,MAAMnC,EAAsB,EAE5B,MAAMoC,EAAW,MAAMzC,EACrB,MACA,GAAGH,CAAa,YAChB,KACA,MAAM,KAAK,aAAa,CAAA,EAEtB,OAAA4C,EAAS,SAAW,IACf,MAAMA,EAAS,QAGxB9C,EACE,iCACA8C,EAAS,OACTA,EAAS,UAAA,EAEJ,KAAA,EAGT,KAAK,aAAe,gBAAkB,CAC7B,OAAA,MAAM7H,EAAG,QAAQ,cAAc,CAAA,EAGnC,KAAA,kBAAoB,eAAgB8H,EAAwB,GAAO,CAKlE,OAJAA,IACF7H,EAAK,eAAiB,MAGpBA,EAAK,gBAAkB,KAClBA,EAAK,gBAGd,MAAMwF,EAAsB,EAErB,IAAI,QAAQ,MAAO7F,EAASC,IAAW,CAC5C,IAAIkI,EAAe,MAAM/H,EAAG,QAAQ,2BAA2B,EAE/D,IAAIgI,EAAgB,MAAM5C,EACxB,MACA,GAAGH,CAAa,wBAAwB8C,CAAY,mBACpD,KACA,MAAM,KAAK,aAAa,CAAA,EAGtB,GAAAC,EAAc,SAAW,IAAK,CAC5B,IAAAC,EAAW,MAAMD,EAAc,OAEhChI,EAAA,QACD,yBACA,KAAK,UAAUiI,EAAS,QAAQ,CAAA,EAGlChI,EAAK,eAAiBgI,EAAS,SAE/BrI,EAAQqI,EAAS,QAAQ,CAAA,MAEzBhI,EAAK,aAAa,EAClBJ,EAAOmI,CAAa,CACtB,CACD,EAAA,EAGE,KAAA,eAAiB,eACpBE,EACAC,EACA,CACA,IAAIC,EAAwB,CAC1BjD,EAAkB,SAClBA,EAAkB,mBAClBA,EAAkB,kBAClBA,EAAkB,mBAClBA,EAAkB,WAClBA,EAAkB,qBAClBA,EAAkB,sBAClBA,EAAkB,oBAClBA,EAAkB,mBAClBA,EAAkB,cAClBA,EAAkB,eAClBA,EAAkB,YAClBA,EAAkB,gBAClBA,EAAkB,eAClBA,EAAkB,eAClBA,EAAkB,mBAClBA,EAAkB,kBAClBA,EAAkB,QAClBA,EAAkB,QAClBA,EAAkB,aAClBA,EAAkB,eAAA,EAGpB,aAAMM,EAAsB,EAErB,IAAI,QAAQ,MAAO7F,EAASC,IAAW,CAC5C,IAAIwI,EAAc,MAAMjD,EACtB,MACA,GAAGH,CAAa,aAAakD,CAAc,YAAYD,CAAY,gBAAgBE,EAAsB,KACvG,GAAA,CACD,GACD,KACA,MAAM,KAAK,aAAa,CAAA,EAEtB,GAAAC,EAAY,SAAW,IAAK,CAC1B,IAAAC,EAAU,MAAMD,EAAY,OAG9B,OAAOpI,EAAK,QAAW,KACvB,IAAI,KAAKA,EAAK,QAAQ,uBAAuB,EAAE,QAAQ,EACrD,IAAI,KAAKqI,EAAQ,SAAS,uBAAuB,EAAE,WAErDtI,EAAG,QAAQ,kBAAmB,KAAK,UAAUsI,EAAQ,QAAQ,CAAC,EAC9DrI,EAAK,QAAUqI,EAAQ,SAEvB1I,EAAQ0I,EAAQ,QAAQ,GAExB1I,EAAQK,EAAK,OAAO,CACtB,MAEAA,EAAK,aAAa,EAClBJ,EAAOwI,CAAW,CACpB,CACD,CAAA,EAGE,KAAA,uBAAyB,eAAgBP,EAAe,GAAO,CAClE,MAAMrC,EAAsB,EAE5B,IAAIS,EAAWjG,EAAK,QAgBhB,GAbF,OAAOiG,EAAa,MACf,IAAA,OAAO,QAAQ,EAClB,IAAI,KAAKA,EAAS,uBAAuB,EAAE,QAAQ,GACnD,IACA,KAEa4B,EAAA,IAGbA,IACS5B,EAAA,MAGTjG,EAAK,iBAAmB,KACnB,OAAA,KAMP,GAHI,MAAAA,EAAK,kBAAkB6H,CAAY,EAGvC7H,EAAK,iBAAmB,MACxBA,EAAK,eAAe,WAAa,MACjCA,EAAK,eAAe,SAAS,OAAS,EACtC,CACI,IAAAsI,EAAoBtI,EAAK,eAAe,SAAS,KACnD,CAACuI,EAAQC,IAAYD,EAAE,eAAiBC,EAAE,eAAiB,GAAK,GAChE,CAAC,EAEHvC,EAAW,MAAMjG,EAAK,eACpBsI,EAAkB,aAClBA,EAAkB,cAAA,CAEtB,CAEA,IAAIG,EAAa,CAAA,EAEjB,QAASC,KAAQzC,EAAS,QAAQ,KAAK,aACrCwC,EAAW,KAAKxC,EAAS,WAAW,KAAKyC,CAAI,CAAC,EAGhD,IAAIC,EAAQF,EAAW,KAAK,CAACF,EAAGC,IAC9BD,EAAE,eAAiBC,EAAE,eAAiB,GAAK,GAC3C,CAAC,EAuCI,MArCmB,CACxB,cAAeG,EACf,qBAAyB1C,EAAS,sBAAsB,SAEpD,CAAC,EADDA,EAAS,sBAAsB,KAAK0C,EAAM,WAAW,EAEzD,oBAAwB1C,EAAS,oBAAoB,SAEjD,CAAC,EADDA,EAAS,oBAAoB,KAAK0C,EAAM,WAAW,EAEvD,mCACE1C,EAAS,mCAAmC0C,EAAM,WAAW,EAC1D,WAAW,KAChB,mBACE1C,EAAS,qBAAqB,KAAK0C,EAAM,WAAW,EAAE,MACxD,mBACE1C,EAAS,mBAAmB,KAAK0C,EAAM,WAAW,EAAE,MACtD,kBAAsB1C,EAAS,kBAAkB,SAE7C,CAAC,EADDA,EAAS,kBAAkB,KAAK0C,EAAM,WAAW,EAAE,MAEvD,sBACE1C,EAAS,sBAAsB,KAAK0C,EAAM,WAAW,EAAE,aACzD,iBAAkB1C,EAAS,iBAAiB,KAAK0C,EAAM,WAAW,EAClE,yBACE1C,EAAS,yBAAyB,KAAK0C,EAAM,WAAW,EAC1D,mBAAoB1C,EAAS,mBAAmB,KAChD,QAASA,EAAS,QAAQ,KAAK,QAC/B,eAAgBA,EAAS,eACzB,QAASA,EAAS,eAAe,KACjC,iBAAkBA,EAAS,iBAAiB,KAAK,MACjD,gBAAiBA,EAAS,kBAAkB,KAAK,MACjD,gBAAoBA,EAAS,gBAAgB,SAEzC,CAAC,EADDA,EAAS,gBAAgB,KAAK,MAElC,oBAAqBA,EAAS,oBAAoB,KAClD,QAASA,EAAS,QAAQ,KAC1B,uBAAwBA,EAAS,uBAAuB,IAAA,CAGnD,EAGJ,KAAA,mBAAqB,eACxB4B,EAAe,GACqB,CACpC,IAAIe,EAAc,MAAM5I,EAAK,uBAAuB6H,CAAY,EAEhE,GAAIe,GAAe,KACV,OAAA,KAGT,IAAIC,EAAkB,CACpB,GAAGD,CAAA,EAGL,QAASE,KAAW,OAAO,KAAKD,EAAgB,cAAc,KAAK,EACjDA,EAAA,cAAc,MAAMC,CAAO,EAAI,CAC7C,UAAWD,EAAgB,cAAc,MAAMC,CAAO,EACtD,SAAUA,CAAA,EAId,QAASC,KAAa,OAAO,KAAKF,EAAgB,OAAO,EACvCA,EAAA,QAAQE,CAAS,EAAI,CACnC,GAAGF,EAAgB,QAAQE,CAAS,EACpC,WAAYA,CAAA,EAIhB,QAASC,KAAa,OAAO,KAAKH,EAAgB,QAAQ,OAAO,EAC/CA,EAAA,QAAQ,QAAQG,CAAS,EAAI,CAC3C,GAAGH,EAAgB,QAAQ,QAAQG,CAAS,EAC5C,WAAYA,EACZ,iBACEhJ,EAAK,sBAAsB,wBAAwBgJ,CAAS,EACzD,gBAAA,EAIT,QAASA,KAAa,OAAO,KAC3BH,EAAgB,iBAAiB,OAAA,EAEjBA,EAAA,iBAAiB,QAAQG,CAAS,EAAI,CACpD,GAAGH,EAAgB,iBAAiB,QAAQG,CAAS,EACrD,WAAYA,EACZ,iBACEhJ,EAAK,sBAAsB,wBAAwBgJ,CAAS,EACzD,gBAAA,EAIS,OAAAH,EAAA7I,EAAK,+BAA+B6I,CAAe,EAEhD,MAAM9I,EAAG,QAAQ,4BAA6B,EAAK,GAEhD6I,EAAY,mBAAmB,OAClDvG,GAAWA,EAAE,UAAYA,EAAE,uBAAyB,CAAA,EAGrC,OAAS,EAUhB5E,EAAA,KAAK,sBAAuBoL,CAAe,EAEjDA,CAAA,EAGJ,KAAA,4BAA8B,SAAUI,EAAc,CACzD,MAAMC,EAAwB,CAAA,EAExBC,EACJnJ,EAAK,sBAAsB,kCAAkCiJ,CAAI,EACnE,GAAIE,IACFD,EAAsB,QAAQ,CAC5B,KAAMC,EAAiB,kBAAkB,KACzC,YAAaA,EAAiB,kBAAkB,YAChD,KAAMA,EAAiB,kBAAkB,KACzC,KAAAF,CAAA,CACD,EAEGE,EAAiB,kBACV,QAAAC,KAASD,EAAiB,iBAAkB,CAC7C,MAAAE,EAAWrJ,EAAK,4BAA4BoJ,CAAK,EACvD,QAASxI,KAAQyI,EACfH,EAAsB,KAAKtI,CAAI,CAEnC,CAIG,OAAAsI,CAAA,EAGJ,KAAA,+BAAiC,SAAUI,EAAa,CACvD,IAAAC,EAAc,CAAE,GAAGD,GAEnBE,EAAO,OAAO,KAAKD,CAAW,EAClC,QAASpJ,KAAOqJ,EAAM,CAChB,IAAAC,EAAQ,OAAOF,EAAYpJ,CAAG,EAC9BuJ,EAASH,EAAYpJ,CAAG,EAExB,GAAA,MAAM,QAAQuJ,CAAM,EAAG,CACzB,QAASC,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAAK,CAClC,IAAAC,EAAUF,EAAOC,CAAC,EAClB,OAAOC,GAAY,SACrBF,EAAOC,CAAC,EAAI3J,EAAK,+BAA+B4J,CAAO,EAEvDF,EAAOC,CAAC,EAAIC,CAEhB,CACAL,EAAYpJ,CAAG,EAAIuJ,CACV,SAAAD,IAAU,UAAYC,IAAW,KAC9BH,EAAApJ,CAAG,EAAIH,EAAK,+BACtBuJ,EAAYpJ,CAAG,CAAA,MAEZ,CACD,GAAAA,EAAI,QAAQ,MAAM,EAAI,IAAM,CAAC,MAAM,QAAQuJ,CAAM,EAAG,CAClD,IAAAG,EAAY1J,EACb,MAAM,MAAM,EAAE,CAAC,EACf,QAAQ,UAAW,EAAE,EACrB,YAAY,EAEf,OAAQ0J,EAAW,CACjB,IAAK,OACL,IAAK,WACSA,EAAA,gBACZ,KACJ,CAEA,IAAI9D,EAAWd,EAAiB,KAC7B5C,GACCA,EAAE,eAAiB,UAAUwH,CAAS,aAAa,YAAY,CAAA,EAE/DC,EAAiB9J,EAAK,sBAAsB+F,CAAS,EACzD,GACE+D,GACAA,EAAeJ,CAAM,GACrBI,EAAeJ,CAAM,EAAE,kBACvB,CACM,MAAAK,EAASD,EAAeJ,CAAM,EAElCK,EAAO,kBAAkB,MACzBA,EAAO,kBAAkB,KAAK,OAAS,EAEvCR,EAAY,GAAGM,CAAS,MAAM,EAAIE,EAAO,kBAAkB,KAE3DA,EAAO,SACPA,EAAO,QAAQ,eACfA,EAAO,QAAQ,cAAc,OAAS,IAEtCR,EAAY,GAAGM,CAAS,MAAM,EAAIE,EAAO,QAAQ,eAIjDA,EAAO,kBAAkB,aACzBA,EAAO,kBAAkB,YAAY,OAAS,IAE9CR,EAAY,GAAGM,CAAS,aAAa,EACnCE,EAAO,kBAAkB,aAI3BA,EAAO,kBAAkB,MACzBA,EAAO,kBAAkB,KAAK,OAAS,IAEvCR,EAAY,GAAGM,CAAS,MAAM,EAAIE,EAAO,kBAAkB,MAI3DA,EAAO,qBACPA,EAAO,oBAAoB,OAAS,IAEpCR,EAAY,GAAGM,CAAS,qBAAqB,EAC3CE,EAAO,qBAGP,OAAOA,EAAO,qBAAyB,MACzCR,EAAY,GAAGM,CAAS,sBAAsB,EAC5CE,EAAO,sBAGP,OAAOA,EAAO,oBAAwB,MACxCR,EAAY,GAAGM,CAAS,qBAAqB,EAC3CE,EAAO,qBAGP,OAAOA,EAAO,SAAa,MAC7BR,EAAY,GAAGM,CAAS,UAAU,EAAIE,EAAO,UAG3C,OAAOA,EAAO,iBAAqB,MACzBR,EAAA,iBAAsBQ,EAAO,iBAAiB,IACvDnJ,GACQZ,EAAK,4BAA4BY,CAAI,CAC9C,EAGN,CACF,CAEA2I,EAAYpJ,CAAG,EAAIuJ,CACrB,CACF,CAEO,OAAAH,CAAA,EAGJ,KAAA,iBAAmB,eACtB1B,EAAe,GACiB,CAChC,IAAItG,EAAc,MAAMvB,EAAK,mBAAmB6H,CAAY,EAE5D,GAAItG,GAAe,KACV,OAAA,KAGT,IAAIC,EACFxB,EAAK,sBAAsB,wBACzBuB,EAAY,QAAQ,iBACtB,EAEEyI,EAAoBxI,EAAiB,eAAe,KACrDa,GACK,IAAA,KAAS,IAAI,KAAK,KAAK,MAAMA,EAAE,iBAAiB,CAAC,GACrD,IAAI,MAAU,IAAI,KAAK,KAAK,MAAMA,EAAE,mBAAmB,CAAC,CAAA,EAGxDZ,EACFzB,EAAK,sBAAsB,4BACzBgK,EAAkB,cACpB,EAEEC,EAAqC,CAAA,EAErCvH,EAAgB1C,EAAK,QAAQ,iBAAiBuB,CAAW,EAC7D,QAASsB,KAAaH,EACpBuH,EAAmB,KAAKpH,CAAS,EAGnC,IAAIO,EAAapD,EAAK,QAAQ,YAAYuB,CAAW,EACrD,QAAS+B,KAAUF,EACjB6G,EAAmB,KAAK3G,CAAM,EAGhC,IAAIM,EAAY5D,EAAK,QAAQ,UAAUuB,CAAW,EAClD,QAASwB,KAASa,EAChBqG,EAAmB,KAAKlH,CAAK,EAG/B,IAAIuB,EAAmBtE,EAAK,QAAQ,oBAAoBuB,CAAW,EAEnE,QAASiD,KAAmBF,EAC1B2F,EAAmB,KAAKzF,CAAe,EAGhC,SAAA0F,EAAmB3B,EAAQC,EAAQ,CAC1C,GACE,OAAOD,EAAE,YAAgB,KACzB,OAAOC,EAAE,YAAgB,IACzB,CACA,IAAI2B,EAAa5B,EAAE,oBAAsBA,EAAE,YAAe,IACtD6B,EAAa5B,EAAE,oBAAsBA,EAAE,YAAe,IAEnD,OAAA2B,EAAYC,EAAY,EAAI,EACrC,CAEI,OAAA,OAAO7B,EAAE,QAAY,IAChB,OAAOC,EAAE,QAAY,KAAeD,EAAE,QAAUC,EAAE,QACrD,GACA,EAGCD,EAAE,MAAQC,EAAE,MAAQ,EAAI,EACjC,CAEM,MAAA6B,EAAeJ,EAClB,OAAQ5H,GAAMA,EAAE,OAAO,EACvB,KAAK6H,CAAkB,EAEpBI,EAAsBL,EACzB,OAAQ5H,GAAMA,EAAE,SAAW,CAACA,EAAE,OAAO,EACrC,KAAK6H,CAAkB,EACpBK,EAAyBN,EAC5B,OAAQ5H,GAAM,CAACA,EAAE,SAAW,CAACA,EAAE,OAAO,EACtC,KAAK6H,CAAkB,EAEL,OAAAD,EAAA,CACnB,GAAGI,EACH,GAAGC,EACH,GAAGC,CAAA,EAGcN,EAAA,QACjBjK,EAAK,QAAQ,kBACXuB,EACAC,EACAC,CACF,CAAA,EAGFzB,EAAK,aAAeiK,EACPxM,EAAA,KAAK,mBAAoBwM,CAAkB,EAEjDA,CAAA,EAGT,KAAK,mBAAqB,gBAAkB,CAC1CnF,EAAK,yBAAyB,EAGxB,MAAA9F,EAAS,MAFO,MAAMmG,EAAQ,MAAO,GAAGH,CAAa,YAAY,GAEpC,OAE7BwF,EAAU,CAAC,aAAc,wBAAyB,UAAU,EAE5DC,EAEF,CAAA,EAEJ,QAASC,KAAUF,EACbxL,EAAO,SAAS,QAAQ0L,CAAM,IAChCD,EAAeC,CAAM,EAAI1L,EAAO,SAAS,QAAQ0L,CAAM,GAIpD,MAAA,CACL,qBAAsB1L,EAAO,SAAS,qBACtC,QAAS,CACP,SAAUyL,EAAe,SACzB,WAAYA,EAAe,WAC3B,sBAAuBA,EAAe,qBACxC,CAAA,CACF,EAGF,IAAIzK,EAAO,KAEN,YAAA,QAAU,IAAIqB,GAAc,IAAI,EAErCyD,EAAK,aAAa,EACX,IACT,CACF,CClkCArJ,EAAI,OAAQ,iBAAiB,EAE7B,OAAO,aAAe,IAAIqF,GAC1B,OAAO,GAAK,IAAIrB,GAChB,OAAO,UAAY,IAAIkF,GACrB,mCACA,eACF,EAEA,SAASgG,IAA6B,CAC9B,MAAAC,EAAeC,EAAO,EAAK,EAC3B1E,EAAkB0E,EAAO,EAAK,EAC9BzM,EAAQyM,EAAO,CAAA,CAAE,EAEhB,MAAA,CACL,aAAAD,EACA,gBAAAzE,EACA,MAAA/H,CAAA,CAEJ,CAEA,MAAMiB,EAAQsL,GAAe,EAE7B,OAAO,SAAWG,EAAczL,CAAK,EACrC,OAAO,GAAG,qBAAqB,KAAK,SAAY,CAC9C5D,EAAI,OAAQ,+CAA+C,EAE3D4D,EAAM,gBAAgB,MAAQ,MAAM,OAAO,UAAU,uBAErD0L,IAAQ3L,GAAI,CAAA,CAAA,EAAI,SAAS,eAAe,KAAK,CAAgB,CAC/D,CAAC"}