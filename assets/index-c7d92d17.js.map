{"version":3,"file":"index-c7d92d17.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/scripts/utils.ts","../../src/components/goalList.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/pages/logging-in.tsx","../../src/components/header.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClasses/itemState.ts","../../src/scripts/destiny2Goals.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","import { D2AppState } from \"../classes/appState\";\n\nexport default function MainPage(props: D2AppState) {\n  if (props.isAuthenticated) {\n    location.href = \"/#/logging-in\";\n    return <></>;\n  }\n\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }\n      >\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/logging-in\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","/**\n * Shortens the text if it's longer than the max length\n * @param {string} string\n * @param {number} maxLength\n * @returns {string}\n */\nexport function shorten(string: string, maxLength: number): string {\n  if (string.length > maxLength) {\n    return string.substring(0, maxLength).trim() + \" ...\";\n  }\n\n  return string;\n}\n\n/**\n * Sorts a the dictionary you send, based on the property (numbers)\n * @param {Object} dictionary\n * @param {String} property The property in the dictionary to sort on\n * @param {Boolean} ascending Sort ascending or descending (Default descending)\n */\nexport function sortDictionaryByProperty(\n  dictionary: any,\n  property: string,\n  ascending: boolean\n) {\n  let items = Object.keys(dictionary).map(function (key) {\n    return [key, dictionary[key]];\n  });\n\n  items.sort(function (first, second) {\n    if (ascending) return first[1][property] - second[1][property];\n    return second[1][property] - first[1][property];\n  });\n\n  return items;\n}\n\nexport function sortDictionaryByPropertyAlphabetically(\n  dictionary: any,\n  property: string,\n  ascending: boolean\n) {\n  let internal = sortDictionaryByProperty(dictionary, property, ascending);\n\n  var keys = internal.map((v) => v[0]).sort();\n\n  let newItems = [];\n  for (let key of keys) {\n    newItems.push([key, internal.filter((v) => v[0] == key)[0][1]]);\n  }\n\n  return newItems;\n}\n\n/**\n * Outputs a date in YYYY-MM-DD format\n * @param {Date} date\n */\nexport function formatDate(date: Date) {\n  let retVal = \"\";\n\n  retVal += date.getFullYear() + \"-\";\n  if (date.getMonth() + 1 < 10) {\n    retVal += \"0\";\n  }\n  retVal += date.getMonth() + 1 + \"-\";\n\n  if (date.getDate() < 10) {\n    retVal += \"0\";\n  }\n  retVal += date.getDate();\n\n  return retVal;\n}\n\n/**\n *\n * @param {Date} startDate\n * @param {Date} endDate\n * @param {Boolean} latestSession\n * @returns {String}\n */\nexport function formatTimespan(\n  startDate: any,\n  endDate: any,\n  latestSession = false\n) {\n  if (!latestSession && !endDate) return `Unknown, no end time`;\n  return outputTimesObjectFromDifference(getTimeDifference(startDate, endDate));\n}\n\n/**\n *\n * @param {Number} days\n * @param {Number} hours\n * @param {Number} minutes\n * @param {Number} seconds\n * @returns {String}\n */\nexport function outputTimesObject(\n  days: number,\n  hours: number,\n  minutes: number\n) {\n  let time = [];\n\n  if (days > 0) time.push(`${days}d`);\n  if (hours > 0) time.push(`${hours}h`);\n  if (minutes > 0) time.push(`${minutes}m`);\n\n  return time.join(\", \");\n}\n\nexport function outputTimesObjectFromDifference(differenceInSeconds: number) {\n  let { days, hours, minutes } = getTimeObject(differenceInSeconds);\n  return outputTimesObject(days, hours, minutes);\n}\n\n/**\n *\n * @param {Date} startDate\n * @param {Date} endDate\n * @returns {Number}\n */\nexport function getTimeDifference(startDate: number, endDate: number) {\n  if (!endDate) endDate = Date.now();\n  return (endDate - startDate) / 1000;\n}\n\nfunction getTimeObject(differenceInSeconds: number) {\n  let days = Math.floor(differenceInSeconds / (24 * 3600));\n  let hours = Math.floor((differenceInSeconds % (24 * 3600)) / 3600);\n  let minutes = Math.floor((differenceInSeconds % 3600) / 60);\n  let seconds = Math.floor(differenceInSeconds % 60);\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n  };\n}\n\n/**\n *\n * @param {Number} count\n * @param {String} singular\n * @param {String} plural\n * @returns {String} pluralized string\n */\nexport function pluralize(count: number, singular: string, plural: string) {\n  return `${count} ${count === 1 ? singular : plural}`;\n}\n\n/**\n * Method copied from Stackoverflow (https://stackoverflow.com/a/8809472/1025823)\n * @returns {string} Returns a UUIDv4\n */\nexport function generateUUID() {\n  // Public Domain/MIT\n  var d = new Date().getTime(); //Timestamp\n  var d2 = (performance && performance.now && performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","import { useSignal } from \"@preact/signals\";\nimport { GoalDataItem } from \"../scripts/apiClasses/goalDataItem\";\nimport { formatTimespan } from \"../scripts/utils\";\nimport \"../styles/components/goalList.scss\";\nimport { D2AppState } from \"../classes/appState\";\n\nconst intlFormat = new Intl.NumberFormat();\n\nconst destinyBaseUrl = \"https://www.bungie.net\";\nvar visibleItems = 15;\nvar trackingItems = {\n  milestones: true,\n  bounties: true,\n  quests: true,\n  records: true,\n  seasonRank: true,\n};\n\nvar cachedGoals: GoalDataItem[] = [];\n\nexport function GoalList(props: D2AppState) {\n  const eventEmitter = window.eventEmitter;\n  const db = window.db;\n  const apiClient = window.apiClient;\n\n  eventEmitter.addEventListener(\"goal-list-update\", updateGoalList);\n\n  eventEmitter.addEventListener(\"tracked-items-changed\", async () => {\n    trackingItems = {\n      milestones: JSON.parse((await db.getItem(\"d2-track-milestones\")) ?? true),\n      bounties: JSON.parse((await db.getItem(\"d2-track-bounties\")) ?? true),\n      quests: JSON.parse((await db.getItem(\"d2-track-quests\")) ?? true),\n      records: JSON.parse((await db.getItem(\"d2-track-records\")) ?? true),\n      seasonRank: JSON.parse((await db.getItem(\"d2-track-seasonrank\")) ?? true),\n    };\n\n    if (cachedGoals && cachedGoals.length > 0) {\n      updateGoalList(cachedGoals);\n    }\n  });\n\n  eventEmitter.addEventListener(\"visible-items-changed\", (items: any) => {\n    visibleItems = items;\n\n    if (cachedGoals && cachedGoals.length > 0) {\n      updateGoalList(cachedGoals);\n    }\n  });\n\n  (async function () {\n    await loadSettings();\n    await apiClient.getTrackableData();\n  })();\n\n  function renderProgress(goal: any) {\n    let progress: any = null;\n\n    if (goal.inProgressValueStyle === 0) {\n      if (goal.nextLevelAt === 1) {\n        goal.inProgressValueStyle = 2;\n      }\n    }\n\n    switch (goal.inProgressValueStyle) {\n      case 2:\n        progress = (\n          <span className=\"goal-progress\">\n            {goal.progressToNextLevel == 0 ? \"Incomplete\" : \"Complete\"}\n          </span>\n        );\n        break;\n      case 3:\n        let progressPercent = (\n          (goal.progressToNextLevel / goal.nextLevelAt) *\n          100\n        ).toFixed(0);\n        progress = <span className=\"goal-progress\">{progressPercent} %</span>;\n        break;\n      case 8:\n        progress = \"\";\n        break;\n      case 12:\n        progress = (\n          <span className=\"goal-progress\">{goal.progressToNextLevel} %</span>\n        );\n        break;\n      case 6:\n      default:\n        progress = (\n          <span className=\"goal-progress\">\n            {intlFormat.format(goal.progressToNextLevel)} /{\" \"}\n            {intlFormat.format(goal.nextLevelAt)}\n          </span>\n        );\n        break;\n    }\n\n    return typeof goal.nextLevelAt !== \"undefined\" ? <>{progress}</> : null;\n  }\n\n  function renderGoalItem(goal: any) {\n    let icon =\n      typeof goal.icon !== \"undefined\" ? (\n        <img className=\"goal-icon\" src={`${destinyBaseUrl}${goal.icon}`} />\n      ) : null;\n\n    let expiryDate =\n      typeof goal.endDate !== \"undefined\" ? (\n        <>\n          <br />\n          <i class=\"fui body fiction goal-end\">\n            Ends in {formatTimespan(new Date(), new Date(goal.endDate))}\n          </i>\n        </>\n      ) : null;\n\n    let progress = renderProgress(goal);\n\n    return (\n      <div className=\"goal-item\">\n        {icon}\n        <div className=\"goal-body\">\n          <h5>\n            {goal.name}\n            {progress}\n          </h5>\n          {goal.description}\n          {expiryDate}\n        </div>\n      </div>\n    );\n  }\n\n  async function updateGoalList(goals: GoalDataItem[]) {\n    let goalsVisible = 0;\n\n    let _visibleGoals: GoalDataItem[] = [];\n\n    for (let goal of goals) {\n      if (visibleItems > 0 && goalsVisible >= visibleItems) {\n        break;\n      }\n\n      let addGoal = true;\n\n      switch (goal.type) {\n        case \"milestone\":\n          addGoal = trackingItems.milestones;\n          break;\n        case \"quest\":\n          addGoal = trackingItems.quests;\n          break;\n        case \"bounty\":\n          addGoal = trackingItems.bounties;\n          break;\n        case \"characterRecord\":\n          addGoal = trackingItems.records;\n          break;\n        case \"seasonrank\":\n          addGoal = trackingItems.seasonRank;\n          break;\n      }\n\n      if (addGoal) {\n        _visibleGoals.push(goal);\n        goalsVisible++;\n      }\n    }\n\n    props.goals.value = _visibleGoals;\n    cachedGoals = goals;\n  }\n\n  async function loadSettings() {\n    visibleItems = parseInt((await db.getItem(\"d2-visible-items\")) ?? 0);\n\n    trackingItems = {\n      milestones: JSON.parse((await db.getItem(\"d2-track-milestones\")) ?? true),\n      bounties: JSON.parse((await db.getItem(\"d2-track-bounties\")) ?? true),\n      quests: JSON.parse((await db.getItem(\"d2-track-quests\")) ?? true),\n      records: JSON.parse((await db.getItem(\"d2-track-records\")) ?? true),\n      seasonRank: JSON.parse((await db.getItem(\"d2-track-seasonrank\")) ?? true),\n    };\n  }\n\n  return (\n    <div className=\"goal-container\">\n      {props.goals?.value?.length > 0 ? (\n        props.goals.value.map((goal) => renderGoalItem(goal))\n      ) : (\n        <>Loading ...</>\n      )}\n    </div>\n  );\n}\n","import { D2AppState } from \"../classes/appState\";\nimport { GoalList } from \"../components/goalList\";\n\nexport default function Dashboard(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  if (!props.isAuthenticated.value || !props.isDataLoaded.value) {\n    location.href = \"/\";\n    return <></>;\n  }\n\n  const userProfile = apiClient.profile.profile;\n\n  return (\n    <>\n      <GoalList {...props} />\n    </>\n  );\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      © 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Signal } from \"@preact/signals\";\nimport { log } from \"../scripts/log\";\nimport { D2AppState } from \"../classes/appState\";\n\nexport default function LoggingIn(props: D2AppState) {\n  const apiClient = window.apiClient;\n\n  const eventEmitter = window.eventEmitter;\n\n  eventEmitter.addEventListener(\"loading-text\", (data: any) => {\n    if (!!data) {\n      setLoadingText(data);\n    }\n  });\n\n  function setLoadingText(text: string) {\n    let loadingText = document.getElementById(\"loading-text\");\n    if (loadingText) {\n      loadingText.innerText = text;\n    }\n  }\n\n  // Check if the user has a valid token and/or is authenticated, if not, redirect to the main page so they can login\n  apiClient.checkIfAuthenticated().then(async (result) => {\n    if (!result) {\n      location.href = \"/\";\n      return;\n    }\n\n    log(\"LOGIN\", \"Authenticated, checking manifests\");\n\n    setLoadingText(\"Checking manifest ...\");\n    let manifestVersion = await apiClient.checkManifestVersion();\n\n    if (manifestVersion === null || manifestVersion === undefined) {\n      setLoadingText(\n        \"Something is wrong with Destiny 2 (or this app), please reload the page.\"\n      );\n      return;\n    }\n\n    log(\"LOGIN\", manifestVersion);\n\n    setLoadingText(\"Loading profile data\");\n\n    await apiClient.getLastPlayedCharacter();\n\n    setLoadingText(\"Checking for missing definitions\");\n\n    let missingDefinitions = await apiClient.checkStoredDefinitions(false);\n\n    if (missingDefinitions.length > 0) {\n      setLoadingText(\n        `Downloading ${missingDefinitions.length} missing definition(s)`\n      );\n      await apiClient.checkStoredDefinitions(true);\n    }\n\n    setLoadingText(\"Loading data...\");\n    await apiClient.loadDataFromStorage();\n\n    props.isDataLoaded.value = true;\n\n    setTimeout(() => {\n      setLoadingText(\"Opening application...\");\n      eventEmitter.emit(\"manifests-loaded\");\n\n      setTimeout(() => {\n        location.href = \"/#/dashboard\";\n      }, 1000);\n    }, 1000);\n  });\n\n  return (\n    <>\n      <span class=\"fui body\" id=\"loading-text\">\n        Logging in and loading data ...\n      </span>\n    </>\n  );\n}\n","export function Header() {\n  return <header className=\"header subscreen\">Dataverse</header>;\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\nimport LoggingIn from \"./pages/logging-in\";\nimport { useContext } from \"preact/hooks\";\nimport { Header } from \"./components/header\";\n\nexport function App() {\n  const state = useContext(window.appState);\n  return (\n    <>\n      <Header />\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage {...state} />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/logging-in\">\n            <LoggingIn {...state} />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard {...state} />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: any | null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","export enum ItemState {\n  None = 0,\n  Locked = 1,\n  Tracked = 2,\n  Masterwork = 4,\n  Crafted = 8,\n  HighlightedObjective = 16,\n}\n","import { BountyDataItem } from \"./apiClasses/bountyDataItem\";\nimport { CharacterRecordDataItem } from \"./apiClasses/characterRecordDataItem\";\nimport { ItemState } from \"./apiClasses/itemState\";\nimport { MilestoneDataItem } from \"./apiClasses/milestoneDataItem\";\nimport { QuestDataItem } from \"./apiClasses/questDataItem\";\nimport { SeasonRankData } from \"./apiClasses/seasonRankData\";\nimport { Destiny2ApiClient } from \"./apiClient\";\n\nexport class Destiny2Goals {\n  getSeasonRankData: (\n    namedObject: any,\n    seasonDefinition: any,\n    seasonPassDefinition: any\n  ) => SeasonRankData;\n  replaceStringVariables: (\n    string: string,\n    profileVariables: string[]\n  ) => string;\n  getMilestoneData: (namedObject: any) => MilestoneDataItem[];\n  getBounties: (namedObject: any) => BountyDataItem[];\n  getQuests: (namedObject: any) => QuestDataItem[];\n  getCharacterRecords: (namedObject: any) => CharacterRecordDataItem[];\n  destinyApiClient: any;\n\n  constructor(destiny2ApiClient: Destiny2ApiClient) {\n    /**\n     * @description Used for the base URL of content, like images and such.\n     */\n    const destinyBaseUrl = \"https://www.bungie.net\";\n\n    this.destinyApiClient = destiny2ApiClient;\n\n    this.getSeasonRankData = function (\n      namedObject,\n      seasonDefinition,\n      seasonPassDefinition\n    ): SeasonRankData {\n      let seasonPassData =\n        namedObject.characterProgression.progressions[\n          seasonDefinition.seasonPassProgressionHash\n        ];\n      let seasonPassProgressionData =\n        namedObject.characterProgression.progressions[\n          seasonPassDefinition.prestigeProgressionHash\n        ];\n\n      let seasonArtifactData =\n        this.destinyApiClient.destinyDataDefinition\n          .DestinyInventoryItemDefinition[seasonDefinition.artifactItemHash];\n\n      let seasonRank = seasonPassData.level;\n      let nextLevelAt = seasonPassData.nextLevelAt;\n      let progressToNextLevel = seasonPassData.progressToNextLevel;\n\n      if (seasonPassData.level == seasonPassData.levelCap) {\n        seasonRank += seasonPassProgressionData.level;\n        nextLevelAt += seasonPassProgressionData.nextLevelAt;\n        progressToNextLevel += seasonPassProgressionData.progressToNextLevel;\n      }\n\n      let seasonRankDataItem: SeasonRankData = {\n        name: `Season Rank ${seasonRank}`,\n        description: seasonDefinition.displayProperties.name,\n        icon: `${seasonArtifactData.displayProperties.icon}`,\n        startDate: seasonDefinition.startDate,\n        endDate: seasonDefinition.endDate,\n        nextLevelAt: nextLevelAt,\n        progressToNextLevel: progressToNextLevel,\n        type: \"seasonrank\",\n        order: -1,\n        inProgressValueStyle: 0,\n        completedValueStyle: 0,\n      };\n      return seasonRankDataItem;\n    };\n\n    this.replaceStringVariables = function (string, profileVariables): string {\n      if (!string || string.indexOf(\"{var:\") === -1) return string;\n      var matchRegex = /{var:(\\d+)}/g;\n\n      var allMatches = string.match(matchRegex);\n\n      let newString = string;\n\n      if (allMatches) {\n        for (var i = 0; i < allMatches.length; i++) {\n          var match = allMatches[i];\n          var _match = match.match(/\\d+/);\n          if (_match) {\n            var matchIndex: any = _match[0];\n            var matchString = profileVariables[matchIndex];\n\n            if (matchString) {\n              newString = newString.replace(match, matchString);\n            }\n          }\n        }\n      }\n\n      return newString;\n    };\n\n    this.getMilestoneData = function (namedObject): MilestoneDataItem[] {\n      let milestoneData: MilestoneDataItem[] = [];\n\n      let milestoneKeys = Object.keys(\n        namedObject.characterProgression.milestones\n      );\n\n      for (let milestoneKey of milestoneKeys) {\n        let milestone =\n          namedObject.characterProgression.milestones[milestoneKey];\n\n        let milestoneDataItem: MilestoneDataItem = {\n          name: this.replaceStringVariables(\n            milestone.milestoneName,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          description: this.replaceStringVariables(\n            milestone.milestoneDescription,\n            namedObject.profileStringVariables.integerValuesByHash\n          ),\n          order: milestone.order,\n          icon: milestone.milestoneIcon,\n          type: \"milestone\",\n          inProgressValueStyle: 0,\n          completedValueStyle: 0,\n        };\n\n        if (milestone.startDate) {\n          milestoneDataItem.startDate = milestone.startDate;\n        }\n\n        if (milestone.endDate) {\n          milestoneDataItem.endDate = milestone.endDate;\n        }\n\n        if (milestone.availableQuests && milestone.availableQuests.length > 0) {\n          for (let quest of milestone.availableQuests) {\n            if (quest.tracked) {\n              milestoneDataItem.tracked = true;\n            }\n            if (quest.status.started && !quest.status.completed) {\n              if (\n                quest.status.stepObjectives &&\n                quest.status.stepObjectives.length > 0\n              ) {\n                for (let step of quest.status.stepObjectives) {\n                  if (!step.complete) {\n                    if (typeof step.progress !== \"undefined\") {\n                      milestoneDataItem.progressToNextLevel = step.progress;\n                    }\n\n                    if (typeof step.completionValue !== \"undefined\") {\n                      milestoneDataItem.nextLevelAt = step.completionValue;\n                    }\n\n                    if (\n                      typeof step.objectiveInProgressValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.inProgressValueStyle =\n                        step.objectiveInProgressValueStyle;\n                    }\n\n                    if (\n                      typeof step.objectiveCompletedValueStyle !== \"undefined\"\n                    ) {\n                      milestoneDataItem.completedValueStyle =\n                        step.objectiveCompletedValueStyle;\n                    }\n\n                    if (\n                      (milestoneDataItem.icon ?? \"\").length == 0 &&\n                      typeof step.activityIcon !== \"undefined\"\n                    ) {\n                      milestoneDataItem.icon = step.activityIcon;\n                    }\n\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (milestone.activities && milestone.activities.length > 0) {\n          for (let activity of milestone.activities) {\n            if (activity.challenges && activity.challenges.length > 0) {\n              for (let challenge of activity.challenges) {\n                if (!challenge.objective.complete) {\n                  if (typeof challenge.objective.progress !== \"undefined\") {\n                    milestoneDataItem.progressToNextLevel =\n                      challenge.objective.progress;\n                  }\n\n                  if (\n                    typeof challenge.objectiveInProgressValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.inProgressValueStyle =\n                      challenge.objectiveInProgressValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objectiveCompletedValueStyle !==\n                    \"undefined\"\n                  ) {\n                    milestoneDataItem.completedValueStyle =\n                      challenge.objectiveCompletedValueStyle;\n                  }\n\n                  if (\n                    typeof challenge.objective.completionValue !== \"undefined\"\n                  ) {\n                    milestoneDataItem.nextLevelAt =\n                      challenge.objective.completionValue;\n                  }\n\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        }\n\n        milestoneData.push(milestoneDataItem);\n      }\n\n      return milestoneData;\n    };\n\n    const bountyItemType = 26;\n\n    this.getBounties = function (namedObject): BountyDataItem[] {\n      let bountyData: BountyDataItem[] = [];\n\n      var bountyItems = namedObject.characterInventory.filter(\n        (item: any) => item.inventoryitemItemType === bountyItemType\n      );\n\n      for (let bounty of bountyItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[bounty.itemInstanceId]\n            .objectives;\n\n        let incompleteTasks = itemObjectives.filter(\n          (obj: any) => !obj.complete\n        );\n\n        // If we don't have any tasks left to do, we'll ignore this bounty\n        if (incompleteTasks.length === 0) continue;\n\n        for (let objective of incompleteTasks) {\n          let bountyDataItem: BountyDataItem = {\n            name: this.replaceStringVariables(\n              bounty.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              bounty.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 500,\n            icon: bounty.inventoryitemIcon,\n            type: \"bounty\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked: (bounty.state & ItemState.Tracked) == ItemState.Tracked,\n            state: bounty.state,\n          };\n\n          if (typeof bounty.expirationDate !== \"undefined\") {\n            bountyDataItem.endDate = bounty.expirationDate;\n\n            // If the bounty is expired, we'll ignore it\n            if (\n              new Date(bounty.expirationDate).getTime() < new Date().getTime()\n            ) {\n              continue;\n            }\n          }\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            bountyDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              bountyDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              bountyDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              bountyDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${bountyDataItem.description}<br />\n              bountyDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            bountyData.push(bountyDataItem);\n          }\n        }\n      }\n\n      return bountyData;\n    };\n\n    const questBucketHash = 1345459588;\n\n    this.getQuests = function (namedObject): QuestDataItem[] {\n      let questData: QuestDataItem[] = [];\n\n      var questItems = namedObject.characterInventory.filter(\n        (item: any) =>\n          item.bucketHash === questBucketHash &&\n          [bountyItemType].filter((i) => i != item.inventoryitemItemType)\n            .length > 0\n      );\n\n      let instancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId !== \"undefined\"\n      );\n\n      let uninstancedQuestItems = questItems.filter(\n        (item: any) => typeof item.itemInstanceId === \"undefined\"\n      );\n\n      for (let instanceQuest of instancedQuestItems) {\n        let itemObjectives =\n          namedObject.itemComponents.objectives.data[\n            instanceQuest.itemInstanceId\n          ];\n\n        if (itemObjectives) {\n          const _objectives = itemObjectives.objectives.filter(\n            (objective: any) => objective.visible && !objective.complete\n          );\n\n          for (let objective of _objectives) {\n            let questDataItem: QuestDataItem = {\n              name: this.replaceStringVariables(\n                instanceQuest.inventoryitemName,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              description: this.replaceStringVariables(\n                instanceQuest.inventoryitemDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              ),\n              order: 1000,\n              icon: instanceQuest.inventoryitemIcon,\n              type: \"quest\",\n              inProgressValueStyle: 0,\n              completedValueStyle: 0,\n              tracked:\n                (instanceQuest.state & ItemState.Tracked) == ItemState.Tracked,\n              state: instanceQuest.state,\n            };\n\n            if (typeof objective.completionValue !== \"undefined\") {\n              questDataItem.nextLevelAt = objective.completionValue;\n\n              if (\n                typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n              ) {\n                questDataItem.inProgressValueStyle =\n                  objective.objectiveInProgressValueStyle;\n              }\n\n              if (\n                typeof objective.objectiveCompletedValueStyle !== \"undefined\"\n              ) {\n                questDataItem.completedValueStyle =\n                  objective.objectiveCompletedValueStyle;\n              }\n\n              if (typeof objective.progress !== \"undefined\") {\n                questDataItem.progressToNextLevel = objective.progress;\n              }\n\n              if (\n                typeof objective.objectiveProgressDescription !== \"undefined\"\n              ) {\n                // ${questDataItem.description}<br />\n                questDataItem.description = this.replaceStringVariables(\n                  objective.objectiveProgressDescription,\n                  namedObject.profileStringVariables.integerValuesByHash\n                );\n              }\n\n              questData.push(questDataItem);\n            }\n          }\n        }\n      }\n\n      for (let uninstancedQuest of uninstancedQuestItems) {\n        let questObjectives = (\n          namedObject.characterProgression.uninstancedItemObjectives[\n            uninstancedQuest.itemHash\n          ] ?? []\n        ).filter((objective: any) => objective.visible && !objective.complete);\n\n        for (let objective of questObjectives) {\n          let questDataItem: QuestDataItem = {\n            name: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemName,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            description: this.replaceStringVariables(\n              uninstancedQuest.inventoryitemDescription,\n              namedObject.profileStringVariables.integerValuesByHash\n            ),\n            order: 10000,\n            icon: uninstancedQuest.inventoryitemIcon,\n            type: \"quest\",\n            inProgressValueStyle: 0,\n            completedValueStyle: 0,\n            tracked:\n              (uninstancedQuest.state & ItemState.Tracked) == ItemState.Tracked,\n            state: uninstancedQuest.state,\n          };\n\n          if (typeof objective.completionValue !== \"undefined\") {\n            questDataItem.nextLevelAt = objective.completionValue;\n\n            if (\n              typeof objective.objectiveInProgressValueStyle !== \"undefined\"\n            ) {\n              questDataItem.inProgressValueStyle =\n                objective.objectiveInProgressValueStyle;\n            }\n\n            if (typeof objective.objectiveCompletedValueStyle !== \"undefined\") {\n              questDataItem.completedValueStyle =\n                objective.objectiveCompletedValueStyle;\n            }\n\n            if (typeof objective.progress !== \"undefined\") {\n              questDataItem.progressToNextLevel = objective.progress;\n            }\n\n            if (typeof objective.objectiveProgressDescription !== \"undefined\") {\n              // ${questDataItem.description}<br />\n              questDataItem.description = this.replaceStringVariables(\n                objective.objectiveProgressDescription,\n                namedObject.profileStringVariables.integerValuesByHash\n              );\n            }\n\n            questData.push(questDataItem);\n          }\n        }\n      }\n\n      return questData;\n    };\n\n    this.getCharacterRecords = function (\n      namedObject\n    ): CharacterRecordDataItem[] {\n      let characterRecords: CharacterRecordDataItem[] = [];\n\n      let characterRecordKeys = Object.keys(\n        namedObject.characterRecords.records\n      );\n      for (let key of characterRecordKeys) {\n        let characterRecord = namedObject.characterRecords.records[key];\n        if (\n          typeof characterRecord.objectives === \"undefined\" ||\n          (characterRecord.recordName ?? \"\").length === 0\n        )\n          continue;\n\n        let recordObjectives = characterRecord.objectives.filter(\n          (objective: any) => objective.visible && !objective.complete\n        );\n\n        for (let objective of recordObjectives) {\n          let characterRecordData: CharacterRecordDataItem = {\n            name: characterRecord.recordName,\n            type: \"characterRecord\",\n            order: 100,\n            icon: characterRecord.recordIcon,\n            // ${characterRecord.recordDescription}<br />\n            description: `${objective.objectiveProgressDescription ?? \"\"}`,\n            progressToNextLevel: objective.progress,\n            nextLevelAt: objective.completionValue,\n            inProgressValueStyle: objective.objectiveInProgressValueStyle,\n            completedValueStyle: objective.objectiveCompletedValueStyle,\n            state: characterRecord.state,\n          };\n\n          characterRecords.push(characterRecordData);\n        }\n      }\n\n      return characterRecords;\n    };\n\n    return this;\n  }\n}\n","import { DestinyNamedObject } from \"./apiClasses/destinyNamedObject\";\nimport { GoalDataItem } from \"./apiClasses/goalDataItem\";\nimport { Destiny2Goals } from \"./destiny2Goals\";\nimport { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  checkManifestVersion: () => Promise<{\n    updatedManifest: boolean;\n    version: string | null;\n  } | null>;\n  checkStoredDefinitions: (\n    downloadMissingDefinitions?: boolean\n  ) => Promise<string[]>;\n  loadDestinyContentData: (definitions: string[]) => Promise<void>;\n  loadDataFromStorage: () => Promise<void>;\n  getManifest: () => Promise<{\n    Response: any;\n  } | null>;\n  loadCommonSettings: () => Promise<any>;\n  getUserToken: () => Promise<string | null>;\n  getLinkedProfiles: (forceRefresh?: boolean) => Promise<unknown>;\n  getUserProfile: (\n    membershipId: string,\n    membershipType: number\n  ) => Promise<unknown>;\n  getLastPlayedCharacter: (forceRefresh?: boolean) => Promise<any | null>;\n  getNamedDataObject: (\n    forceRefresh?: boolean\n  ) => Promise<DestinyNamedObject | null>;\n  getPresentationNodeFromHash: (hash: string) => any[];\n  mapHashesToDefinitionsInObject: (object: any) => any;\n  getTrackableData: (forceRefresh?: boolean) => Promise<GoalDataItem[] | null>;\n\n  apiToken: string;\n  applicationName: string;\n  cachedManifest: any;\n  destinyDataDefinition: { [key: string]: any };\n  lastVersion: string | null;\n  profile: any | null;\n  linkedProfiles: any | null;\n  trackedGoals: GoalDataItem[] | null;\n  goalApi: Destiny2Goals;\n\n  constructor(apiToken: string, appName: string) {\n    _log(\"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    const maxActivitiesPerFetch = 250;\n\n    /**\n     * @description The datatypes we are interested in.\n     */\n    const destinyDataTypes = [\n      \"DestinyActivityTypeDefinition\",\n      \"DestinyActivityDefinition\",\n      \"DestinyArtifactDefinition\",\n      \"DestinyChecklistDefinition\",\n      \"DestinyClassDefinition\",\n      \"DestinyDestinationDefinition\",\n      \"DestinyDamageTypeDefinition\",\n      \"DestinyFactionDefinition\",\n      \"DestinyGenderDefinition\",\n      \"DestinyItemCategoryDefinition\",\n      \"DestinyItemTierTypeDefinition\",\n      \"DestinyInventoryBucketDefinition\",\n      \"DestinyInventoryItemDefinition\",\n      \"DestinyMedalTierDefinition\",\n      \"DestinyMetricDefinition\",\n      \"DestinyMilestoneDefinition\",\n      \"DestinyObjectiveDefinition\",\n      \"DestinyPlaceDefinition\",\n      \"DestinyPresentationNodeDefinition\",\n      \"DestinyProgressionDefinition\",\n      \"DestinyRaceDefinition\",\n      \"DestinyRecordDefinition\",\n      \"DestinySeasonDefinition\",\n      \"DestinySeasonPassDefinition\",\n      \"DestinyStatDefinition\",\n      \"DestinyTraitDefinition\",\n    ];\n\n    const profileComponents = {\n      None: 0,\n      Profiles: 100,\n      VendorReceipts: 101,\n      ProfileInventories: 102,\n      ProfileCurrencies: 103,\n      ProfileProgression: 104,\n      PlatformSilver: 105,\n      Characters: 200,\n      CharacterInventories: 201,\n      CharacterProgressions: 202,\n      CharacterRenderData: 203,\n      CharacterActivities: 204,\n      CharacterEquipment: 205,\n      ItemInstances: 300,\n      ItemObjectives: 301,\n      ItemPerks: 302,\n      ItemRenderData: 303,\n      ItemStats: 304,\n      ItemSockets: 305,\n      ItemTalentGrids: 306,\n      ItemCommonData: 307,\n      ItemPlugStates: 308,\n      ItemPlugObjectives: 309,\n      ItemReusablePlugs: 310,\n      Vendors: 400,\n      VendorCategories: 401,\n      VendorSales: 402,\n      Kiosks: 500,\n      CurrencyLookups: 600,\n      PresentationNodes: 700,\n      Collectibles: 800,\n      Records: 900,\n      Transitory: 1000,\n      Metrics: 1100,\n      StringVariables: 1200,\n    };\n\n    const DestinyItemState = {\n      None: 0,\n      Locked: 1,\n      Tracked: 2,\n      Masterwork: 4,\n    };\n\n    this.lastVersion = null;\n    this.applicationName = appName;\n    this.apiToken = apiToken;\n    this.destinyDataDefinition = {};\n    this.trackedGoals = [];\n\n    function _log(...params: any[]) {\n      log(\"D2API\", params);\n    }\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      let headers: RequestInit[\"headers\"] = {};\n\n      if (body !== null || authorization !== null) {\n        headers[\"Content-Type\"] = \"application/json\";\n        headers[\"x-api-key\"] = self.apiToken;\n        if (authorization !== null) {\n          headers.authorization = `Bearer ${authorization}`;\n        }\n      }\n\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: headers,\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        _log(\"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        _log(\"Error handling token\", JSON.stringify(tokenResponse));\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.loadDataFromStorage = async () => {\n      _log(\"Loading data from storage\");\n\n      let _cachedManifest = await db.getItem(\"manifest\");\n      if (_cachedManifest !== null) {\n        self.cachedManifest = JSON.parse(_cachedManifest);\n      }\n\n      let _cachedManifestVersion = await db.getItem(\"manifestVersion\");\n      if (_cachedManifestVersion !== null) {\n        self.lastVersion = _cachedManifestVersion;\n      }\n\n      self.checkStoredDefinitions();\n\n      for (let dataType of destinyDataTypes) {\n        let _cachedData = await db.getItem(`destinyContent-${dataType}`);\n        if (_cachedData !== null) {\n          self.destinyDataDefinition[dataType] = JSON.parse(_cachedData);\n        }\n      }\n\n      let _profile = await db.getItem(\"destiny-profile\");\n      if (_profile !== null) {\n        self.profile = JSON.parse(_profile);\n      }\n\n      let _linkedProfiles = await db.getItem(\"destiny-linkedProfiles\");\n      if (_linkedProfiles !== null) {\n        self.linkedProfiles = JSON.parse(_linkedProfiles);\n      }\n\n      _log(\"Data loaded from storage\");\n      eventEmitter.emit(\"destiny-data-loaded\");\n    };\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        _log(\"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      _log(\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    this.checkManifestVersion = async () => {\n      _log(\"Checking manifest version\");\n      return new Promise(async function (resolve, reject) {\n        let manifest = await self.getManifest();\n\n        if (manifest == null) {\n          _log(\"Failed to fetch API\");\n          return null;\n        }\n\n        let lastVersion = (await db.getItem(\"manifestVersion\")) ?? \"null\";\n\n        if (manifest.Response.version !== lastVersion) {\n          /* Currently cached data is older than 60 minutes, so we clear it. */\n          await db.removeItem(\"lastManifestUpdate\");\n          await db.removeItem(\"manifest\");\n          await db.removeItem(\"manifestVersion\");\n\n          for (let dataType of destinyDataTypes) {\n            await db.removeItem(`destinyContent-${dataType}`);\n          }\n\n          self.cachedManifest = manifest.Response;\n\n          await db.setItem(\"manifestVersion\", manifest.Response.version);\n          await db.setItem(\"manifest\", JSON.stringify(self.cachedManifest));\n          await db.setItem(\"lastManifestUpdate\", Date.now());\n\n          resolve({ updatedManifest: true, version: self.lastVersion });\n          _log(\"Manifest updated\");\n          return;\n        }\n\n        self.cachedManifest = manifest.Response;\n\n        resolve({ updatedManifest: false, version: self.lastVersion });\n        _log(\"Manifest version is up to date\");\n      });\n    };\n\n    this.checkStoredDefinitions = async function (\n      downloadMissingDefinitions = true\n    ) {\n      let missingDefinitions: string[] = [];\n\n      for (let dataType of destinyDataTypes) {\n        let data = await db.getItem(`destinyContent-${dataType}`);\n        if (data === null) {\n          missingDefinitions.push(dataType);\n        }\n      }\n\n      if (missingDefinitions.length > 0 && downloadMissingDefinitions) {\n        for (let dataType of missingDefinitions) {\n          await db.removeItem(`destinyContent-${dataType}`);\n        }\n\n        await self.loadDestinyContentData(missingDefinitions);\n      }\n\n      return missingDefinitions;\n    };\n\n    this.loadDestinyContentData = async function (definitions: string[] = []) {\n      for (let dataType of definitions) {\n        await loadDestinyContentDataType(dataType);\n      }\n    };\n\n    async function loadDestinyContentDataType(dataType: string) {\n      let manifest = self.cachedManifest;\n\n      const dataTypeWords = dataType\n        .replace(\"Destiny\", \"\")\n        .split(/(?=[A-Z])/)\n        .join(\" \");\n\n      eventEmitter.emit(\"loading-text\", `Loading ${dataTypeWords}`);\n\n      const contentTypeDownload = await callUrl(\n        \"GET\",\n        `${destinyBaseUrl}${manifest.jsonWorldComponentContentPaths.en[dataType]}`\n      );\n\n      const contentLength = contentTypeDownload.headers.get(\"content-length\");\n\n      const total = parseInt(contentLength || \"0\", 10);\n      let loaded = 0;\n\n      const res = new Response(\n        new ReadableStream({\n          async start(controller) {\n            const reader = contentTypeDownload.body!.getReader();\n\n            let progressIndication = 0;\n            for (;;) {\n              var r = await reader!.read();\n              if (r!.done) {\n                break;\n              }\n              loaded += r!.value.byteLength;\n\n              progressIndication++;\n              if (progressIndication % 30 === 0) {\n                eventEmitter.emit(\n                  \"loading-text\",\n                  `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                    \"sv-SE\"\n                  ).format(\n                    Math.round(\n                      (loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON\n                    ) / 100\n                  )} MB)`\n                );\n              }\n              controller.enqueue(r!.value);\n            }\n\n            eventEmitter.emit(\n              \"loading-text\",\n              `Loading ${dataTypeWords} (${new Intl.NumberFormat(\n                \"sv-SE\"\n              ).format(\n                Math.round((loaded / 1024.0 / 1024.0) * 100 + Number.EPSILON) /\n                  100\n              )} MB)`\n            );\n            controller.close();\n          },\n        })\n      );\n\n      if (contentTypeDownload.status !== 200) {\n        log(\"Manifest download error\", await res.json());\n        return;\n      }\n\n      const contentTypeJson = await res.json();\n\n      self.destinyDataDefinition[dataType] = contentTypeJson;\n      db.setItem(`destinyContent-${dataType}`, JSON.stringify(contentTypeJson));\n    }\n\n    this.getManifest = async function (): Promise<{\n      Response: any;\n    } | null> {\n      let lastManifestUpdate = await db.getItem(\"lastManifestUpdate\");\n      _log(\"Checking if manifest is cached\");\n\n      if (\n        lastManifestUpdate !== null &&\n        Date.now() - lastManifestUpdate < 60000 * 60\n      ) {\n        let _manifest = await db.getItem(\"manifest\");\n        if (_manifest !== null) {\n          _log(\"Manifest is cached\");\n          return { Response: JSON.parse(_manifest) };\n        }\n      }\n\n      let manifestRequest = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Destiny2/Manifest/`\n      );\n\n      if (manifestRequest.status === 200) {\n        let manifest = await manifestRequest.json();\n        if (manifest.ErrorStatus == \"Success\") {\n          db.setItem(\"lastManifestUpdate\", Date.now());\n          db.setItem(\"manifest\", JSON.stringify(manifest.Response));\n          _log(\"Manifest updated from API\");\n\n          return { Response: manifest.Response };\n        } else {\n          _log(\"Manifesterror\");\n          _log(manifest.Response);\n\n          return null;\n        }\n      } else {\n        let responseText = manifestRequest.json();\n        _log(\"Error when fetching Manifest\");\n        _log(responseText);\n\n        return null;\n      }\n    };\n\n    this.loadCommonSettings = async function () {\n      await refreshTokenIfExpired();\n\n      const settings = await callUrl(\n        \"GET\",\n        `${destinyApiUrl}/Settings`,\n        null,\n        await this.getUserToken()\n      );\n      if (settings.status === 200) {\n        return await settings.json();\n      }\n\n      _log(\n        \"Error fetching common settings\",\n        settings.status,\n        settings.statusText\n      );\n      return null;\n    };\n\n    this.getUserToken = async function () {\n      return await db.getItem(\"destinyToken\");\n    };\n\n    this.getLinkedProfiles = async function (forceRefresh: boolean = false) {\n      if (forceRefresh) {\n        self.linkedProfiles = null;\n      }\n\n      if (self.linkedProfiles != null) {\n        return self.linkedProfiles;\n      }\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        var bnetMemberId = await db.getItem(\"destinyBungieMembershipId\");\n\n        let linkedProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/-1/Profile/${bnetMemberId}/LinkedProfiles/`,\n          null,\n          await this.getUserToken()\n        );\n\n        if (linkedProfile.status === 200) {\n          let profiles = await linkedProfile.json();\n\n          db.setItem(\n            \"destiny-linkedProfiles\",\n            JSON.stringify(profiles.Response)\n          );\n\n          self.linkedProfiles = profiles.Response;\n\n          resolve(profiles.Response);\n        } else {\n          self.refreshToken();\n          reject(linkedProfile);\n        }\n      });\n    };\n\n    this.getUserProfile = async function (\n      membershipId: string,\n      membershipType: number\n    ) {\n      let interestingComponents = [\n        profileComponents.Profiles,\n        profileComponents.ProfileInventories,\n        profileComponents.ProfileCurrencies,\n        profileComponents.ProfileProgression,\n        profileComponents.Characters,\n        profileComponents.CharacterInventories,\n        profileComponents.CharacterProgressions,\n        profileComponents.CharacterActivities,\n        profileComponents.CharacterEquipment,\n        profileComponents.ItemInstances,\n        profileComponents.ItemObjectives,\n        profileComponents.ItemSockets,\n        profileComponents.ItemTalentGrids,\n        profileComponents.ItemCommonData,\n        profileComponents.ItemPlugStates,\n        profileComponents.ItemPlugObjectives,\n        profileComponents.ItemReusablePlugs,\n        profileComponents.Metrics,\n        profileComponents.Records,\n        profileComponents.Collectibles,\n        profileComponents.StringVariables,\n      ];\n\n      await refreshTokenIfExpired();\n\n      return new Promise(async (resolve, reject) => {\n        let userProfile = await callUrl(\n          \"GET\",\n          `${destinyApiUrl}/Destiny2/${membershipType}/Profile/${membershipId}/?components=${interestingComponents.join(\n            \",\"\n          )}`,\n          null,\n          await this.getUserToken()\n        );\n        if (userProfile.status === 200) {\n          let profile = await userProfile.json();\n\n          db.setItem(\"destiny-profile\", JSON.stringify(profile.Response));\n          self.profile = profile.Response;\n\n          resolve(profile.Response);\n        } else {\n          self.refreshToken();\n          reject(userProfile);\n        }\n      });\n    };\n\n    this.getLastPlayedCharacter = async function (forceRefresh = false) {\n      await refreshTokenIfExpired();\n\n      let _profile = self.profile;\n\n      if (forceRefresh) {\n        _profile = null;\n      }\n\n      if (self.linkedProfiles === null) {\n        return null;\n      }\n\n      await self.getLinkedProfiles(forceRefresh);\n\n      if (\n        self.linkedProfiles !== null &&\n        self.linkedProfiles.profiles !== null &&\n        self.linkedProfiles.profiles.length > 0\n      ) {\n        var primaryMembership = self.linkedProfiles.profiles.sort(\n          (a: any, b: any) => (a.dateLastPlayed > b.dateLastPlayed ? -1 : 1)\n        )[0];\n\n        _profile = await self.getUserProfile(\n          primaryMembership.membershipId,\n          primaryMembership.membershipType\n        );\n      }\n\n      let characters = [];\n\n      for (let char of _profile.profile.data.characterIds) {\n        characters.push(_profile.characters.data[char]);\n      }\n\n      let _last = characters.sort((a, b) =>\n        a.dateLastPlayed > b.dateLastPlayed ? -1 : 1\n      )[0];\n\n      let lastPlayedCharacter = {\n        characterInfo: _last,\n        characterProgression: !!!_profile.characterProgressions.disabled\n          ? _profile.characterProgressions.data[_last.characterId]\n          : {},\n        characterActivities: !!!_profile.characterActivities.disabled\n          ? _profile.characterActivities.data[_last.characterId]\n          : {},\n        characterUninstancedItemComponents:\n          _profile.characterUninstancedItemComponents[_last.characterId]\n            .objectives.data,\n        characterInventory:\n          _profile.characterInventories.data[_last.characterId].items,\n        characterEquipment:\n          _profile.characterEquipment.data[_last.characterId].items,\n        characterPlugSets: !!!_profile.characterPlugSets.disabled\n          ? _profile.characterPlugSets.data[_last.characterId].plugs\n          : {},\n        characterCollectibles:\n          _profile.characterCollectibles.data[_last.characterId].collectibles,\n        characterRecords: _profile.characterRecords.data[_last.characterId],\n        characterStringVariables:\n          _profile.characterStringVariables.data[_last.characterId],\n        profileProgression: _profile.profileProgression.data,\n        metrics: _profile.metrics.data.metrics,\n        itemComponents: _profile.itemComponents,\n        records: _profile.profileRecords.data,\n        profileInventory: _profile.profileInventory.data.items,\n        profileCurrency: _profile.profileCurrencies.data.items,\n        profilePlugSets: !!!_profile.profilePlugSets.disabled\n          ? _profile.profilePlugSets.data.plugs\n          : {},\n        profileCollectibles: _profile.profileCollectibles.data,\n        profile: _profile.profile.data,\n        profileStringVariables: _profile.profileStringVariables.data,\n      };\n\n      return lastPlayedCharacter;\n    };\n\n    this.getNamedDataObject = async function (\n      forceRefresh = false\n    ): Promise<DestinyNamedObject | null> {\n      let _lastPlayer = await self.getLastPlayedCharacter(forceRefresh);\n\n      if (_lastPlayer == null) {\n        return null;\n      }\n\n      let namedDataObject = {\n        ..._lastPlayer,\n      };\n\n      for (let statKey of Object.keys(namedDataObject.characterInfo.stats)) {\n        namedDataObject.characterInfo.stats[statKey] = {\n          statValue: namedDataObject.characterInfo.stats[statKey],\n          statHash: statKey,\n        };\n      }\n\n      for (let metricKey of Object.keys(namedDataObject.metrics)) {\n        namedDataObject.metrics[metricKey] = {\n          ...namedDataObject.metrics[metricKey],\n          metricHash: metricKey,\n        };\n      }\n\n      for (let recordKey of Object.keys(namedDataObject.records.records)) {\n        namedDataObject.records.records[recordKey] = {\n          ...namedDataObject.records.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      for (let recordKey of Object.keys(\n        namedDataObject.characterRecords.records\n      )) {\n        namedDataObject.characterRecords.records[recordKey] = {\n          ...namedDataObject.characterRecords.records[recordKey],\n          recordHash: recordKey,\n          parentNodeHashes:\n            self.destinyDataDefinition.DestinyRecordDefinition[recordKey]\n              .parentNodeHashes,\n        };\n      }\n\n      namedDataObject = self.mapHashesToDefinitionsInObject(namedDataObject);\n\n      const cacheBreaker = await db.getItem(\"destiny2-use-cachebreaker\", false);\n      if (cacheBreaker) {\n        const lockableItems = _lastPlayer.characterInventory.filter(\n          (i: any) => i.lockable && i.inventoryitemItemType == 3\n        );\n\n        if (lockableItems.length > 0) {\n          // await self.lockItem(\n          //   _lastPlayer.characterInfo.membershipType,\n          //   _lastPlayer.characterInfo.characterId,\n          //   lockableItems[0].itemInstanceId,\n          //   lockableItems[0].state & DestinyItemState.Locked\n          // );\n        }\n      }\n\n      eventEmitter.emit(\"destiny2-api-update\", namedDataObject);\n\n      return namedDataObject;\n    };\n\n    this.getPresentationNodeFromHash = function (hash: string) {\n      const presentationNameArray = [];\n\n      const presentationNode =\n        self.destinyDataDefinition.DestinyPresentationNodeDefinition[hash];\n      if (presentationNode) {\n        presentationNameArray.unshift({\n          name: presentationNode.displayProperties.name,\n          description: presentationNode.displayProperties.description,\n          icon: presentationNode.displayProperties.icon,\n          hash: hash,\n        });\n\n        if (presentationNode.parentNodeHashes) {\n          for (let _hash of presentationNode.parentNodeHashes) {\n            const subItems = self.getPresentationNodeFromHash(_hash);\n            for (let item of subItems) {\n              presentationNameArray.push(item);\n            }\n          }\n        }\n      }\n\n      return presentationNameArray;\n    };\n\n    this.mapHashesToDefinitionsInObject = function (object: any) {\n      let _objectCopy = { ...object };\n\n      let keys = Object.keys(_objectCopy);\n      for (let key of keys) {\n        let _type = typeof _objectCopy[key];\n        let _field = _objectCopy[key];\n\n        if (Array.isArray(_field)) {\n          for (let x = 0; x < _field.length; x++) {\n            let arrItem = _field[x];\n            if (typeof arrItem === \"object\") {\n              _field[x] = self.mapHashesToDefinitionsInObject(arrItem);\n            } else {\n              _field[x] = arrItem;\n            }\n          }\n          _objectCopy[key] = _field;\n        } else if (_type === \"object\" && _field !== null) {\n          _objectCopy[key] = self.mapHashesToDefinitionsInObject(\n            _objectCopy[key]\n          );\n        } else {\n          if (key.indexOf(\"Hash\") > -1 && !Array.isArray(_field)) {\n            let _hashType = key\n              .split(\"Hash\")[0]\n              .replace(\"current\", \"\")\n              .toLowerCase();\n\n            switch (_hashType) {\n              case \"item\":\n              case \"plugitem\":\n                _hashType = \"inventoryitem\";\n                break;\n            }\n\n            let dataType = destinyDataTypes.find(\n              (i) =>\n                i.toLowerCase() == `Destiny${_hashType}Definition`.toLowerCase()\n            );\n            let definitionData = self.destinyDataDefinition[dataType!];\n            if (\n              definitionData &&\n              definitionData[_field] &&\n              definitionData[_field].displayProperties\n            ) {\n              const dField = definitionData[_field];\n              if (\n                dField.displayProperties.name &&\n                dField.displayProperties.name.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.displayProperties.name;\n              } else if (\n                dField.setData &&\n                dField.setData.questLineName &&\n                dField.setData.questLineName.length > 0\n              ) {\n                _objectCopy[`${_hashType}Name`] = dField.setData.questLineName;\n              }\n\n              if (\n                dField.displayProperties.description &&\n                dField.displayProperties.description.length > 0\n              ) {\n                _objectCopy[`${_hashType}Description`] =\n                  dField.displayProperties.description;\n              }\n\n              if (\n                dField.displayProperties.icon &&\n                dField.displayProperties.icon.length > 0\n              ) {\n                _objectCopy[`${_hashType}Icon`] = dField.displayProperties.icon;\n              }\n\n              if (\n                dField.progressDescription &&\n                dField.progressDescription.length > 0\n              ) {\n                _objectCopy[`${_hashType}ProgressDescription`] =\n                  dField.progressDescription;\n              }\n\n              if (typeof dField.inProgressValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}InProgressValueStyle`] =\n                  dField.inProgressValueStyle;\n              }\n\n              if (typeof dField.completedValueStyle !== \"undefined\") {\n                _objectCopy[`${_hashType}CompletedValueStyle`] =\n                  dField.completedValueStyle;\n              }\n\n              if (typeof dField.itemType !== \"undefined\") {\n                _objectCopy[`${_hashType}ItemType`] = dField.itemType;\n              }\n\n              if (typeof dField.parentNodeHashes !== \"undefined\") {\n                _objectCopy[`parentNodeHashes`] = dField.parentNodeHashes.map(\n                  (item: any) => {\n                    return self.getPresentationNodeFromHash(item);\n                  }\n                );\n              }\n            }\n          }\n\n          _objectCopy[key] = _field;\n        }\n      }\n\n      return _objectCopy;\n    };\n\n    this.getTrackableData = async function (\n      forceRefresh = false\n    ): Promise<GoalDataItem[] | null> {\n      let namedObject = await self.getNamedDataObject(forceRefresh);\n\n      if (namedObject == null) {\n        return null;\n      }\n\n      let seasonDefinition =\n        self.destinyDataDefinition.DestinySeasonDefinition[\n          namedObject.profile.currentSeasonHash\n        ];\n      let seasonPassDefinition =\n        self.destinyDataDefinition.DestinySeasonPassDefinition[\n          seasonDefinition.seasonPassHash\n        ];\n\n      let trackableDataItems: GoalDataItem[] = [];\n\n      let milestoneData = self.goalApi.getMilestoneData(namedObject);\n      for (let milestone of milestoneData) {\n        trackableDataItems.push(milestone);\n      }\n\n      let bountyData = self.goalApi.getBounties(namedObject);\n      for (let bounty of bountyData) {\n        trackableDataItems.push(bounty);\n      }\n\n      let questData = self.goalApi.getQuests(namedObject);\n      for (let quest of questData) {\n        trackableDataItems.push(quest);\n      }\n\n      let characterRecords = self.goalApi.getCharacterRecords(namedObject);\n\n      for (let characterRecord of characterRecords) {\n        trackableDataItems.push(characterRecord);\n      }\n\n      function sortTrackableItems(a: any, b: any) {\n        if (\n          typeof a.nextLevelAt !== \"undefined\" &&\n          typeof b.nextLevelAt !== \"undefined\"\n        ) {\n          let aProgress = (a.progressToNextLevel / a.nextLevelAt) * 100;\n          let bProgress = (b.progressToNextLevel / b.nextLevelAt) * 100;\n\n          return aProgress < bProgress ? 1 : -1;\n        }\n\n        if (typeof a.endDate !== \"undefined\") {\n          return typeof b.endDate === \"undefined\" || a.endDate < b.endDate\n            ? -1\n            : 1;\n        }\n\n        return a.order < b.order ? 1 : -1;\n      }\n\n      const trackedItems = trackableDataItems\n        .filter((i) => i.tracked)\n        .sort(sortTrackableItems);\n\n      const itemsWithExpiration = trackableDataItems\n        .filter((i) => i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n      const itemsWithoutExpiration = trackableDataItems\n        .filter((i) => !i.endDate && !i.tracked)\n        .sort(sortTrackableItems);\n\n      trackableDataItems = [\n        ...trackedItems,\n        ...itemsWithExpiration,\n        ...itemsWithoutExpiration,\n      ];\n\n      trackableDataItems.unshift(\n        self.goalApi.getSeasonRankData(\n          namedObject,\n          seasonDefinition,\n          seasonPassDefinition\n        )\n      );\n\n      self.trackedGoals = trackableDataItems;\n      eventEmitter.emit(\"goal-list-update\", trackableDataItems);\n\n      return trackableDataItems;\n    };\n\n    let self = this;\n\n    this.goalApi = new Destiny2Goals(this);\n\n    _log(\"Initialized\");\n    return this;\n  }\n}\n","import { render, createContext, Context } from \"preact\";\nimport { signal } from \"@preact/signals\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\nimport { D2AppState } from \"./classes/appState\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n    appState: Context<D2AppState>;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nfunction createAppState(): D2AppState {\n  const isDataLoaded = signal(false);\n  const isAuthenticated = signal(false);\n  const goals = signal([]);\n\n  return {\n    isDataLoaded,\n    isAuthenticated,\n    goals,\n  };\n}\n\nconst state = createAppState();\n\nwindow.appState = createContext(state);\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  state.isAuthenticated.value = await window.apiClient.checkIfAuthenticated();\n\n  render(<App />, document.getElementById(\"app\") as HTMLElement);\n});\n"],"names":["log","category","params","JSON","stringify","MainPage","props","isAuthenticated","location","href","_jsx","_Fragment","_jsxs","children","import","Date","getTime","Authenticated","apiClient","window","url","getCurrentUrl","code","URL","origin","searchParams","get","getToken","then","catch","err","formatTimespan","startDate","endDate","latestSession","outputTimesObjectFromDifference","getTimeDifference","outputTimesObject","days","hours","minutes","time","push","join","differenceInSeconds","getTimeObject","now","Math","floor","seconds","intlFormat","Intl","NumberFormat","destinyBaseUrl","visibleItems","trackingItems","milestones","bounties","quests","records","seasonRank","cachedGoals","GoalList","eventEmitter","db","addEventListener","updateGoalList","parse","getItem","length","items","loadSettings","getTrackableData","renderProgress","goal","progress","inProgressValueStyle","nextLevelAt","className","progressToNextLevel","progressPercent","toFixed","format","renderGoalItem","icon","src","expiryDate","class","name","description","goals","goalsVisible","_visibleGoals","addGoal","type","value","parseInt","map","Dashboard","isDataLoaded","profile","Footer","getUTCFullYear","LoggingIn","data","setLoadingText","text","loadingText","document","getElementById","innerText","checkIfAuthenticated","result","manifestVersion","checkManifestVersion","getLastPlayedCharacter","missingDefinitions","checkStoredDefinitions","loadDataFromStorage","setTimeout","emit","id","Header","App","state","useContext","appState","Router","history","createHashHistory","Fragment","path","Destiny2Database","constructor","DBInstance","initializeDatabase","setItem","setItems","removeItem","setStorageItem","setStorageItems","getStorageItem","getStorageItems","removeStorageItem","Promise","resolve","reject","dbRequest","indexedDB","open","onupgradeneeded","event","oldVersion","newVersion","createObjectStore","autoIncrement","keyPath","createIndex","onsuccess","e","target","onerror","_setItem","storeName","key","request","self","transaction","objectStore","put","_getFilteredItems","filter","getAll","_getItem","defaultValue","_removeItem","delete","item","storageName","EventEmitter","eventListeners","eventName","eventHandler","handler","ev","forEach","l","console","error","ItemState","None","Locked","Tracked","Masterwork","Crafted","HighlightedObjective","Destiny2Goals","destiny2ApiClient","getSeasonRankData","replaceStringVariables","getMilestoneData","getBounties","getQuests","getCharacterRecords","destinyApiClient","namedObject","seasonDefinition","seasonPassDefinition","seasonPassData","characterProgression","progressions","seasonPassProgressionHash","seasonPassProgressionData","prestigeProgressionHash","seasonArtifactData","destinyDataDefinition","DestinyInventoryItemDefinition","artifactItemHash","level","levelCap","displayProperties","order","completedValueStyle","seasonRankDataItem","string","profileVariables","indexOf","matchRegex","allMatches","match","newString","i","_match","matchIndex","matchString","replace","milestoneData","milestoneKeys","Object","keys","milestoneKey","milestone","milestoneDataItem","milestoneName","profileStringVariables","integerValuesByHash","milestoneDescription","milestoneIcon","availableQuests","quest","tracked","status","started","completed","stepObjectives","step","complete","completionValue","objectiveInProgressValueStyle","objectiveCompletedValueStyle","activityIcon","activities","activity","challenges","challenge","objective","bountyItemType","bountyData","bountyItems","characterInventory","inventoryitemItemType","bounty","incompleteTasks","itemComponents","objectives","itemInstanceId","obj","bountyDataItem","inventoryitemName","inventoryitemDescription","inventoryitemIcon","expirationDate","objectiveProgressDescription","questBucketHash","questData","questItems","bucketHash","instancedQuestItems","uninstancedQuestItems","instanceQuest","itemObjectives","_objectives","visible","questDataItem","uninstancedQuest","questObjectives","uninstancedItemObjectives","itemHash","characterRecords","characterRecordKeys","characterRecord","recordName","recordObjectives","characterRecordData","recordIcon","Destiny2ApiClient","apiToken","appName","refreshToken","loadDestinyContentData","getManifest","loadCommonSettings","getUserToken","getLinkedProfiles","getUserProfile","getNamedDataObject","getPresentationNodeFromHash","mapHashesToDefinitionsInObject","applicationName","cachedManifest","lastVersion","linkedProfiles","trackedGoals","goalApi","_log","authGatewayUrl","destinyApiUrl","destinyDataTypes","profileComponents","Profiles","VendorReceipts","ProfileInventories","ProfileCurrencies","ProfileProgression","PlatformSilver","Characters","CharacterInventories","CharacterProgressions","CharacterRenderData","CharacterActivities","CharacterEquipment","ItemInstances","ItemObjectives","ItemPerks","ItemRenderData","ItemStats","ItemSockets","ItemTalentGrids","ItemCommonData","ItemPlugStates","ItemPlugObjectives","ItemReusablePlugs","Vendors","VendorCategories","VendorSales","Kiosks","CurrencyLookups","PresentationNodes","Collectibles","Records","Transitory","Metrics","StringVariables","callUrl","method","body","authorization","headers","fetch","refreshTokenIfExpired","handleTokenResponse","tokenResponse","access_token","refresh_token","tokenExpires","expires_in","refreshTokenExpires","refresh_expires_in","membership_id","_cachedManifest","_cachedManifestVersion","dataType","_cachedData","_profile","_linkedProfiles","tokenRequest","json","statusText","manifest","Response","version","updatedManifest","downloadMissingDefinitions","definitions","loadDestinyContentDataType","dataTypeWords","split","contentTypeDownload","jsonWorldComponentContentPaths","en","loaded","res","ReadableStream","start","controller","reader","getReader","progressIndication","r","read","done","byteLength","round","Number","EPSILON","enqueue","close","contentTypeJson","lastManifestUpdate","_manifest","manifestRequest","ErrorStatus","responseText","settings","forceRefresh","bnetMemberId","linkedProfile","profiles","membershipId","membershipType","interestingComponents","userProfile","primaryMembership","sort","a","b","dateLastPlayed","characters","char","characterIds","_last","lastPlayedCharacter","characterInfo","characterProgressions","disabled","characterId","characterActivities","characterUninstancedItemComponents","characterInventories","characterEquipment","characterPlugSets","plugs","characterCollectibles","collectibles","characterStringVariables","profileProgression","metrics","profileRecords","profileInventory","profileCurrency","profileCurrencies","profilePlugSets","profileCollectibles","_lastPlayer","namedDataObject","statKey","stats","statValue","statHash","metricKey","metricHash","recordKey","recordHash","parentNodeHashes","DestinyRecordDefinition","lockable","hash","presentationNameArray","presentationNode","DestinyPresentationNodeDefinition","unshift","_hash","subItems","object","_objectCopy","_type","_field","Array","isArray","x","arrItem","_hashType","toLowerCase","find","definitionData","dField","setData","questLineName","progressDescription","itemType","DestinySeasonDefinition","currentSeasonHash","DestinySeasonPassDefinition","seasonPassHash","trackableDataItems","sortTrackableItems","aProgress","bProgress","trackedItems","itemsWithExpiration","itemsWithoutExpiration","createAppState","signal","createContext"],"mappings":"+8BAKgBA,SAAAA,EAAIC,KAAqBC,EAAqB,CAIpDF,QAAAA,IAAK,IAAGC,KAAaE,KAAKC,UAAU,CAAC,GAAGF,CAAM,CAAC,CAAC,CAC1D,CCRA,SAAwBG,EAASC,EAAmB,CAClD,OAAIA,EAAMC,iBACRC,SAASC,KAAO,gBACTC,EAAAC,EAAK,CAAA,CAAA,GAIZC,EAAAD,EAAA,CAAAE,SAAE,CAAA,cACY,IACZH,EAAA,IAAA,CACED,KACEK,uEAEIC,IAAAA,KAAAA,EAAOC,QACZ,EAAAH,SACF,QAAA,CAEG,CAAA,CAAA,CACH,CAEP,CCnBA,SAAwBI,GAAgB,CACtC,MAAMC,EAAYC,OAAOD,UAEnBE,EAAMC,IACRrB,EAAA,OAAQ,mCAAoCoB,CAAG,EAG7CE,MAAAA,EAFU,IAAIC,IAAIH,EAAKZ,SAASgB,MAAM,EAAEC,aAEzBC,IAAI,MAAM,EAE/B,OAAKJ,GAMLJ,EACGS,SAAS,GAAIL,CAAI,EACjBM,KAAK,IAAM,CACV5B,EAAI,OAAQ,qCAAqC,EACjDQ,SAASC,KAAO,eAAA,CACjB,EACAoB,MAAeC,GAAA,CACd9B,EAAI,OAAQ,+CAA+C,EAC3DQ,SAASC,KAAO,GAAA,CACjB,EAEIC,EAAAC,EAAA,CAAAE,SAAE,yCAAA,CAA0C,IAhBjDb,EAAI,OAAQ,yCAAyC,EACrDQ,SAASC,KAAO,IACTC,EAAAC,EAAA,CAAAE,SAAE,0BAAA,CAA2B,EAexC,CCoDO,SAASkB,GACdC,EACAC,EACAC,EAAgB,GAChB,CACI,MAAA,CAACA,GAAiB,CAACD,EAAiB,uBACjCE,GAAgCC,GAAkBJ,EAAWC,CAAO,CAAC,CAC9E,CAUgBI,SAAAA,GACdC,EACAC,EACAC,EACA,CACA,IAAIC,EAAO,CAAA,EAEX,OAAIH,EAAO,GAAQI,EAAAA,KAAM,GAAEJ,IAAO,EAC9BC,EAAQ,GAAQG,EAAAA,KAAM,GAAEH,IAAQ,EAChCC,EAAU,GAAQE,EAAAA,KAAM,GAAEF,IAAU,EAEjCC,EAAKE,KAAK,IAAI,CACvB,CAEO,SAASR,GAAgCS,EAA6B,CACvE,GAAA,CAAEN,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,CAAAA,EAAYK,GAAcD,CAAmB,EACzDP,OAAAA,GAAkBC,EAAMC,EAAOC,CAAO,CAC/C,CAQgBJ,SAAAA,GAAkBJ,EAAmBC,EAAiB,CACpE,OAAKA,IAASA,EAAUlB,KAAK+B,QACrBb,EAAUD,GAAa,GACjC,CAEA,SAASa,GAAcD,EAA6B,CAClD,IAAIN,EAAOS,KAAKC,MAAMJ,EAAuB,KAAU,EACnDL,EAAQQ,KAAKC,MAAOJ,GAAuB,GAAK,MAAS,IAAI,EAC7DJ,EAAUO,KAAKC,MAAOJ,EAAsB,KAAQ,EAAE,EACtDK,EAAUF,KAAKC,MAAMJ,EAAsB,EAAE,EAE1C,MAAA,CACLN,KAAAA,EACAC,MAAAA,EACAC,QAAAA,EACAS,QAAAA,CAAAA,CAEJ,CCvIA,MAAMC,EAAa,IAAIC,KAAKC,aAEtBC,GAAiB,yBACvB,IAAIC,EAAe,GACfC,EAAgB,CAClBC,WAAY,GACZC,SAAU,GACVC,OAAQ,GACRC,QAAS,GACTC,WAAY,EACd,EAEIC,EAA8B,CAAA,EAE3B,SAASC,GAASxD,EAAmB,SAC1C,MAAMyD,EAAe5C,OAAO4C,aACtBC,EAAK7C,OAAO6C,GACZ9C,EAAYC,OAAOD,UAEZ+C,EAAAA,iBAAiB,mBAAoBC,CAAc,EAEnDD,EAAAA,iBAAiB,wBAAyB,SAAY,CACjDV,EAAA,CACdC,WAAYrD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,qBAAqB,GAAM,EAAI,EACxEX,SAAUtD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,mBAAmB,GAAM,EAAI,EACpEV,OAAQvD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,iBAAiB,GAAM,EAAI,EAChET,QAASxD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,kBAAkB,GAAM,EAAI,EAClER,WAAYzD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,qBAAqB,GAAM,EAAI,CAAA,EAGtEP,GAAeA,EAAYQ,OAAS,GACtCH,EAAeL,CAAW,CAC5B,CACD,EAEYI,EAAAA,iBAAiB,wBAA0BK,GAAe,CACtDA,EAAAA,EAEXT,GAAeA,EAAYQ,OAAS,GACtCH,EAAeL,CAAW,CAC5B,CACD,EAEA,gBAAkB,CACjB,MAAMU,EAAc,EACpB,MAAMrD,EAAUsD,kBAAkB,IAGpC,SAASC,EAAeC,EAAW,CACjC,IAAIC,EAAgB,KAQpB,OANID,EAAKE,uBAAyB,GAC5BF,EAAKG,cAAgB,IACvBH,EAAKE,qBAAuB,GAIxBF,EAAKE,qBAAoB,CAC/B,IAAK,GACHD,EACEjE,EAAA,OAAA,CAAMoE,UAAU,gBAAejE,SAC5B6D,EAAKK,qBAAuB,EAAI,aAAe,UAAA,CAEnD,EACD,MACF,IAAK,GACH,IAAIC,GACDN,EAAKK,oBAAsBL,EAAKG,YACjC,KACAI,QAAQ,CAAC,EACXN,EAAW/D,EAAA,OAAA,CAAMkE,UAAU,gBAAejE,SAAA,CAAEmE,EAAgB,IAAE,CAAA,CAAO,EACrE,MACF,IAAK,GACQL,EAAA,GACX,MACF,IAAK,IACHA,EACE/D,EAAA,OAAA,CAAMkE,UAAU,gBAAejE,SAAE6D,CAAAA,EAAKK,oBAAoB,IAAE,CAAA,CAC7D,EACD,MACF,IAAK,GACL,QACEJ,EACE/D,EAAA,OAAA,CAAMkE,UAAU,gBAAejE,SAAA,CAC5BqC,EAAWgC,OAAOR,EAAKK,mBAAmB,EAAE,KAAG,IAC/C7B,EAAWgC,OAAOR,EAAKG,WAAW,CAAC,CAAA,CAEvC,EACD,KAAM,CAGV,OAAO,OAAOH,EAAKG,YAAgB,IAAcnE,EAAAC,EAAA,CAAAE,SAAG8D,CAAQ,CAAA,EAAO,IACrE,CAEA,SAASQ,EAAeT,EAAW,CACjC,IAAIU,EACF,OAAOV,EAAKU,KAAS,IACnB1E,EAAA,MAAA,CAAKoE,UAAU,YAAYO,IAAM,GAAEhC,KAAiBqB,EAAKU,MAAO,CAAA,EAC9D,KAEFE,EACF,OAAOZ,EAAKzC,QAAY,IACtBrB,EAAAD,EAAA,CAAAE,SACEH,CAAAA,EAAM,KAAA,CAAA,CAAA,EACNE,EAAA,IAAA,CAAG2E,MAAM,4BAA2B1E,UAAC,WAC1BkB,GAAmBhB,IAAAA,KAAQ,IAAIA,KAAK2D,EAAKzC,OAAO,CAAC,CAAC,CAAA,CACzD,CAAA,CAAA,CAAA,EAEJ,KAEF0C,EAAWF,EAAeC,CAAI,EAElC,OACE9D,EAAA,MAAA,CAAKkE,UAAU,YAAWjE,SAAA,CACvBuE,EACDxE,EAAA,MAAA,CAAKkE,UAAU,YAAWjE,UACxBD,EAAA,KAAA,CAAAC,SACG6D,CAAAA,EAAKc,KACLb,CAAQ,CAAA,CAAA,EAEVD,EAAKe,YACLH,CAAU,CAAA,CACP,CAAA,CAAA,CACF,CAEV,CAEA,eAAepB,EAAewB,EAAuB,CACnD,IAAIC,EAAe,EAEfC,EAAgC,CAAA,EAEpC,QAASlB,KAAQgB,EAAO,CAClBpC,GAAAA,EAAe,GAAKqC,GAAgBrC,EACtC,MAGF,IAAIuC,EAAU,GAEd,OAAQnB,EAAKoB,KAAI,CACf,IAAK,YACHD,EAAUtC,EAAcC,WACxB,MACF,IAAK,QACHqC,EAAUtC,EAAcG,OACxB,MACF,IAAK,SACHmC,EAAUtC,EAAcE,SACxB,MACF,IAAK,kBACHoC,EAAUtC,EAAcI,QACxB,MACF,IAAK,aACHkC,EAAUtC,EAAcK,WACxB,KAAM,CAGNiC,IACFD,EAAclD,KAAKgC,CAAI,EACvBiB,KAIJrF,EAAMoF,MAAMK,MAAQH,EACNF,EAAAA,CAChB,CAEA,eAAenB,GAAe,CAC5BjB,EAAe0C,SAAU,MAAMhC,EAAGI,QAAQ,kBAAkB,GAAM,CAAC,EAEnDb,EAAA,CACdC,WAAYrD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,qBAAqB,GAAM,EAAI,EACxEX,SAAUtD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,mBAAmB,GAAM,EAAI,EACpEV,OAAQvD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,iBAAiB,GAAM,EAAI,EAChET,QAASxD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,kBAAkB,GAAM,EAAI,EAClER,WAAYzD,KAAKgE,MAAO,MAAMH,EAAGI,QAAQ,qBAAqB,GAAM,EAAI,CAAA,CAE5E,CAEA,OACE1D,EAAA,MAAA,CAAKoE,UAAU,iBAAgBjE,WAC5BP,GAAAA,EAAAA,EAAMoF,QAANpF,YAAAA,EAAayF,QAAbzF,YAAAA,EAAoB+D,QAAS,EAC5B/D,EAAMoF,MAAMK,MAAME,OAAcd,EAAeT,CAAI,CAAC,EAEpDhE,EAAAC,EAAA,CAAAE,SAAE,aAAA,CAAW,CAAA,CAEX,CAEV,CC/LA,SAAwBqF,GAAU5F,EAAmB,CACnD,MAAMY,EAAYC,OAAOD,UAEzB,MAAI,CAACZ,EAAMC,gBAAgBwF,OAAS,CAACzF,EAAM6F,aAAaJ,OACtDvF,SAASC,KAAO,IACTC,EAAAC,EAAK,CAAA,CAAA,IAGMO,EAAUkF,QAAQA,QAGpC1F,EAAAC,EAAA,CAAAE,SACEH,EAACoD,GAAQ,CAAA,GAAKxD,CAAAA,CAAK,CAAA,CAClB,EAEP,CClBO,SAAS+F,IAAS,CACvB,OACEzF,EAAA,SAAA,CAAQkE,UAAU,mBAAkBjE,SAAA,CAAC,SAE9BE,IAAAA,OAAOuF,eAAgB,GAAI,KAC5B,UAAYvF,KAAI,EAAGuF,eACnB,EAAA,KAAM,IAAI,mBAEhB,CAAA,CAAS,CAEb,CCNA,SAAwBC,GAAUjG,EAAmB,CACnD,MAAMY,EAAYC,OAAOD,UAEnB6C,EAAe5C,OAAO4C,aAEfE,EAAAA,iBAAiB,eAAiBuC,GAAc,CACrDA,GACJC,EAAeD,CAAI,CACrB,CACD,EAED,SAASC,EAAeC,EAAc,CAChCC,IAAAA,EAAcC,SAASC,eAAe,cAAc,EACpDF,IACFA,EAAYG,UAAYJ,EAE5B,CAGAxF,OAAAA,EAAU6F,qBAAsB,EAACnF,KAAK,MAAOoF,GAAW,CACtD,GAAI,CAACA,EAAQ,CACXxG,SAASC,KAAO,IAChB,OAGFT,EAAI,QAAS,mCAAmC,EAEhDyG,EAAe,uBAAuB,EAClCQ,IAAAA,EAAkB,MAAM/F,EAAUgG,uBAElCD,GAAAA,GAAoB,KAAuC,CAC7DR,EACE,0EAA0E,EAE5E,OAGFzG,EAAI,QAASiH,CAAe,EAE5BR,EAAe,sBAAsB,EAErC,MAAMvF,EAAUiG,yBAEhBV,EAAe,kCAAkC,EAEjD,IAAIW,EAAqB,MAAMlG,EAAUmG,uBAAuB,EAAK,EAEjED,EAAmB/C,OAAS,IAE3BoC,EAAA,eAAcW,EAAmB/C,8BAA8B,EAE5DnD,MAAAA,EAAUmG,uBAAuB,EAAI,GAG7CZ,EAAe,iBAAiB,EAChC,MAAMvF,EAAUoG,sBAEhBhH,EAAM6F,aAAaJ,MAAQ,GAE3BwB,WAAW,IAAM,CACfd,EAAe,wBAAwB,EACvC1C,EAAayD,KAAK,kBAAkB,EAEpCD,WAAW,IAAM,CACf/G,SAASC,KAAO,gBACf,GAAI,GACN,GAAI,CAAA,CACR,EAGCC,EAAAC,EAAA,CAAAE,SACEH,EAAA,OAAA,CAAM6E,MAAM,WAAWkC,GAAG,eAAc5G,SAAC,iCAAA,CAEzC,CAAA,CACC,CAEP,CChFO,SAAS6G,IAAS,CACvB,OAAOhH,EAAA,SAAA,CAAQoE,UAAU,mBAAkBjE,SAAC,WAAA,CAAkB,CAChE,CCUO,SAAS8G,IAAM,CACdC,MAAAA,EAAQC,EAAW1G,OAAO2G,QAAQ,EACxC,OACElH,EAAAD,EAAA,CAAAE,UACEH,EAACgH,GAAM,CAAA,CAAA,EACPhH,EAAA,MAAA,CAAK6E,MAAM,MAAK1E,SACdD,EAACmH,EAAM,CAACC,QAASC,EAAoB,EAAApH,SAAA,CACnCH,EAACwH,EAAQ,CAACC,KAAK,IAAGtH,SAChBH,EAACL,EAAQ,CAAA,GAAKuH,CAAAA,CAAK,CAAA,CACV,EACXlH,EAACwH,EAAQ,CAACC,KAAK,iBAAgBtH,SAC7BH,EAACO,EAAa,EAAA,CAAA,CACL,EACXP,EAACwH,EAAQ,CAACC,KAAK,cAAatH,SAC1BH,EAAC6F,GAAS,CAAA,GAAKqB,CAAAA,CAAK,CAAA,CACX,EACXlH,EAACwH,EAAQ,CAACC,KAAK,aAAYtH,SACzBH,EAACwF,GAAS,CAAA,GAAK0B,CAAAA,CAAK,CAAA,CACX,CAAA,CAAA,CAAA,CACJ,CAAA,EAEXlH,EAAC2F,GAAS,CAAA,CAAA,CAAA,CAAA,CACT,CAEP,CCnCO,MAAM+B,EAAiB,CAuB5BC,aAAc,CAtBdC,EAAAA,mBACAC,EAAAA,2BACAC,EAAAA,gBACAC,EAAAA,iBACArE,EAAAA,gBACAsE,EAAAA,mBACAC,EAAAA,uBAKAC,EAAAA,wBAIAC,EAAAA,uBAKAC,EAAAA,wBACAC,EAAAA,0BAEE,KAAKT,WAAa,KAElB,KAAKC,mBAAqB,gBAAkB,CAC1C,OAAO,IAAIS,QAAc,CAACC,EAASC,IAAW,CAC5C,IAAIC,EAAYhI,OAAOiI,UAAUC,KAAK,qBAAsB,CAAC,EAEnDC,EAAAA,gBAAkB,SAAUC,EAAO,CAC3C,MAAMvF,EAAKmF,EAAUnC,OAErBhH,EAAI,KAAM,MAAOuJ,EAAMC,WAAY,MAAOD,EAAME,UAAU,EACtDF,EAAMC,WAAa,IACrBxJ,EACE,KACA,kFAAkF,EAE9DgE,EAAG0F,kBAAkB,UAAW,CACpDC,cAAe,GACfC,QAAS,KAAA,CACV,EAEaC,YAAY,SAAU,KAAK,GAEvCN,EAAMC,WAAa,IACrBxJ,EAAI,KAAM,qDAAqD,EAEnCgE,EAAG0F,kBAAkB,iBAAkB,CACjEC,cAAe,GACfC,QAAS,KAAA,CACV,EAEmBC,YAAY,SAAU,KAAK,EAElB7F,EAAG0F,kBAC9B,kBACA,CACEC,cAAe,GACfC,QAAS,KAAA,CACV,EAGkBC,YAAY,SAAU,KAAK,EAClD,EAGQC,EAAAA,UAAY,SAAUC,EAAQ,CACtC/J,EAAI,KAAM,iBAAiB,EACtBsI,EAAAA,WAAayB,EAAEC,OAAOhD,OAElBiC,GAAA,EAGDgB,EAAAA,QAAU,SAAUV,EAAO,CACnCvJ,EAAI,KAAM,yBAAyB,EACnCkJ,EAAOK,CAAK,CAAA,CACd,CACD,CAAA,EAGYW,eAAAA,EAASC,EAAmBC,EAAarE,EAAY,CAClE,OAAO,IAAIiD,QAAc,CAACC,EAASC,IAAW,CAMtCmB,MAAAA,EALcC,EAAKhC,WAAYiC,YACnCJ,EACA,WAAW,EAEmBK,YAAYL,CAAS,EACzBM,IAAI,CAC9BL,IAAAA,EACArE,MAAAA,CAAAA,CACD,EAEDsE,EAAQP,UAAY,UAAY,CACrBb,GAAA,EAGHgB,EAAAA,QAAU,SAAUV,EAAO,CACjCL,EAAOK,CAAK,CAAA,CACd,CACD,CACH,CAEemB,eAAAA,EAAkBP,EAAmBQ,EAAS,KAAM,CACjE,OAAO,IAAI3B,QAAQ,CAACC,EAASC,IAAW,CAGhCmB,MAAAA,EAFcC,EAAKhC,WAAYiC,YAAYJ,EAAW,UAAU,EACtCK,YAAYL,CAAS,EACzBS,SAE5BP,EAAQP,UAAY,UAAY,CAC9B,MAAM9C,EAASqD,EAAQrD,OAGbA,EADN2D,EACM3D,EAAO2D,OAAOA,CAAM,EAEpB3D,CAFqB,CAG/B,EAGMiD,EAAAA,QAAU,SAAUV,EAAO,CACjCL,EAAOK,CAAK,CAAA,CACd,CACD,CACH,CAEA,eAAesB,EACbV,EACAC,EACAU,EAA2B,KAC3B,CACA,OAAO,IAAI9B,QAAQ,CAACC,EAASC,IAAW,CAGhCmB,MAAAA,EAFcC,EAAKhC,WAAYiC,YAAYJ,EAAW,UAAU,EACtCK,YAAYL,CAAS,EACzBzI,IAAI0I,CAAG,EAE3BN,EAAAA,UAAY,SAAUP,EAAY,CACpCA,EAAMS,OAAOhD,OACPuC,EAAAA,EAAMS,OAAOhD,OAAOjB,KAAK,EAEjCkD,EAAQ6B,CAAY,CACtB,EAGMb,EAAAA,QAAU,SAAUV,EAAO,CACjCL,EAAOK,CAAK,CAAA,CACd,CACD,CACH,CAEewB,eAAAA,EAAYZ,EAAmBC,EAAa,CACzD,OAAO,IAAIpB,QAAc,CAACC,EAASC,IAAW,CAMtCmB,MAAAA,EALcC,EAAKhC,WAAYiC,YACnCJ,EACA,WAAW,EAEmBK,YAAYL,CAAS,EACzBa,OAAOZ,CAAG,EAEtCC,EAAQP,UAAY,UAAY,CACrBb,GAAA,EAGHgB,EAAAA,QAAU,SAAUV,EAAO,CACjCL,EAAOK,CAAK,CAAA,CACd,CACD,CACH,CAEKf,KAAAA,QAAU,eAAgB4B,EAAarE,EAAY,CACtD,OAAO,MAAMmE,EAAS,UAAWE,EAAKrE,CAAK,CAAA,EAGxC0C,KAAAA,SAAW,eAAgBnE,EAAsC,CACpE,QAAS2G,KAAQ3G,EACf,MAAM4F,EAAS,UAAWe,EAAKb,IAAKa,EAAKlF,KAAK,CAChD,EAGF,KAAK3B,QAAU,eACbgG,EACAU,EAA2B,KAC3B,CACA,OAAO,MAAMD,EAAS,UAAWT,EAAKU,CAAY,CAAA,EAG/CpC,KAAAA,WAAa,eAAgB0B,EAAa,CACtC,OAAA,MAAMW,EAAY,UAAWX,CAAG,CAAA,EAGzC,KAAKzB,eAAiB,eACpBuC,EACAd,EACArE,EACA,CACA,OAAO,MAAMmE,EAASgB,EAAad,EAAKrE,CAAK,CAAA,EAG1C6C,KAAAA,gBAAkB,eACrBsC,EACA5G,EACA,CACA,QAAS2G,KAAQ3G,EACf,MAAM4F,EAASgB,EAAaD,EAAKb,IAAKa,EAAKlF,KAAK,CAClD,EAGF,KAAK8C,eAAiB,eACpBqC,EACAd,EACAU,EAAe,KACf,CACA,OAAO,MAAMD,EAASK,EAAad,EAAKU,CAAY,CAAA,EAGtD,KAAKhC,gBAAkB,eAAgBoC,EAAqBP,EAAS,KAAM,CAClE,OAAA,MAAMD,EAAkBQ,EAAaP,CAAM,CAAA,EAG/C5B,KAAAA,kBAAoB,eAAgBmC,EAAqBd,EAAa,CAClE,OAAA,MAAMW,EAAYG,EAAad,CAAG,CAAA,EAG3C,IAAIE,EAAO,KAEJ,OAAA,IACT,CACF,CC7NO,MAAMa,EAAa,CAIxB9C,aAAc,CAHd+C,EAAAA,uBACAnH,EAAAA,yBACAuD,EAAAA,aAEE,YAAK4D,eAAiB,GAOjBnH,KAAAA,iBAAmB,SACtBoH,EACAC,EACA,CACAtL,EAAK,mBAAmBqL,CAAS,EACjC,KAAKD,eAAe1I,KAAK,CAAE2I,UAAAA,EAAsBE,QAASD,CAAAA,CAAc,CAAA,EAQrE9D,KAAAA,KAAO,eAAgB6D,KAAsBnL,EAAe,CAI/D,OAHmBC,KAAKgE,MACrB,MAAMhD,OAAO6C,GAAGI,QAAQ,cAAc,GAAM,OAAO,EAGhDpE,EAAA,iBAAkBqL,EAAW,GAAGnL,CAAM,EAE1CF,EAAI,iBAAkBqL,CAAS,EAE1B,IAAIrC,QAAQ,CAACC,EAASC,IAAW,CACjCkC,KAAAA,eACFT,OAAea,GAAAA,EAAGH,WAAaA,CAAS,EACxCI,QAAQ,MAAOC,GAAM,CAChB,GAAA,CACIA,MAAAA,EAAEH,QAAQ,GAAGrL,CAAM,QAClB6J,GACH/J,EAAA,cAAeqL,EAAWtB,CAAC,EAC/B4B,QAAQC,MAAM7B,CAAC,EACfb,EAAOa,CAAC,CACV,CAAA,CACD,EAEHd,EAAQ,EAAI,CAAA,CACb,CAAA,EAGHjJ,EAAI,eAAgB,aAAa,EAE1B,IACT,CACF,CC9DY6L,IAAAA,GAAAA,IACVC,EAAAA,EAAAA,KAAO,CAAPA,EAAAA,OACAC,EAAAA,EAAAA,OAAS,CAATA,EAAAA,SACAC,EAAAA,EAAAA,QAAU,CAAVA,EAAAA,UACAC,EAAAA,EAAAA,WAAa,CAAbA,EAAAA,aACAC,EAAAA,EAAAA,QAAU,CAAVA,EAAAA,UACAC,EAAAA,EAAAA,qBAAuB,EAAvBA,EAAAA,uBANUN,IAAAA,GAAAA,CAAAA,CAAAA,ECQL,MAAMO,EAAc,CAgBzB/D,YAAYgE,EAAsC,CAflDC,EAAAA,0BAKAC,EAAAA,+BAIAC,EAAAA,yBACAC,EAAAA,oBACAC,EAAAA,kBACAC,EAAAA,4BACAC,EAAAA,yBAQE,KAAKA,iBAAmBP,EAExB,KAAKC,kBAAoB,SACvBO,EACAC,EACAC,EACgB,CAChB,IAAIC,EACFH,EAAYI,qBAAqBC,aAC/BJ,EAAiBK,yBAAyB,EAE1CC,EACFP,EAAYI,qBAAqBC,aAC/BH,EAAqBM,uBAAuB,EAG5CC,EACF,KAAKV,iBAAiBW,sBACnBC,+BAA+BV,EAAiBW,gBAAgB,EAEjE7J,EAAaoJ,EAAeU,MAC5B7I,EAAcmI,EAAenI,YAC7BE,EAAsBiI,EAAejI,oBAErCiI,OAAAA,EAAeU,OAASV,EAAeW,WACzC/J,GAAcwJ,EAA0BM,MACxC7I,GAAeuI,EAA0BvI,YACzCE,GAAuBqI,EAA0BrI,qBAGV,CACvCS,KAAO,eAAc5B,IACrB6B,YAAaqH,EAAiBc,kBAAkBpI,KAChDJ,KAAO,GAAEkI,EAAmBM,kBAAkBxI,OAC9CpD,UAAW8K,EAAiB9K,UAC5BC,QAAS6K,EAAiB7K,QAC1B4C,YAAAA,EACAE,oBAAAA,EACAe,KAAM,aACN+H,MAAO,GACPjJ,qBAAsB,EACtBkJ,oBAAqB,CAAA,CAEhBC,EAGJxB,KAAAA,uBAAyB,SAAUyB,EAAQC,EAA0B,CACxE,GAAI,CAACD,GAAUA,EAAOE,QAAQ,OAAO,IAAM,GAAWF,OAAAA,EACtD,IAAIG,EAAa,eAEbC,EAAaJ,EAAOK,MAAMF,CAAU,EAExC,IAAIG,EAAYN,EAEhB,GAAII,EACF,QAASG,EAAI,EAAGA,EAAIH,EAAW/J,OAAQkK,IAAK,CACtCF,IAAAA,EAAQD,EAAWG,CAAC,EACpBC,EAASH,EAAMA,MAAM,KAAK,EAC9B,GAAIG,EAAQ,CACNC,IAAAA,EAAkBD,EAAO,CAAC,EAC1BE,EAAcT,EAAiBQ,CAAU,EAEzCC,IACUJ,EAAAA,EAAUK,QAAQN,EAAOK,CAAW,IAMjDJ,OAAAA,CAAAA,EAGJ9B,KAAAA,iBAAmB,SAAUK,EAAkC,CAClE,IAAI+B,EAAqC,CAAA,EAErCC,EAAgBC,OAAOC,KACzBlC,EAAYI,qBAAqBzJ,UAAU,EAG7C,QAASwL,KAAgBH,EAAe,CACtC,IAAII,EACFpC,EAAYI,qBAAqBzJ,WAAWwL,CAAY,EAEtDE,EAAuC,CACzC1J,KAAM,KAAK+G,uBACT0C,EAAUE,cACVtC,EAAYuC,uBAAuBC,mBAAmB,EAExD5J,YAAa,KAAK8G,uBAChB0C,EAAUK,qBACVzC,EAAYuC,uBAAuBC,mBAAmB,EAExDxB,MAAOoB,EAAUpB,MACjBzI,KAAM6J,EAAUM,cAChBzJ,KAAM,YACNlB,qBAAsB,EACtBkJ,oBAAqB,CAAA,EAWvB,GARImB,EAAUjN,YACZkN,EAAkBlN,UAAYiN,EAAUjN,WAGtCiN,EAAUhN,UACZiN,EAAkBjN,QAAUgN,EAAUhN,SAGpCgN,EAAUO,iBAAmBP,EAAUO,gBAAgBnL,OAAS,GACzDoL,QAAAA,KAASR,EAAUO,gBAI1B,GAHIC,EAAMC,UACRR,EAAkBQ,QAAU,IAE1BD,EAAME,OAAOC,SAAW,CAACH,EAAME,OAAOE,WAEtCJ,EAAME,OAAOG,gBACbL,EAAME,OAAOG,eAAezL,OAAS,GAE5B0L,QAAAA,KAAQN,EAAME,OAAOG,eACxB,GAAA,CAACC,EAAKC,SAAU,CACd,OAAOD,EAAKpL,SAAa,MAC3BuK,EAAkBnK,oBAAsBgL,EAAKpL,UAG3C,OAAOoL,EAAKE,gBAAoB,MAClCf,EAAkBrK,YAAckL,EAAKE,iBAIrC,OAAOF,EAAKG,8BAAkC,MAE9ChB,EAAkBtK,qBAChBmL,EAAKG,+BAIP,OAAOH,EAAKI,6BAAiC,MAE7CjB,EAAkBpB,oBAChBiC,EAAKI,+BAINjB,EAAkB9J,MAAQ,IAAIf,QAAU,GACzC,OAAO0L,EAAKK,aAAiB,MAE7BlB,EAAkB9J,KAAO2K,EAAKK,cAGhC,QAQZ,GAAInB,EAAUoB,YAAcpB,EAAUoB,WAAWhM,OAAS,EAC/CiM,QAAAA,KAAYrB,EAAUoB,WAAY,CACzC,GAAIC,EAASC,YAAcD,EAASC,WAAWlM,OAAS,GAC7CmM,QAAAA,KAAaF,EAASC,WACzB,GAAA,CAACC,EAAUC,UAAUT,SAAU,CAC7B,OAAOQ,EAAUC,UAAU9L,SAAa,MACxBI,EAAAA,oBAChByL,EAAUC,UAAU9L,UAItB,OAAO6L,EAAUN,8BACjB,MAEAhB,EAAkBtK,qBAChB4L,EAAUN,+BAIZ,OAAOM,EAAUL,6BACjB,MAEAjB,EAAkBpB,oBAChB0C,EAAUL,8BAIZ,OAAOK,EAAUC,UAAUR,gBAAoB,MAE7BpL,EAAAA,YAChB2L,EAAUC,UAAUR,iBAGxB,OAIN,MAIJrB,EAAclM,KAAKwM,CAAiB,EAG/BN,OAAAA,CAAAA,EAGT,MAAM8B,EAAiB,GAElBjE,KAAAA,YAAc,SAAUI,EAA+B,CAC1D,IAAI8D,EAA+B,CAAA,EAE/BC,IAAAA,EAAc/D,EAAYgE,mBAAmBlG,OAC9CM,GAAcA,EAAK6F,wBAA0BJ,CAAc,EAG9D,QAASK,KAAUH,EAAa,CAK9B,IAAII,EAHFnE,EAAYoE,eAAeC,WAAW1K,KAAKuK,EAAOI,cAAc,EAC7DD,WAEgCvG,OAClCyG,GAAa,CAACA,EAAIpB,QAAQ,EAI7B,GAAIgB,EAAgB3M,SAAW,EAE/B,QAASoM,KAAaO,EAAiB,CACrC,IAAIK,EAAiC,CACnC7L,KAAM,KAAK+G,uBACTwE,EAAOO,kBACPzE,EAAYuC,uBAAuBC,mBAAmB,EAExD5J,YAAa,KAAK8G,uBAChBwE,EAAOQ,yBACP1E,EAAYuC,uBAAuBC,mBAAmB,EAExDxB,MAAO,IACPzI,KAAM2L,EAAOS,kBACb1L,KAAM,SACNlB,qBAAsB,EACtBkJ,oBAAqB,EACrB4B,SAAUqB,EAAOnJ,MAAQiE,EAAUG,UAAYH,EAAUG,QACzDpE,MAAOmJ,EAAOnJ,KAAAA,EAGZ,OAAOmJ,EAAOU,eAAmB,MACnCJ,EAAepP,QAAU8O,EAAOU,eAI9B,IAAI1Q,KAAKgQ,EAAOU,cAAc,EAAEzQ,QAAO,EAASD,IAAAA,OAAOC,YAMvD,OAAOyP,EAAUR,gBAAoB,MACvCoB,EAAexM,YAAc4L,EAAUR,gBAGrC,OAAOQ,EAAUP,8BAAkC,MAEnDmB,EAAezM,qBACb6L,EAAUP,+BAGV,OAAOO,EAAUN,6BAAiC,MACpDkB,EAAevD,oBACb2C,EAAUN,8BAGV,OAAOM,EAAU9L,SAAa,MAChC0M,EAAetM,oBAAsB0L,EAAU9L,UAG7C,OAAO8L,EAAUiB,6BAAiC,MAEpDL,EAAe5L,YAAc,KAAK8G,uBAChCkE,EAAUiB,6BACV7E,EAAYuC,uBAAuBC,mBAAmB,GAI1DsB,EAAWjO,KAAK2O,CAAc,IAK7BV,OAAAA,CAAAA,EAGT,MAAMgB,EAAkB,WAEnBjF,YAAAA,UAAY,SAAUG,EAA8B,CACvD,IAAI+E,EAA6B,CAAA,EAEjC,IAAIC,EAAahF,EAAYgE,mBAAmBlG,OAC7CM,GACCA,EAAK6G,aAAeH,GACpB,CAACjB,CAAc,EAAE/F,OAAc4D,GAAAA,GAAKtD,EAAK6F,qBAAqB,EAC3DzM,OAAS,CAAC,EAGb0N,IAAAA,EAAsBF,EAAWlH,OAClCM,GAAc,OAAOA,EAAKkG,eAAmB,GAAW,EAGvDa,EAAwBH,EAAWlH,OACpCM,GAAc,OAAOA,EAAKkG,eAAmB,GAAW,EAG3D,QAASc,KAAiBF,EAAqB,CAC7C,IAAIG,EACFrF,EAAYoE,eAAeC,WAAW1K,KACpCyL,EAAcd,cAAc,EAGhC,GAAIe,EAAgB,CACZC,MAAAA,EAAcD,EAAehB,WAAWvG,OAC3C8F,GAAmBA,EAAU2B,SAAW,CAAC3B,EAAUT,QAAQ,EAG9D,QAASS,KAAa0B,EAAa,CACjC,IAAIE,EAA+B,CACjC7M,KAAM,KAAK+G,uBACT0F,EAAcX,kBACdzE,EAAYuC,uBAAuBC,mBAAmB,EAExD5J,YAAa,KAAK8G,uBAChB0F,EAAcV,yBACd1E,EAAYuC,uBAAuBC,mBAAmB,EAExDxB,MAAO,IACPzI,KAAM6M,EAAcT,kBACpB1L,KAAM,QACNlB,qBAAsB,EACtBkJ,oBAAqB,EACrB4B,SACGuC,EAAcrK,MAAQiE,EAAUG,UAAYH,EAAUG,QACzDpE,MAAOqK,EAAcrK,KAAAA,EAGnB,OAAO6I,EAAUR,gBAAoB,MACvCoC,EAAcxN,YAAc4L,EAAUR,gBAGpC,OAAOQ,EAAUP,8BAAkC,MAEnDmC,EAAczN,qBACZ6L,EAAUP,+BAIZ,OAAOO,EAAUN,6BAAiC,MAElDkC,EAAcvE,oBACZ2C,EAAUN,8BAGV,OAAOM,EAAU9L,SAAa,MAChC0N,EAActN,oBAAsB0L,EAAU9L,UAI9C,OAAO8L,EAAUiB,6BAAiC,MAGlDW,EAAc5M,YAAc,KAAK8G,uBAC/BkE,EAAUiB,6BACV7E,EAAYuC,uBAAuBC,mBAAmB,GAI1DuC,EAAUlP,KAAK2P,CAAa,KAMpC,QAASC,KAAoBN,EAAuB,CAClD,IAAIO,GACF1F,EAAYI,qBAAqBuF,0BAC/BF,EAAiBG,QAAQ,GACtB,CACL9H,GAAAA,OAAQ8F,GAAmBA,EAAU2B,SAAW,CAAC3B,EAAUT,QAAQ,EAErE,QAASS,KAAa8B,EAAiB,CACrC,IAAIF,EAA+B,CACjC7M,KAAM,KAAK+G,uBACT+F,EAAiBhB,kBACjBzE,EAAYuC,uBAAuBC,mBAAmB,EAExD5J,YAAa,KAAK8G,uBAChB+F,EAAiBf,yBACjB1E,EAAYuC,uBAAuBC,mBAAmB,EAExDxB,MAAO,IACPzI,KAAMkN,EAAiBd,kBACvB1L,KAAM,QACNlB,qBAAsB,EACtBkJ,oBAAqB,EACrB4B,SACG4C,EAAiB1K,MAAQiE,EAAUG,UAAYH,EAAUG,QAC5DpE,MAAO0K,EAAiB1K,KAAAA,EAGtB,OAAO6I,EAAUR,gBAAoB,MACvCoC,EAAcxN,YAAc4L,EAAUR,gBAGpC,OAAOQ,EAAUP,8BAAkC,MAEnDmC,EAAczN,qBACZ6L,EAAUP,+BAGV,OAAOO,EAAUN,6BAAiC,MACpDkC,EAAcvE,oBACZ2C,EAAUN,8BAGV,OAAOM,EAAU9L,SAAa,MAChC0N,EAActN,oBAAsB0L,EAAU9L,UAG5C,OAAO8L,EAAUiB,6BAAiC,MAEpDW,EAAc5M,YAAc,KAAK8G,uBAC/BkE,EAAUiB,6BACV7E,EAAYuC,uBAAuBC,mBAAmB,GAI1DuC,EAAUlP,KAAK2P,CAAa,IAK3BT,OAAAA,CAAAA,EAGJjF,KAAAA,oBAAsB,SACzBE,EAC2B,CAC3B,IAAI6F,EAA8C,CAAA,EAE9CC,EAAsB7D,OAAOC,KAC/BlC,EAAY6F,iBAAiB/O,OAAO,EAEtC,QAASyG,KAAOuI,EAAqB,CACnC,IAAIC,EAAkB/F,EAAY6F,iBAAiB/O,QAAQyG,CAAG,EAC9D,GACE,OAAOwI,EAAgB1B,WAAe,MACrC0B,EAAgBC,YAAc,IAAIxO,SAAW,EAE9C,SAEEyO,IAAAA,EAAmBF,EAAgB1B,WAAWvG,OAC/C8F,GAAmBA,EAAU2B,SAAW,CAAC3B,EAAUT,QAAQ,EAG9D,QAASS,KAAaqC,EAAkB,CACtC,IAAIC,EAA+C,CACjDvN,KAAMoN,EAAgBC,WACtB/M,KAAM,kBACN+H,MAAO,IACPzI,KAAMwN,EAAgBI,WAEtBvN,YAAc,GAAEgL,EAAUiB,8BAAgC,KAC1D3M,oBAAqB0L,EAAU9L,SAC/BE,YAAa4L,EAAUR,gBACvBrL,qBAAsB6L,EAAUP,8BAChCpC,oBAAqB2C,EAAUN,6BAC/BvI,MAAOgL,EAAgBhL,KAAAA,EAGzB8K,EAAiBhQ,KAAKqQ,CAAmB,GAItCL,OAAAA,CAAAA,EAGF,IACT,CACF,CC5fO,MAAMO,EAAkB,CAyC7B5K,YAAY6K,EAAkBC,EAAiB,CAxC/CpM,EAAAA,6BACApF,EAAAA,iBACAyR,EAAAA,qBACAlM,EAAAA,6BAIAG,EAAAA,+BAGAgM,EAAAA,+BACA/L,EAAAA,4BACAgM,EAAAA,oBAGAC,EAAAA,2BACAC,EAAAA,qBACAC,EAAAA,0BACAC,EAAAA,uBAIAvM,EAAAA,+BACAwM,EAAAA,2BAGAC,EAAAA,oCACAC,EAAAA,uCACArP,EAAAA,yBAEA0O,EAAAA,iBACAY,EAAAA,wBACAC,EAAAA,uBACAxG,EAAAA,8BACAyG,EAAAA,oBACA5N,EAAAA,gBACA6N,EAAAA,uBACAC,EAAAA,qBACAC,EAAAA,gBAGEC,EAAK,cAAc,EAEnB,MAAMpQ,EAAK7C,OAAO6C,GACZD,EAAe5C,OAAO4C,aAEtBsQ,EAAiB,2BACjBhR,EAAiB,yBACjBiR,EAAgB,kCAOhBC,EAAmB,CACvB,gCACA,4BACA,4BACA,6BACA,yBACA,+BACA,8BACA,2BACA,0BACA,gCACA,gCACA,mCACA,iCACA,6BACA,0BACA,6BACA,6BACA,yBACA,oCACA,+BACA,wBACA,0BACA,0BACA,8BACA,wBACA,wBAAwB,EAGpBC,EAAoB,CACxB1I,KAAM,EACN2I,SAAU,IACVC,eAAgB,IAChBC,mBAAoB,IACpBC,kBAAmB,IACnBC,mBAAoB,IACpBC,eAAgB,IAChBC,WAAY,IACZC,qBAAsB,IACtBC,sBAAuB,IACvBC,oBAAqB,IACrBC,oBAAqB,IACrBC,mBAAoB,IACpBC,cAAe,IACfC,eAAgB,IAChBC,UAAW,IACXC,eAAgB,IAChBC,UAAW,IACXC,YAAa,IACbC,gBAAiB,IACjBC,eAAgB,IAChBC,eAAgB,IAChBC,mBAAoB,IACpBC,kBAAmB,IACnBC,QAAS,IACTC,iBAAkB,IAClBC,YAAa,IACbC,OAAQ,IACRC,gBAAiB,IACjBC,kBAAmB,IACnBC,aAAc,IACdC,QAAS,IACTC,WAAY,IACZC,QAAS,KACTC,gBAAiB,IAAA,EAUnB,KAAK1C,YAAc,KACnB,KAAKF,gBAAkBX,EACvB,KAAKD,SAAWA,EAChB,KAAK3F,sBAAwB,GAC7B,KAAK2G,aAAe,GAEpB,SAASE,KAAQlU,EAAe,CAC9BF,EAAI,QAASE,CAAM,CACrB,CAEA,eAAeyW,EACbC,EACAxV,EACAyV,EAAmB,KACnBC,EAA4B,KAC5B,CACA,IAAIC,EAAkC,CAAA,EAUtC,OARIF,IAAS,MAAQC,IAAkB,QACrCC,EAAQ,cAAc,EAAI,mBAClBA,EAAA,WAAW,EAAIzM,EAAK4I,SACxB4D,IAAkB,OACpBC,EAAQD,cAAiB,UAASA,MAIlCD,IAAS,KACJ,MAAMG,MAAM5V,EAAK,CACtBwV,OAAAA,EACAG,QAAAA,EACAF,KAAAA,CAAAA,CACD,EAEM,MAAMG,MAAM5V,EAAK,CACtBwV,OAAAA,EACAG,QAAAA,CAAAA,CACD,CAEL,CAEA,eAAeE,GAAwB,CAChB,MAAMjT,EAAGI,QAAQ,qBAAqB,EAExCrD,KAAK+B,QACtBsR,EAAK,2BAA2B,EAChC,MAAM9J,EAAK8I,eAEf,CAEA,SAAS8D,EAAoBC,EAAoB,CAE/C,GAAIA,EAAcvL,MAChBwI,OAAAA,EAAK,uBAAwBjU,KAAKC,UAAU+W,CAAa,CAAC,EAE1DnT,EAAG0E,WAAW,cAAc,EAC5B1E,EAAG0E,WAAW,qBAAqB,EACnC1E,EAAG0E,WAAW,qBAAqB,EACnC1E,EAAG0E,WAAW,4BAA4B,EAC1C1E,EAAG0E,WAAW,2BAA2B,EAElC,GAINF,EAAAA,QAAQ,eAAgB2O,EAAcC,YAAY,EAClD5O,EAAAA,QAAQ,sBAAuB2O,EAAcE,aAAa,EAG7D,IAAIC,EAAevW,KAAK+B,IAAK,EAAGqU,EAAcI,WAAa,IACxD/O,EAAAA,QAAQ,sBAAuB8O,CAAY,EAG9C,IAAIE,EACFzW,KAAK+B,IAAK,EAAGqU,EAAcM,mBAAqB,IAC/CjP,OAAAA,EAAAA,QAAQ,6BAA8BgP,CAAmB,EAGzDhP,EAAAA,QAAQ,4BAA6B2O,EAAcO,aAAa,EAE5D,EACT,CAEA,KAAKpQ,oBAAsB,SAAY,CACrC8M,EAAK,2BAA2B,EAEhC,IAAIuD,EAAkB,MAAM3T,EAAGI,QAAQ,UAAU,EAC7CuT,IAAoB,OACjB5D,EAAAA,eAAiB5T,KAAKgE,MAAMwT,CAAe,GAGlD,IAAIC,EAAyB,MAAM5T,EAAGI,QAAQ,iBAAiB,EAC3DwT,IAA2B,OAC7BtN,EAAK0J,YAAc4D,GAGrBtN,EAAKjD,uBAAwB,EAE7B,QAASwQ,KAAYtD,EAAkB,CACrC,IAAIuD,EAAc,MAAM9T,EAAGI,QAAS,kBAAiByT,GAAU,EAC3DC,IAAgB,OAClBxN,EAAKiD,sBAAsBsK,CAAQ,EAAI1X,KAAKgE,MAAM2T,CAAW,GAIjE,IAAIC,EAAW,MAAM/T,EAAGI,QAAQ,iBAAiB,EAC7C2T,IAAa,OACV3R,EAAAA,QAAUjG,KAAKgE,MAAM4T,CAAQ,GAGpC,IAAIC,EAAkB,MAAMhU,EAAGI,QAAQ,wBAAwB,EAC3D4T,IAAoB,OACjB/D,EAAAA,eAAiB9T,KAAKgE,MAAM6T,CAAe,GAGlD5D,EAAK,0BAA0B,EAC/BrQ,EAAayD,KAAK,qBAAqB,CAAA,EAGzC,KAAKT,qBAAuB,SAAY,CAClC,GAAA,CACF,MAAMkQ,EAAuB,EAC7B,MAAM1W,EAAmB,MAAMyD,EAAGI,QAAQ,cAAc,IAAO,KAClDoD,OAAAA,EAAAA,KAAK,yBAA0BjH,CAAe,EACpDA,QACAwJ,GACPqK,OAAAA,EAAK,kCAAmCrK,CAAC,EAC5BvC,EAAAA,KAAK,yBAA0B,EAAK,EAC1C,EACT,CAAA,EAGG7F,KAAAA,SAAW,MAAOiG,EAAetG,IAAiB,CAC/C2W,MAAAA,EAAe,MAAMtB,EACzB,OACC,GAAEtC,WAAwB/J,EAAKwJ,kBAChC3T,KAAKC,UAAU,CACbkB,KAAAA,CACD,CAAA,CAAC,EAGA2W,GAAAA,EAAatI,SAAW,IAAK,CAC3BwH,IAAAA,EAAgB,MAAMc,EAAaC,OAEnChB,OAAAA,EAAoBC,CAAa,EACnCpT,EAAayD,KAAK,uBAAuB,EAEzCzD,EAAayD,KAAK,sBAAsB,EAEnC2P,EAGP/C,EAAA,sBACA6D,EAAatI,OACbsI,EAAaE,WACb,MAAMF,EAAavR,MAAM,EAE3B3C,EAAayD,KAAK,sBAAsB,CAAA,EAG1C,KAAK4L,aAAe,SAAY,CAC9B,MAAMA,EAAe,MAAMpP,EAAGI,QAAQ,qBAAqB,EAC3D,GAAIgP,GAAgB,KACL5L,OAAAA,EAAAA,KAAK,wBAAyB,IAAI,EACxC,KAGHyQ,MAAAA,EAAe,MAAMtB,EACzB,OACC,GAAEtC,aAA0B/J,EAAKwJ,kBAClC3T,KAAKC,UAAU,CACbiX,cAAejE,CAChB,CAAA,CAAC,EAGA6E,GAAAA,EAAatI,SAAW,IAAK,CAC3BwH,IAAAA,EAAgB,MAAMc,EAAaC,OAEnChB,EAAoBC,CAAa,EACnCpT,EAAayD,KAAK,0BAA0B,EAE5CzD,EAAayD,KAAK,yBAAyB,EAG7C,YAEAzD,EAAayD,KAAK,yBAAyB,CAC7C,EAGF,KAAKN,qBAAuB,UAC1BkN,EAAK,2BAA2B,EACzB,IAAIpL,QAAQ,eAAgBC,EAASC,EAAQ,CAC9CkP,IAAAA,EAAW,MAAM9N,EAAKgJ,cAE1B,GAAI8E,GAAY,KACdhE,OAAAA,EAAK,qBAAqB,EACnB,KAGT,IAAIJ,EAAe,MAAMhQ,EAAGI,QAAQ,iBAAiB,GAAM,OAEvDgU,GAAAA,EAASC,SAASC,UAAYtE,EAAa,CAEvChQ,MAAAA,EAAG0E,WAAW,oBAAoB,EAClC1E,MAAAA,EAAG0E,WAAW,UAAU,EACxB1E,MAAAA,EAAG0E,WAAW,iBAAiB,EAErC,QAASmP,KAAYtD,EACbvQ,MAAAA,EAAG0E,WAAY,kBAAiBmP,GAAU,EAGlDvN,EAAKyJ,eAAiBqE,EAASC,SAE/B,MAAMrU,EAAGwE,QAAQ,kBAAmB4P,EAASC,SAASC,OAAO,EAC7D,MAAMtU,EAAGwE,QAAQ,WAAYrI,KAAKC,UAAUkK,EAAKyJ,cAAc,CAAC,EAChE,MAAM/P,EAAGwE,QAAQ,qBAAsBzH,KAAK+B,IAAK,CAAA,EAEzCmG,EAAA,CAAEsP,gBAAiB,GAAMD,QAAShO,EAAK0J,WAAAA,CAAa,EAC5DI,EAAK,kBAAkB,EACvB,OAGF9J,EAAKyJ,eAAiBqE,EAASC,SAEvBpP,EAAA,CAAEsP,gBAAiB,GAAOD,QAAShO,EAAK0J,WAAAA,CAAa,EAC7DI,EAAK,gCAAgC,CAAA,CACtC,GAGE/M,KAAAA,uBAAyB,eAC5BmR,EAA6B,GAC7B,CACA,IAAIpR,EAA+B,CAAA,EAEnC,QAASyQ,KAAYtD,EACR,MAAMvQ,EAAGI,QAAS,kBAAiByT,GAAU,IAC3C,MACXzQ,EAAmB1E,KAAKmV,CAAQ,EAIhCzQ,GAAAA,EAAmB/C,OAAS,GAAKmU,EAA4B,CAC/D,QAASX,KAAYzQ,EACbpD,MAAAA,EAAG0E,WAAY,kBAAiBmP,GAAU,EAG5CvN,MAAAA,EAAK+I,uBAAuBjM,CAAkB,EAG/CA,OAAAA,CAAAA,EAGT,KAAKiM,uBAAyB,eAAgBoF,EAAwB,GAAI,CACxE,QAASZ,KAAYY,EACnB,MAAMC,EAA2Bb,CAAQ,CAC3C,EAGF,eAAea,EAA2Bb,EAAkB,CAC1D,IAAIO,EAAW9N,EAAKyJ,eAEd4E,MAAAA,EAAgBd,EACnBlJ,QAAQ,UAAW,EAAE,EACrBiK,MAAM,WAAW,EACjBjW,KAAK,GAAG,EAEE6E,EAAAA,KAAK,eAAiB,WAAUmR,GAAe,EAEtDE,MAAAA,EAAsB,MAAMlC,EAChC,MACC,GAAEtT,IAAiB+U,EAASU,+BAA+BC,GAAGlB,CAAQ,GAAG,EAGtDgB,EAAoB9B,QAAQrV,IAAI,gBAAgB,EAGtE,IAAIsX,EAAS,EAEb,MAAMC,EAAM,IAAIZ,SACd,IAAIa,eAAe,CACjB,MAAMC,MAAMC,EAAY,CAChBC,MAAAA,EAASR,EAAoBhC,KAAMyC,UAAW,EAEpD,IAAIC,EAAqB,EAChB,OAAA,CACHC,IAAAA,EAAI,MAAMH,EAAQI,OACtB,GAAID,EAAGE,KACL,MAEFV,GAAUQ,EAAGzT,MAAM4T,WAEnBJ,IACIA,EAAqB,KAAO,GACjB/R,EAAAA,KACX,eACC,WAAUmR,MAAkB,IAAIxV,KAAKC,aACpC,OAAO,EACP8B,OACAnC,KAAK6W,MACFZ,EAAS,KAAS,KAAU,IAAMa,OAAOC,OAAO,EAC/C,GAAG,OACF,EAGAC,EAAAA,QAAQP,EAAGzT,KAAK,EAGhByB,EAAAA,KACX,eACC,WAAUmR,MAAkB,IAAIxV,KAAKC,aACpC,OAAO,EACP8B,OACAnC,KAAK6W,MAAOZ,EAAS,KAAS,KAAU,IAAMa,OAAOC,OAAO,EAC1D,GAAG,OACA,EAETV,EAAWY,MAAO,CACpB,CACD,CAAA,CAAC,EAGAnB,GAAAA,EAAoBlJ,SAAW,IAAK,CACtC3P,EAAI,0BAA2B,MAAMiZ,EAAIf,KAAM,CAAA,EAC/C,OAGI+B,MAAAA,EAAkB,MAAMhB,EAAIf,OAE7B3K,EAAAA,sBAAsBsK,CAAQ,EAAIoC,EACvCjW,EAAGwE,QAAS,kBAAiBqP,IAAY1X,KAAKC,UAAU6Z,CAAe,CAAC,CAC1E,CAEA,KAAK3G,YAAc,gBAET,CACR,IAAI4G,EAAqB,MAAMlW,EAAGI,QAAQ,oBAAoB,EAG9D,GAFAgQ,EAAK,gCAAgC,EAGnC8F,IAAuB,MACvBnZ,KAAK+B,MAAQoX,EAAqB,IAAQ,GAC1C,CACA,IAAIC,EAAY,MAAMnW,EAAGI,QAAQ,UAAU,EAC3C,GAAI+V,IAAc,KAChB/F,OAAAA,EAAK,oBAAoB,EAClB,CAAEiE,SAAUlY,KAAKgE,MAAMgW,CAAS,CAAA,EAI3C,IAAIC,EAAkB,MAAMzD,EAC1B,MACC,GAAErC,sBAAkC,EAGnC8F,GAAAA,EAAgBzK,SAAW,IAAK,CAC9ByI,IAAAA,EAAW,MAAMgC,EAAgBlC,OACjCE,OAAAA,EAASiC,aAAe,WAC1BrW,EAAGwE,QAAQ,qBAAsBzH,KAAK+B,IAAK,CAAA,EAC3CkB,EAAGwE,QAAQ,WAAYrI,KAAKC,UAAUgY,EAASC,QAAQ,CAAC,EACxDjE,EAAK,2BAA2B,EAEzB,CAAEiE,SAAUD,EAASC,QAAAA,IAE5BjE,EAAK,eAAe,EACpBA,EAAKgE,EAASC,QAAQ,EAEf,UAEJ,CACDiC,IAAAA,EAAeF,EAAgBlC,OACnC9D,OAAAA,EAAK,8BAA8B,EACnCA,EAAKkG,CAAY,EAEV,KACT,EAGF,KAAK/G,mBAAqB,gBAAkB,CAC1C,MAAM0D,EAAuB,EAEvBsD,MAAAA,EAAW,MAAM5D,EACrB,MACC,GAAErC,aACH,KACA,MAAM,KAAKd,aAAc,CAAA,EAEvB+G,OAAAA,EAAS5K,SAAW,IACf,MAAM4K,EAASrC,QAGxB9D,EACE,iCACAmG,EAAS5K,OACT4K,EAASpC,UAAU,EAEd,KAAA,EAGT,KAAK3E,aAAe,gBAAkB,CAC7B,OAAA,MAAMxP,EAAGI,QAAQ,cAAc,CAAA,EAGnCqP,KAAAA,kBAAoB,eAAgB+G,EAAwB,GAAO,CAKlElQ,OAJAkQ,IACFlQ,EAAK2J,eAAiB,MAGpB3J,EAAK2J,gBAAkB,KAClB3J,EAAK2J,gBAGd,MAAMgD,EAAuB,EAEtB,IAAIjO,QAAQ,MAAOC,EAASC,IAAW,CAC5C,IAAIuR,EAAe,MAAMzW,EAAGI,QAAQ,2BAA2B,EAE3DsW,IAAAA,EAAgB,MAAM/D,EACxB,MACC,GAAErC,yBAAqCmG,oBACxC,KACA,MAAM,KAAKjH,aAAc,CAAA,EAGvBkH,GAAAA,EAAc/K,SAAW,IAAK,CAC5BgL,IAAAA,EAAW,MAAMD,EAAcxC,OAEnClU,EAAGwE,QACD,yBACArI,KAAKC,UAAUua,EAAStC,QAAQ,CAAC,EAGnC/N,EAAK2J,eAAiB0G,EAAStC,SAE/BpP,EAAQ0R,EAAStC,QAAQ,OAEzB/N,EAAK8I,aAAc,EACnBlK,EAAOwR,CAAa,CACtB,CACD,EAAA,EAGEhH,KAAAA,eAAiB,eACpBkH,EACAC,EACA,CACA,IAAIC,EAAwB,CAC1BtG,EAAkBC,SAClBD,EAAkBG,mBAClBH,EAAkBI,kBAClBJ,EAAkBK,mBAClBL,EAAkBO,WAClBP,EAAkBQ,qBAClBR,EAAkBS,sBAClBT,EAAkBW,oBAClBX,EAAkBY,mBAClBZ,EAAkBa,cAClBb,EAAkBc,eAClBd,EAAkBkB,YAClBlB,EAAkBmB,gBAClBnB,EAAkBoB,eAClBpB,EAAkBqB,eAClBrB,EAAkBsB,mBAClBtB,EAAkBuB,kBAClBvB,EAAkBiC,QAClBjC,EAAkB+B,QAClB/B,EAAkB8B,aAClB9B,EAAkBkC,eAAe,EAGnC,aAAMO,EAAuB,EAEtB,IAAIjO,QAAQ,MAAOC,EAASC,IAAW,CAC5C,IAAI6R,EAAc,MAAMpE,EACtB,MACC,GAAErC,cAA0BuG,aAA0BD,iBAA4BE,EAAsBnY,KACvG,GAAG,IAEL,KACA,MAAM,KAAK6Q,cAAc,EAEvBuH,GAAAA,EAAYpL,SAAW,IAAK,CAC1BvJ,IAAAA,EAAU,MAAM2U,EAAY7C,OAEhClU,EAAGwE,QAAQ,kBAAmBrI,KAAKC,UAAUgG,EAAQiS,QAAQ,CAAC,EAC9D/N,EAAKlE,QAAUA,EAAQiS,SAEvBpP,EAAQ7C,EAAQiS,QAAQ,OAExB/N,EAAK8I,aAAc,EACnBlK,EAAO6R,CAAW,CACpB,CACD,CAAA,EAGE5T,KAAAA,uBAAyB,eAAgBqT,EAAe,GAAO,CAClE,MAAMvD,EAAuB,EAE7B,IAAIc,EAAWzN,EAAKlE,QAMhBkE,GAJAkQ,IACSzC,EAAA,MAGTzN,EAAK2J,iBAAmB,KACnB,OAAA,KAMP3J,GAHIA,MAAAA,EAAKmJ,kBAAkB+G,CAAY,EAGvClQ,EAAK2J,iBAAmB,MACxB3J,EAAK2J,eAAe0G,WAAa,MACjCrQ,EAAK2J,eAAe0G,SAAStW,OAAS,EACtC,CACA,IAAI2W,EAAoB1Q,EAAK2J,eAAe0G,SAASM,KACnD,CAACC,EAAQC,IAAYD,EAAEE,eAAiBD,EAAEC,eAAiB,GAAK,CAAE,EAClE,CAAC,EAEHrD,EAAW,MAAMzN,EAAKoJ,eACpBsH,EAAkBJ,aAClBI,EAAkBH,cAAc,EAIpC,IAAIQ,EAAa,CAAA,EAEjB,QAASC,KAAQvD,EAAS3R,QAAQI,KAAK+U,aACrCF,EAAW3Y,KAAKqV,EAASsD,WAAW7U,KAAK8U,CAAI,CAAC,EAGhD,IAAIE,EAAQH,EAAWJ,KAAK,CAACC,EAAGC,IAC9BD,EAAEE,eAAiBD,EAAEC,eAAiB,GAAK,CAAC,EAC5C,CAAC,EAuCIK,MArCmB,CACxBC,cAAeF,EACfvO,qBAAyB8K,EAAS4D,sBAAsBC,SAEpD,CAAC,EADD7D,EAAS4D,sBAAsBnV,KAAKgV,EAAMK,WAAW,EAEzDC,oBAAwB/D,EAAS+D,oBAAoBF,SAEjD,CAAC,EADD7D,EAAS+D,oBAAoBtV,KAAKgV,EAAMK,WAAW,EAEvDE,mCACEhE,EAASgE,mCAAmCP,EAAMK,WAAW,EAC1D3K,WAAW1K,KAChBqK,mBACEkH,EAASiE,qBAAqBxV,KAAKgV,EAAMK,WAAW,EAAEvX,MACxD2X,mBACElE,EAASkE,mBAAmBzV,KAAKgV,EAAMK,WAAW,EAAEvX,MACtD4X,kBAAsBnE,EAASmE,kBAAkBN,SAE7C,CAAC,EADD7D,EAASmE,kBAAkB1V,KAAKgV,EAAMK,WAAW,EAAEM,MAEvDC,sBACErE,EAASqE,sBAAsB5V,KAAKgV,EAAMK,WAAW,EAAEQ,aACzD3J,iBAAkBqF,EAASrF,iBAAiBlM,KAAKgV,EAAMK,WAAW,EAClES,yBACEvE,EAASuE,yBAAyB9V,KAAKgV,EAAMK,WAAW,EAC1DU,mBAAoBxE,EAASwE,mBAAmB/V,KAChDgW,QAASzE,EAASyE,QAAQhW,KAAKgW,QAC/BvL,eAAgB8G,EAAS9G,eACzBtN,QAASoU,EAAS0E,eAAejW,KACjCkW,iBAAkB3E,EAAS2E,iBAAiBlW,KAAKlC,MACjDqY,gBAAiB5E,EAAS6E,kBAAkBpW,KAAKlC,MACjDuY,gBAAoB9E,EAAS8E,gBAAgBjB,SAEzC,CAAC,EADD7D,EAAS8E,gBAAgBrW,KAAK2V,MAElCW,oBAAqB/E,EAAS+E,oBAAoBtW,KAClDJ,QAAS2R,EAAS3R,QAAQI,KAC1B4I,uBAAwB2I,EAAS3I,uBAAuB5I,IAAAA,CAGnDiV,EAGJ9H,KAAAA,mBAAqB,eACxB6G,EAAe,GACqB,CACpC,IAAIuC,EAAc,MAAMzS,EAAKnD,uBAAuBqT,CAAY,EAEhE,GAAIuC,GAAe,KACV,OAAA,KAGT,IAAIC,EAAkB,CACpB,GAAGD,CAAAA,EAGL,QAASE,KAAWnO,OAAOC,KAAKiO,EAAgBtB,cAAcwB,KAAK,EACjDxB,EAAAA,cAAcwB,MAAMD,CAAO,EAAI,CAC7CE,UAAWH,EAAgBtB,cAAcwB,MAAMD,CAAO,EACtDG,SAAUH,CAAAA,EAId,QAASI,KAAavO,OAAOC,KAAKiO,EAAgBR,OAAO,EACvCA,EAAAA,QAAQa,CAAS,EAAI,CACnC,GAAGL,EAAgBR,QAAQa,CAAS,EACpCC,WAAYD,CAAAA,EAIhB,QAASE,KAAazO,OAAOC,KAAKiO,EAAgBrZ,QAAQA,OAAO,EAC/CA,EAAAA,QAAQA,QAAQ4Z,CAAS,EAAI,CAC3C,GAAGP,EAAgBrZ,QAAQA,QAAQ4Z,CAAS,EAC5CC,WAAYD,EACZE,iBACEnT,EAAKiD,sBAAsBmQ,wBAAwBH,CAAS,EACzDE,gBAAAA,EAIT,QAASF,KAAazO,OAAOC,KAC3BiO,EAAgBtK,iBAAiB/O,OAAO,EAExB+O,EAAAA,iBAAiB/O,QAAQ4Z,CAAS,EAAI,CACpD,GAAGP,EAAgBtK,iBAAiB/O,QAAQ4Z,CAAS,EACrDC,WAAYD,EACZE,iBACEnT,EAAKiD,sBAAsBmQ,wBAAwBH,CAAS,EACzDE,gBAAAA,EAISnT,OAAAA,EAAAA,EAAKuJ,+BAA+BmJ,CAAe,EAEhD,MAAMhZ,EAAGI,QAAQ,4BAA6B,EAAK,GAEhD2Y,EAAYlM,mBAAmBlG,OAClD4D,GAAWA,EAAEoP,UAAYpP,EAAEuC,uBAAyB,CAAC,EAGtCzM,OAAS,EAUhBmD,EAAAA,KAAK,sBAAuBwV,CAAe,EAEjDA,CAAAA,EAGJpJ,KAAAA,4BAA8B,SAAUgK,EAAc,CACzD,MAAMC,EAAwB,CAAA,EAExBC,EACJxT,EAAKiD,sBAAsBwQ,kCAAkCH,CAAI,EACnE,GAAIE,IACFD,EAAsBG,QAAQ,CAC5BxY,KAAMsY,EAAiBlQ,kBAAkBpI,KACzCC,YAAaqY,EAAiBlQ,kBAAkBnI,YAChDL,KAAM0Y,EAAiBlQ,kBAAkBxI,KACzCwY,KAAAA,CAAAA,CACD,EAEGE,EAAiBL,kBACVQ,QAAAA,KAASH,EAAiBL,iBAAkB,CAC7CS,MAAAA,EAAW5T,EAAKsJ,4BAA4BqK,CAAK,EACvD,QAAShT,KAAQiT,EACfL,EAAsBnb,KAAKuI,CAAI,EAMhC4S,OAAAA,CAAAA,EAGJhK,KAAAA,+BAAiC,SAAUsK,EAAa,CAC3D,IAAIC,EAAc,CAAE,GAAGD,CAAAA,EAEnBpP,EAAOD,OAAOC,KAAKqP,CAAW,EAClC,QAAShU,KAAO2E,EAAM,CAChBsP,IAAAA,EAAQ,OAAOD,EAAYhU,CAAG,EAC9BkU,EAASF,EAAYhU,CAAG,EAExBmU,GAAAA,MAAMC,QAAQF,CAAM,EAAG,CACzB,QAASG,EAAI,EAAGA,EAAIH,EAAOja,OAAQoa,IAAK,CAClCC,IAAAA,EAAUJ,EAAOG,CAAC,EAClB,OAAOC,GAAY,SACrBJ,EAAOG,CAAC,EAAInU,EAAKuJ,+BAA+B6K,CAAO,EAEvDJ,EAAOG,CAAC,EAAIC,EAGhBN,EAAYhU,CAAG,EAAIkU,UACVD,IAAU,UAAYC,IAAW,KAC1CF,EAAYhU,CAAG,EAAIE,EAAKuJ,+BACtBuK,EAAYhU,CAAG,CAAC,MAEb,CACDA,GAAAA,EAAI8D,QAAQ,MAAM,EAAI,IAAM,CAACqQ,MAAMC,QAAQF,CAAM,EAAG,CAClDK,IAAAA,EAAYvU,EACbwO,MAAM,MAAM,EAAE,CAAC,EACfjK,QAAQ,UAAW,EAAE,EACrBiQ,YAAa,EAEhB,OAAQD,EAAS,CACf,IAAK,OACL,IAAK,WACSA,EAAA,gBACZ,KAAM,CAGN9G,IAAAA,EAAWtD,EAAiBsK,KAE5BtQ,GAAAA,EAAEqQ,eAAkB,UAASD,cAAsBC,YAAa,CAAA,EAEhEE,EAAiBxU,EAAKiD,sBAAsBsK,CAAS,EACzD,GACEiH,GACAA,EAAeR,CAAM,GACrBQ,EAAeR,CAAM,EAAE1Q,kBACvB,CACMmR,MAAAA,EAASD,EAAeR,CAAM,EAElCS,EAAOnR,kBAAkBpI,MACzBuZ,EAAOnR,kBAAkBpI,KAAKnB,OAAS,EAEvC+Z,EAAa,GAAEO,OAAe,EAAII,EAAOnR,kBAAkBpI,KAE3DuZ,EAAOC,SACPD,EAAOC,QAAQC,eACfF,EAAOC,QAAQC,cAAc5a,OAAS,IAEtC+Z,EAAa,GAAEO,OAAe,EAAII,EAAOC,QAAQC,eAIjDF,EAAOnR,kBAAkBnI,aACzBsZ,EAAOnR,kBAAkBnI,YAAYpB,OAAS,IAE9C+Z,EAAa,GAAEO,cAAsB,EACnCI,EAAOnR,kBAAkBnI,aAI3BsZ,EAAOnR,kBAAkBxI,MACzB2Z,EAAOnR,kBAAkBxI,KAAKf,OAAS,IAEvC+Z,EAAa,GAAEO,OAAe,EAAII,EAAOnR,kBAAkBxI,MAI3D2Z,EAAOG,qBACPH,EAAOG,oBAAoB7a,OAAS,IAEvB+Z,EAAA,GAAEO,sBAA8B,EAC3CI,EAAOG,qBAGP,OAAOH,EAAOna,qBAAyB,MAC5BwZ,EAAA,GAAEO,uBAA+B,EAC5CI,EAAOna,sBAGP,OAAOma,EAAOjR,oBAAwB,MAC3BsQ,EAAA,GAAEO,sBAA8B,EAC3CI,EAAOjR,qBAGP,OAAOiR,EAAOI,SAAa,MAChBf,EAAA,GAAEO,WAAmB,EAAII,EAAOI,UAG3C,OAAOJ,EAAOtB,iBAAqB,MACrCW,EAAa,iBAAqBW,EAAOtB,iBAAiBxX,IACvDgF,GACQX,EAAKsJ,4BAA4B3I,CAAI,CAC7C,IAMTmT,EAAYhU,CAAG,EAAIkU,GAIhBF,OAAAA,CAAAA,EAGJ5Z,KAAAA,iBAAmB,eACtBgW,EAAe,GACiB,CAChC,IAAI3N,EAAc,MAAMvC,EAAKqJ,mBAAmB6G,CAAY,EAE5D,GAAI3N,GAAe,KACV,OAAA,KAGT,IAAIC,EACFxC,EAAKiD,sBAAsB6R,wBACzBvS,EAAYzG,QAAQiZ,iBAAiB,EAErCtS,EACFzC,EAAKiD,sBAAsB+R,4BACzBxS,EAAiByS,cAAc,EAG/BC,EAAqC,CAAA,EAErC5Q,EAAgBtE,EAAK6J,QAAQ3H,iBAAiBK,CAAW,EAC7D,QAASoC,KAAaL,EACpB4Q,EAAmB9c,KAAKuM,CAAS,EAGnC,IAAI0B,EAAarG,EAAK6J,QAAQ1H,YAAYI,CAAW,EACrD,QAASkE,KAAUJ,EACjB6O,EAAmB9c,KAAKqO,CAAM,EAGhC,IAAIa,EAAYtH,EAAK6J,QAAQzH,UAAUG,CAAW,EAClD,QAAS4C,KAASmC,EAChB4N,EAAmB9c,KAAK+M,CAAK,EAG/B,IAAIiD,EAAmBpI,EAAK6J,QAAQxH,oBAAoBE,CAAW,EAEnE,QAAS+F,KAAmBF,EAC1B8M,EAAmB9c,KAAKkQ,CAAe,EAGhC6M,SAAAA,EAAmBvE,EAAQC,EAAQ,CAC1C,GACE,OAAOD,EAAErW,YAAgB,KACzB,OAAOsW,EAAEtW,YAAgB,IACzB,CACA,IAAI6a,EAAaxE,EAAEnW,oBAAsBmW,EAAErW,YAAe,IACtD8a,EAAaxE,EAAEpW,oBAAsBoW,EAAEtW,YAAe,IAEnD6a,OAAAA,EAAYC,EAAY,EAAI,GAGjC,OAAA,OAAOzE,EAAEjZ,QAAY,IAChB,OAAOkZ,EAAElZ,QAAY,KAAeiZ,EAAEjZ,QAAUkZ,EAAElZ,QACrD,GACA,EAGCiZ,EAAErN,MAAQsN,EAAEtN,MAAQ,EAAI,EACjC,CAEM+R,MAAAA,EAAeJ,EAClB7U,OAAQ4D,GAAMA,EAAEmB,OAAO,EACvBuL,KAAKwE,CAAkB,EAEpBI,EAAsBL,EACzB7U,OAAc4D,GAAAA,EAAEtM,SAAW,CAACsM,EAAEmB,OAAO,EACrCuL,KAAKwE,CAAkB,EACpBK,EAAyBN,EAC5B7U,OAAQ4D,GAAM,CAACA,EAAEtM,SAAW,CAACsM,EAAEmB,OAAO,EACtCuL,KAAKwE,CAAkB,EAE1BD,OAAAA,EAAqB,CACnB,GAAGI,EACH,GAAGC,EACH,GAAGC,CAAsB,EAG3BN,EAAmBxB,QACjB1T,EAAK6J,QAAQ7H,kBACXO,EACAC,EACAC,CAAoB,CACrB,EAGHzC,EAAK4J,aAAesL,EACPhY,EAAAA,KAAK,mBAAoBgY,CAAkB,EAEjDA,CAAAA,EAGT,IAAIlV,EAAO,KAEN6J,YAAAA,QAAU,IAAI/H,GAAc,IAAI,EAErCgI,EAAK,aAAa,EACX,IACT,CACF,CCv+BApU,EAAI,OAAQ,iBAAiB,EAE7BmB,OAAO4C,aAAe,IAAIoH,GAC1BhK,OAAO6C,GAAK,IAAIoE,GAChBjH,OAAOD,UAAY,IAAI+R,GACrBnS,mCACAA,eAAmC,EAGrC,SAASif,IAA6B,CAC9B5Z,MAAAA,EAAe6Z,EAAO,EAAK,EAC3Bzf,EAAkByf,EAAO,EAAK,EAC9Bta,EAAQsa,EAAO,CAAA,CAAE,EAEhB,MAAA,CACL7Z,aAAAA,EACA5F,gBAAAA,EACAmF,MAAAA,CAAAA,CAEJ,CAEA,MAAMkC,EAAQmY,GAAgB,EAE9B5e,OAAO2G,SAAWmY,EAAcrY,CAAK,EACrCzG,OAAO6C,GAAGuE,qBAAqB3G,KAAK,SAAY,CAC9C5B,EAAI,OAAQ,+CAA+C,EAE3D4H,EAAMrH,gBAAgBwF,MAAQ,MAAM5E,OAAOD,UAAU6F,uBAE9CrG,EAAAA,EAACiH,OAAQf,SAASC,eAAe,KAAK,CAAiB,CAChE,CAAC"}