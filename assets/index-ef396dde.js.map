{"version":3,"file":"index-ef396dde.js","sources":["../../src/scripts/log.ts","../../src/pages/main-page.tsx","../../src/pages/authenticated.tsx","../../src/pages/dashboard.tsx","../../src/components/footer.tsx","../../src/app.tsx","../../src/scripts/indexedDB.ts","../../src/scripts/eventEmitter.ts","../../src/scripts/apiClient.ts","../../src/main.tsx"],"sourcesContent":["/**\n *\n * @param {string} category What part of the script we currently are in\n * @param {...any} params   Everything else, text, objects and so forth.\n */\nexport function log(category: string, ...params: any[]): void {\n  if (timestampLogs) {\n    params = [...params, new Date().toISOString()];\n  }\n  console.log(`[${category}]`, JSON.stringify([...params]));\n}\n\nvar timestampLogs = false;\n","export default function MainPage() {\n  return (\n    <>\n      Main page -{\" \"}\n      <a\n        href={\n          import.meta.env.VITE_BUNGIE_API_AUTHURL +\n          \"?state=dataverse-\" +\n          new Date().getTime()\n        }>\n        Log in\n      </a>\n    </>\n  );\n}\n","import { getCurrentUrl } from \"preact-router\";\nimport { log } from \"../scripts/log\";\n\nexport default function Authenticated() {\n  const apiClient = window.apiClient;\n\n  const url = getCurrentUrl();\n  log(\"Auth\", \"Authenticated page, getting code\", url);\n  const authUrl = new URL(url, location.origin).searchParams;\n\n  const code = authUrl.get(\"code\");\n\n  log(\"Auth\", \"Code\", code);\n\n  if (!code) {\n    log(\"Auth\", \"No code found, redirecting to main page\");\n    location.href = \"/\";\n    return <>Redirecting to main page</>;\n  }\n\n  apiClient\n    .getToken(\"\", code)\n    .then(() => {\n      log(\"Auth\", \"Got token, redirecting to dashboard\");\n      location.href = \"/#/dashboard\";\n    })\n    .catch((err) => {\n      log(\"Auth\", \"Failed to get token, redirecting to main page\");\n      location.href = \"/\";\n    });\n\n  return <>Authenticated, redirecting to Dashboard</>;\n}\n","export default function Dashboard() {\n  const apiClient = window.apiClient;\n\n  apiClient.checkIfAuthenticated().then((result) => {\n    if (!result) {\n      location.href = \"/\";\n    }\n  });\n\n  return <>Blep</>;\n}\n","export function Footer() {\n  return (\n    <footer className=\"fui body fiction\">\n      Â© 2023\n      {new Date().getUTCFullYear() != 2023\n        ? \" - \" + new Date().getUTCFullYear()\n        : null}{\" \"}\n      NoLifeKing85#2914\n    </footer>\n  );\n}\n","import { Router } from \"preact-router\";\nimport { Fragment } from \"preact/jsx-runtime\";\nimport { createHashHistory } from \"history\";\nimport \"./app.css\";\nimport MainPage from \"./pages/main-page\";\nimport Authenticated from \"./pages/authenticated\";\nimport Dashboard from \"./pages/dashboard\";\nimport { Footer } from \"./components/footer\";\n\nexport function App(props: { authenticated: boolean }) {\n  console.log(props);\n  return (\n    <>\n      <header className=\"header tooltip\">Dataverse</header>\n      <div class=\"app\">\n        <Router history={createHashHistory()}>\n          <Fragment path=\"/\">\n            <MainPage />\n          </Fragment>\n          <Fragment path=\"/authenticated\">\n            <Authenticated />\n          </Fragment>\n          <Fragment path=\"/dashboard\">\n            <Dashboard />\n          </Fragment>\n        </Router>\n      </div>\n      <Footer />\n    </>\n  );\n}\n","import { log } from \"./log\";\nexport class Destiny2Database {\n  DBInstance: IDBDatabase | null;\n  initializeDatabase: () => Promise<void>;\n  setItem: (key: string, value: any) => Promise<void>;\n  setItems: (items: { key: string; value: any }[]) => Promise<void>;\n  getItem: (key: string, defaultValue?: null) => Promise<any>;\n  removeItem: (key: string) => Promise<void>;\n  setStorageItem: (\n    storageName: string,\n    key: string,\n    value: any\n  ) => Promise<void>;\n  setStorageItems: (\n    storageName: string,\n    items: { key: string; value: any }[]\n  ) => Promise<void>;\n  getStorageItem: (\n    storageName: string,\n    key: string,\n    defaultValue?: null\n  ) => Promise<any>;\n  getStorageItems: (storageName: string, filter?: null) => Promise<any>;\n  removeStorageItem: (storageName: string, key: string) => Promise<void>;\n  constructor() {\n    this.DBInstance = null;\n\n    this.initializeDatabase = async function () {\n      return new Promise<void>((resolve, reject) => {\n        let dbRequest = window.indexedDB.open(\"destiny2-dataverse\", 2);\n\n        dbRequest.onupgradeneeded = function (event) {\n          const db = dbRequest.result;\n\n          log(\"DB\", \"Old\", event.oldVersion, \"New\", event.newVersion);\n          if (event.oldVersion < 1) {\n            log(\n              \"DB\",\n              \"Creating first version of database, since it never existed on this installation.\"\n            );\n            const keyValueStore = db.createObjectStore(\"storage\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            keyValueStore.createIndex(\"by_key\", \"key\");\n          }\n          if (event.oldVersion < 2) {\n            log(\"DB\", \"Creating object store for player/character activity\");\n\n            const playerActivityStore = db.createObjectStore(\"playerActivity\", {\n              autoIncrement: false,\n              keyPath: \"key\",\n            });\n\n            playerActivityStore.createIndex(\"by_key\", \"key\");\n\n            const activityDetailsStore = db.createObjectStore(\n              \"activityDetails\",\n              {\n                autoIncrement: false,\n                keyPath: \"key\",\n              }\n            );\n\n            activityDetailsStore.createIndex(\"by_key\", \"key\");\n          }\n        };\n\n        dbRequest.onsuccess = function (e: any) {\n          log(\"DB\", \"Loaded database\");\n          self.DBInstance = e.target.result;\n\n          resolve();\n        };\n\n        dbRequest.onerror = function (event) {\n          log(\"DB\", \"Failed to load database\");\n          reject(event);\n        };\n      });\n    };\n\n    async function _setItem(storeName: string, key: string, value: any) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put({\n          key: key,\n          value: value,\n        });\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getFilteredItems(storeName: string, filter = null) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n\n        request.onsuccess = function () {\n          const result = request.result;\n\n          if (filter) {\n            resolve(result.filter(filter));\n          } else {\n            resolve(result);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _getItem(\n      storeName: string,\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return new Promise((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(storeName, \"readonly\");\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n\n        request.onsuccess = function (event: any) {\n          if (event.target.result) {\n            resolve(event.target.result.value);\n          } else {\n            resolve(defaultValue);\n          }\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    async function _removeItem(storeName: string, key: string) {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = self.DBInstance!.transaction(\n          storeName,\n          \"readwrite\"\n        );\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.delete(key);\n\n        request.onsuccess = function () {\n          resolve();\n        };\n\n        request.onerror = function (event) {\n          reject(event);\n        };\n      });\n    }\n\n    this.setItem = async function (key: string, value: any) {\n      return await _setItem(\"storage\", key, value);\n    };\n\n    this.setItems = async function (items: { key: string; value: any }[]) {\n      for (let item of items) {\n        await _setItem(\"storage\", item.key, item.value);\n      }\n    };\n\n    this.getItem = async function (\n      key: string,\n      defaultValue: any | null = null\n    ) {\n      return await _getItem(\"storage\", key, defaultValue);\n    };\n\n    this.removeItem = async function (key: string) {\n      return await _removeItem(\"storage\", key);\n    };\n\n    this.setStorageItem = async function (\n      storageName: string,\n      key: string,\n      value: any | null\n    ) {\n      return await _setItem(storageName, key, value);\n    };\n\n    this.setStorageItems = async function (\n      storageName: string,\n      items: { key: string; value: any }[]\n    ) {\n      for (let item of items) {\n        await _setItem(storageName, item.key, item.value);\n      }\n    };\n\n    this.getStorageItem = async function (\n      storageName,\n      key,\n      defaultValue = null\n    ) {\n      return await _getItem(storageName, key, defaultValue);\n    };\n\n    this.getStorageItems = async function (storageName: string, filter = null) {\n      return await _getFilteredItems(storageName, filter);\n    };\n\n    this.removeStorageItem = async function (storageName: string, key: string) {\n      return await _removeItem(storageName, key);\n    };\n\n    var self = this;\n\n    return this;\n  }\n}\n","import { log } from \"./log.js\";\n\nclass D2Event {\n  eventName!: string;\n  handler!: CallableFunction;\n}\n\nexport class EventEmitter {\n  eventListeners: D2Event[];\n  addEventListener: (eventName: string, eventHandler: any) => void;\n  emit: (eventName: string, ...params: any[]) => Promise<unknown>;\n  constructor() {\n    this.eventListeners = [];\n\n    /**\n     * Listen to an event sent from this event emitter\n     * @param {String} eventName The event that you want to listen to\n     * @param {CallableFunction} eventHandler The method that should run whenever the event occurs\n     */\n    this.addEventListener = function (\n      eventName: string,\n      eventHandler: CallableFunction\n    ) {\n      log(`EVENT:REGISTERED`, eventName);\n      this.eventListeners.push({ eventName: eventName, handler: eventHandler });\n    };\n\n    /**\n     * Triggers an event, that will invoke all listeners\n     * @param {String} eventName\n     * @param {any[]} params\n     */\n    this.emit = async function (eventName: string, ...params: any[]) {\n      let logArguments = JSON.parse(\n        (await window.db.getItem(\"d2-debugmode\")) ?? \"false\"\n      );\n      if (logArguments) {\n        log(\"EVENT:EMITTING\", eventName, ...params);\n      } else {\n        log(\"EVENT:EMITTING\", eventName);\n      }\n      return new Promise((resolve, reject) => {\n        this.eventListeners\n          .filter((ev) => ev.eventName == eventName)\n          .forEach(async (l) => {\n            try {\n              await l.handler(...params);\n            } catch (e) {\n              log(\"EVENT:ERROR\", eventName, e);\n              console.error(e);\n              reject(e);\n            }\n          });\n\n        resolve(true);\n      });\n    };\n\n    log(\"EventEmitter\", \"Initialized\");\n\n    return this;\n  }\n}\n","import { log } from \"./log\";\n\nexport class Destiny2ApiClient {\n  checkIfAuthenticated: () => Promise<boolean>;\n  getToken: (state: string, code: string) => Promise<any>;\n  refreshToken: () => Promise<any>;\n  apiToken: string;\n  applicationName: string;\n\n  constructor(apiToken: string, appName: string) {\n    log(\"Destiny2ApiClient\", \"Initializing\");\n\n    const db = window.db;\n    const eventEmitter = window.eventEmitter;\n\n    const authGatewayUrl = \"https://o2g.itssimple.se\";\n    const destinyBaseUrl = \"https://www.bungie.net\";\n    const destinyApiUrl = \"https://www.bungie.net/Platform\";\n\n    this.applicationName = appName;\n\n    this.apiToken = apiToken;\n\n    async function callUrl(\n      method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n      url: string,\n      body: any | null = null,\n      authorization: any | null = null\n    ) {\n      if (body !== null) {\n        return await fetch(url, {\n          method: method,\n          headers: {\n            \"x-api-key\": self.apiToken,\n            authorization:\n              authorization != null ? `Bearer ${authorization}` : \"\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: body,\n        });\n      } else {\n        return await fetch(url, {\n          method: method,\n          headers: {\n            \"x-api-key\": self.apiToken,\n            authorization:\n              authorization != null ? `Bearer ${authorization}` : \"\",\n          },\n        });\n      }\n    }\n\n    async function refreshTokenIfExpired() {\n      const tokenExpires = await db.getItem(\"destinyTokenExpires\");\n\n      if (tokenExpires < Date.now()) {\n        log(\"Destiny2ApiClient\", \"Token expired, refreshing\");\n        await self.refreshToken();\n      }\n    }\n\n    function handleTokenResponse(tokenResponse: any) {\n      // Check if tokenResponse contains a property called error, and if so, log the error and return\n      if (tokenResponse.error) {\n        log(\n          \"Destiny2ApiClient\",\n          \"Error handling token\",\n          JSON.stringify(tokenResponse)\n        );\n\n        db.removeItem(\"destinyToken\");\n        db.removeItem(\"destinyRefreshToken\");\n        db.removeItem(\"destinyTokenExpires\");\n        db.removeItem(\"destinyRefreshTokenExpires\");\n        db.removeItem(\"destinyBungieMembershipId\");\n\n        return false;\n      }\n\n      // Set the token and refresh token in the database\n      db.setItem(\"destinyToken\", tokenResponse.access_token);\n      db.setItem(\"destinyRefreshToken\", tokenResponse.refresh_token);\n\n      // Calculate when the token expires and set it in the database\n      let tokenExpires = Date.now() + tokenResponse.expires_in * 1000;\n      db.setItem(\"destinyTokenExpires\", tokenExpires);\n\n      // Calculate when the refresh token expires and set it in the database\n      let refreshTokenExpires =\n        Date.now() + tokenResponse.refresh_expires_in * 1000;\n      db.setItem(\"destinyRefreshTokenExpires\", refreshTokenExpires);\n\n      // Set the membership_id in the database\n      db.setItem(\"destinyBungieMembershipId\", tokenResponse.membership_id);\n\n      return true;\n    }\n\n    this.checkIfAuthenticated = async () => {\n      try {\n        await refreshTokenIfExpired();\n        const isAuthenticated = (await db.getItem(\"destinyToken\")) !== null;\n        eventEmitter.emit(\"destiny2:authenticated\", isAuthenticated);\n        return isAuthenticated;\n      } catch (e) {\n        log(\"Destiny2ApiClient\", \"Error checking if authenticated\", e);\n        eventEmitter.emit(\"destiny2:authenticated\", false);\n        return false;\n      }\n    };\n\n    this.getToken = async (state: string, code: string) => {\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/token/${self.applicationName}`,\n        JSON.stringify({\n          code: code,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:auth-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:auth-failed\");\n        }\n        return tokenResponse;\n      }\n      log(\n        \"Destiny2ApiClient\",\n        \"Error getting token\",\n        tokenRequest.status,\n        tokenRequest.statusText,\n        await tokenRequest.text()\n      );\n      eventEmitter.emit(\"destiny2:auth-failed\");\n    };\n\n    this.refreshToken = async () => {\n      const refreshToken = await db.getItem(\"destinyRefreshToken\");\n      if (refreshToken == null) {\n        eventEmitter.emit(\"destiny2:refreshToken\", null);\n        return null;\n      }\n\n      const tokenRequest = await callUrl(\n        \"POST\",\n        `${authGatewayUrl}/refresh/${self.applicationName}`,\n        JSON.stringify({\n          refresh_token: refreshToken,\n        })\n      );\n\n      if (tokenRequest.status === 200) {\n        let tokenResponse = await tokenRequest.json();\n\n        if (handleTokenResponse(tokenResponse)) {\n          eventEmitter.emit(\"destiny2:refresh-success\");\n        } else {\n          eventEmitter.emit(\"destiny2:refresh-failed\");\n        }\n\n        return;\n      } else {\n        eventEmitter.emit(\"destiny2:refresh-failed\");\n      }\n    };\n\n    let self = this;\n\n    log(\"Destiny2ApiClient\", \"Initialized\");\n    return this;\n  }\n}\n","import { render } from \"preact\";\nimport { log } from \"./scripts/log\";\nimport { App } from \"./app\";\nimport { Destiny2Database } from \"./scripts/indexedDB\";\nimport { EventEmitter } from \"./scripts/eventEmitter\";\nimport { Destiny2ApiClient } from \"./scripts/apiClient\";\nimport \"./assets/fonts/style.css\";\nimport \"./index.css\";\nimport \"./styles/main.scss\";\n\ndeclare global {\n  interface Window {\n    db: Destiny2Database;\n    eventEmitter: EventEmitter;\n    apiClient: Destiny2ApiClient;\n  }\n}\n\nlog(\"MAIN\", \"Starting app...\");\n\nwindow.eventEmitter = new EventEmitter();\nwindow.db = new Destiny2Database();\nwindow.apiClient = new Destiny2ApiClient(\n  import.meta.env.VITE_BUNGIE_API_KEY,\n  import.meta.env.VITE_BUNGIE_API_APP\n);\n\nwindow.db.initializeDatabase().then(async () => {\n  log(\"MAIN\", \"Database initialized, checking for updates...\");\n\n  // Check if the user is authenticated or not\n  const isAuthenticated = await window.apiClient.checkIfAuthenticated();\n\n  render(\n    <App authenticated={isAuthenticated} />,\n    document.getElementById(\"app\") as HTMLElement\n  );\n});\n"],"names":["log","category","params","JSON","stringify","MainPage","_jsxs","_Fragment","children","_jsx","href","import","Date","getTime","Authenticated","apiClient","window","url","getCurrentUrl","code","URL","location","origin","searchParams","get","getToken","then","catch","err","Dashboard","checkIfAuthenticated","result","Footer","className","getUTCFullYear","App","props","console","class","Router","history","createHashHistory","Fragment","path","Destiny2Database","constructor","DBInstance","initializeDatabase","setItem","setItems","getItem","removeItem","setStorageItem","setStorageItems","getStorageItem","getStorageItems","removeStorageItem","Promise","resolve","reject","dbRequest","indexedDB","open","onupgradeneeded","event","db","oldVersion","newVersion","createObjectStore","autoIncrement","keyPath","createIndex","onsuccess","e","target","onerror","_setItem","storeName","key","value","request","self","transaction","objectStore","put","_getFilteredItems","filter","getAll","_getItem","defaultValue","_removeItem","delete","items","item","storageName","EventEmitter","eventListeners","addEventListener","emit","eventName","eventHandler","push","handler","parse","ev","forEach","l","error","Destiny2ApiClient","apiToken","appName","refreshToken","applicationName","eventEmitter","authGatewayUrl","callUrl","method","body","authorization","fetch","headers","refreshTokenIfExpired","now","handleTokenResponse","tokenResponse","access_token","refresh_token","tokenExpires","expires_in","refreshTokenExpires","refresh_expires_in","membership_id","isAuthenticated","state","tokenRequest","status","json","statusText","text","render","authenticated","document","getElementById"],"mappings":"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"}